<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/</link>
        <description>Welcome to Jungle&#39;s blog.</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>SunYingCe@bupt.edu.cn (Jungle)</managingEditor>
            <webMaster>SunYingCe@bupt.edu.cn (Jungle)</webMaster><lastBuildDate>Fri, 18 Nov 2022 22:05:21 &#43;0800</lastBuildDate>
            <atom:link href="https://Jungle430.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Sorting</title>
    <link>https://Jungle430.github.io/posts/sorting/</link>
    <pubDate>Fri, 18 Nov 2022 22:05:21 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/sorting/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="sorting">Sorting</h2>
<h3 id="quicksort">QuickSort</h3>
<h4 id="idea">Idea</h4>
<blockquote>
<p>$Process\ after\ dividing \rightarrow$(like MergeSort in thought)</p>
</blockquote>
<p>Divide the sequence into two subsequences
$$
S=S_L+S_R
$$
Downsizing
$$
max{|S_L|,|S_R|} &lt; n
$$
Be independent of each other
$$
max(S_L) \leq min(S_R)
$$
After the subsequences are sorted recursively, the original sequence is ordered naturally
$$
Sorted(S)=Sorted(S_L)+Sorted(S_R)
$$
A trivial solution: <strong>With a single element, is itself a solution</strong>$\rightarrow Recursive\ base\newline$</p>
<h4 id="problem">Problem</h4>
<p>How to delimit subsequence?</p>
<h4 id="pivot">Pivot</h4>
<p><strong>None</strong> of the <strong>left/right</strong> elements are <strong>bigger/smaller</strong> than it</p>
<p>$\rightarrow$ With the <strong>pivot as the boundary</strong>, the partition of the sequence will be realized naturally
$$
[l0,hi)=[lo,mi)+[mi]+(mi,hi)
$$
Key point: <strong>Construct Pivot!</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">quickSort</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//0 &lt;= lo &lt; hi &lt;= size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">if</span> <span class="p">(</span> <span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">//Recursive base
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">Rank</span> <span class="n">mi</span> <span class="o">=</span> <span class="n">partition</span> <span class="p">(</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="p">);</span> <span class="c1">//Key point
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">quickSort</span> <span class="p">(</span> <span class="n">lo</span><span class="p">,</span> <span class="n">mi</span> <span class="p">);</span> 
</span></span><span class="line"><span class="cl">   <span class="n">quickSort</span> <span class="p">(</span> <span class="n">mi</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hi</span> <span class="p">);</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="partition">Partition</h4>
<blockquote>
<p>Difficulty: pivot <strong>may not exist</strong> in the original sequence</p>
<p>Good news: The pivot <strong>must be in place</strong></p>
<p>In an ordered sequence, <strong>all elements</strong> are pivots <strong>and vice versa</strong></p>
</blockquote>
<h4 id="construct-pivot">Construct Pivot</h4>
<div class="mermaid" id="id-1"></div>
<h4 id="analysis">Analysis</h4>
<p><strong>Unstable</strong>
$$
\begin{align}
&amp;Example:\newline
&amp;Before:[&hellip;5_a&hellip;5_b&hellip;]\newline
&amp;After:[&hellip;5_b&hellip;5_a&hellip;]\newline
\end{align}
$$</p>
<h5 id="in-place">In-place</h5>
<p>$O(1)$ nice!</p>
<h5 id="in-time">In-time</h5>
<h6 id="best-case">Best case</h6>
<p>The pivot is always (near) in the center</p>
<p>$$
T(n)=2T(\frac{n-1}{2})+O(n)\newline
T(n)=O(n\log n)\newline
$$</p>
<h6 id="worst-case">Worst case</h6>
<p>Each division is extremely uneven
$$
T(n)=T(n-1)+T(0)+O(n)\newline
T(n)=O(n^2)\newline
$$</p>
<blockquote>
<p>Reduce the worst case probability</p>
<blockquote>
<p>Random selection</p>
<p>Middle of three(Randomly select three elements in the sequence and take the middle value)</p>
</blockquote>
<p>But it can only reduce the probability, not eliminate</p>
</blockquote>
<h6 id="average">Average</h6>
<p>$O(n\log n)\newline$</p>
<p>Take a <strong>uniformly independent distributed sequence</strong> as an example
$$
\begin{align}
&amp;order\ the\ rank\ of\ the\ pivot\ is\ k\newline
&amp;\rightarrow probability:\frac{1}{n}\newline\newline
&amp;then\ T(n)=(n+1)+(\frac{1}{n}) * \sum_{k=0}^{n-1}[T(k)+T(n-k-1)]\newline
&amp;It&rsquo;s\ easy\ to\ see\ that\rightarrow T(k)=T(n-k-1)\newline
&amp;T(n)=(n+1)+(\frac{2}{n}) * \sum_{k=0}^{n-1}T(k)\newline
&amp;n*T(n)=n * (n+1)+2 * \sum_{k=0}^{n-1}T(k)\ (1)\newline\newline
&amp;make\ n = n - 1\newline
&amp;(n-1) * T(n-1)=(n-1) * n+2 * \sum_{k=0}^{n-2}T(k)\ (2)\newline\newline
&amp;Then\ (1)-(2)\newline
&amp;n * T(n) - (n - 1) * T(n - 1) = 2 * n + 2 * T(n-1)\newline
&amp;n * T(n) - (n + 1) * T(n - 1)=2 * n\newline
&amp;\frac {T(n)}{n + 1} = \frac {T(n - 1)}{n}+\frac {2}{n+1}\newline
&amp;=\frac {2}{n+1} + \frac {2}{n} + \frac {2}{n-1} + &hellip; + \frac {2}{2} + \frac{T(0)}{1}\newline
&amp;=(2\ln2) * \log n \approx 1.39 * \log n\newline
\end{align}
$$</p>
<h4 id="algorithm-of-optimizationlgu">Algorithm of optimization(LGU)</h4>
<p>$$
S=[l0]+L(lo,mi]+G(mi,k)+U[l,hi]\newline
L &lt; pivot\leq G\newline
$$</p>
<div class="mermaid" id="id-2"></div>
<h5 id="code">code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//pivot construction algorithm;
</span></span></span><span class="line"><span class="cl"><span class="c1">//by adjusting the element position to construct the pivot of the interval [lo, hi] and return its rank
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">partition</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//LGU
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">swap</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="n">lo</span><span class="p">],</span> <span class="n">_elem</span><span class="p">[</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span> <span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span> <span class="p">)</span> <span class="p">]</span> <span class="p">);</span> <span class="c1">//Swap any element with the first element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">T</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">_elem</span><span class="p">[</span><span class="n">lo</span><span class="p">];</span> <span class="c1">//Take the first element as the candidate pivot 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    					<span class="c1">//-- after the above exchange, equivalent to random selection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="kt">int</span> <span class="n">mi</span> <span class="o">=</span> <span class="n">lo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//   ---- L &lt; [lo] ----- ] ----- [lo] &lt;= G --- ] [ ----- Unknown -------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// X x . . . . . . . . . x . . . . . . . . . . . x . . . . . . . . . . x X
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// |                     |                       |                       |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// lo (pivot candidate)  mi                      k                       hi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">k</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span> <span class="p">)</span> <span class="c1">//Scan from left to right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span> <span class="p">)</span> <span class="c1">//If the current element _elem[k] is less than pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="n">swap</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="o">++</span><span class="n">mi</span><span class="p">],</span> <span class="n">_elem</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="p">);</span> <span class="c1">//After swapping _elem[k] to the original mi, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    									 <span class="c1">//the L subsequence expands to the right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//   --------- L &lt; [lo] ---------- ] ------------- [lo] &lt;= G ----------]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// X x . . . . . . . . . . . . . . x . . . . . . . . . . . . . . . . . x X
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// |                               |                                     |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// lo (pivot candidate)            mi                                    hi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">   <span class="n">swap</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="n">lo</span><span class="p">],</span> <span class="n">_elem</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span> <span class="p">);</span> <span class="c1">//Candidate pivot homing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">return</span> <span class="n">mi</span><span class="p">;</span> <span class="c1">//return its rank
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="in-place-1">In-place</h5>
<p>$O(1)\newline$</p>
<h5 id="in-time-1">In-time</h5>
<p>$O(n)\newline$</p>
<h3 id="selection">Selection</h3>
<blockquote>
<p>The time cost of sorting is too high and you need to find other methods</p>
</blockquote>
<p><strong>K-selection</strong></p>
<p>In any set of comparably sized elements, how do you go from small to large to find the elements of order k?</p>
<p><strong>Example</strong></p>
<blockquote>
<p>Excel: large(range, rank)</p>
</blockquote>
<h4 id="median">Median</h4>
<p>The length of the <strong>sorted sequence</strong> S is n$(range\ from\ 0\ to\ n - 1)$, the element whose order is $\lfloor \frac {n}{2} \rfloor$ is called median</p>
<p><strong>Example</strong></p>
<blockquote>
<p>Excel: median(range)</p>
</blockquote>
<h4 id="mode">Mode</h4>
<p>In an <strong>unordered sequence</strong>, if <strong>more than half</strong> of the elements are m, m is called the mode</p>
<p><strong>Example</strong>
$$
\begin{align}
&amp;[3,5,2,3,3]\rightarrow mode\ is\ 3\newline
&amp;but\ in\ [3,5,2,3,3,0]\rightarrow no\ mode\newline
\end{align}
$$</p>
<h5 id="mode-algorithm">mode algorithm</h5>
<blockquote>
<p>Trivial algorithm: sort + traversal</p>
</blockquote>
<p>but if we want that $\rightarrow T(n) \leq O(n)\ and\ S(n)\leq O(1)?\newline$</p>
<blockquote>
<p>Necessary condition: If mode exists, then <strong>the mode must also be the median</strong></p>
<p>The mode, if it exists, <strong>must be frequent</strong></p>
</blockquote>
<p>$Process\ after\ reducing\newline$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="n">T</span> <span class="n">majEleCandidate</span> <span class="p">(</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">A</span> <span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">   <span class="n">T</span> <span class="n">maj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">c</span> <span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">         <span class="n">maj</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> 
</span></span><span class="line"><span class="cl">          <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> 
</span></span><span class="line"><span class="cl">         <span class="n">maj</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">?</span> <span class="n">c</span><span class="o">++</span> <span class="o">:</span> <span class="n">c</span><span class="o">--</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">maj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="general-purpose-algorithm">General purpose algorithm</h4>
<h5 id="quickselect">quickSelect</h5>
<p>$Process\ after\ reducing\newline$</p>
<p>Partition</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">quickSelect</span> <span class="p">(</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">A</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">k</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">;</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lo</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">hi</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="n">T</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">lo</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//O(hi - lo + 1) = O(n)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="k">while</span> <span class="p">(</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">pivot</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="n">j</span><span class="o">--</span><span class="p">;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">         <span class="k">while</span> <span class="p">(</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span> <span class="p">)</span> <span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="c1">//assert: quit with i == j
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivot</span><span class="p">;</span> <span class="c1">// A[0,i) &lt;= A[i] &lt;= A(i, n)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="p">)</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">k</span> <span class="p">)</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span> <span class="c1">//A[k] is now a pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h6 id="worst-case-1">Worst case</h6>
<p>$T(n)=O(n)+T(\frac {n}{Q})+T(\frac{3n}{4})\newline$</p>
<p>$if\ we\ want\ that\ T(n)=O(n)\newline$</p>
<p>$we\ should\ make\ \frac{n}{Q}+\frac{3n}{4}&lt;n \newline$</p>
<p>$so\ \frac{1}{Q}+\frac{3}{4}&lt;1\newline$</p>
<p>$make\ Q=5\newline$</p>
<p>$T(n)=cn+T(\frac{n}{5})+T(\frac{3n}{4})\newline$</p>
<p>$then\ T(n)=O(20cn)=O(n)\newline$</p>
<h5 id="linearselect">linearSelect</h5>
<p>Let Q be a small constant</p>
<ol start="0">
<li>
<p>if ( n = |A| &lt; Q ) return trivialSelect( A, k )</p>
</li>
<li>
<p>else divide A evenly into n/Q subsequences (each of size Q)</p>
</li>
<li>
<p>Sort each subsequence and determine n/Q medians //e.g. by insertionsort</p>
</li>
<li>
<p>Call linearSelect() to find M, median of the medians //by recursion</p>
</li>
<li>
<p>Let L/E/G = { x &lt;/=/&gt; M | x $\in$ A }</p>
</li>
<li></li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="o">|</span><span class="n">L</span><span class="o">|</span> <span class="p">)</span> <span class="k">return</span> <span class="n">linearSelect</span><span class="p">(</span> <span class="n">L</span><span class="p">,</span> <span class="n">k</span> <span class="p">)</span> 
</span></span><span class="line"><span class="cl">  	<span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="o">|</span><span class="n">L</span><span class="o">|</span> <span class="o">+</span> <span class="o">|</span><span class="n">E</span><span class="o">|</span> <span class="p">)</span> <span class="k">return</span> <span class="n">M</span> 
</span></span><span class="line"><span class="cl">  	<span class="k">return</span> <span class="n">linearSelect</span><span class="p">(</span> <span class="n">G</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="o">|</span><span class="n">L</span><span class="o">|</span> <span class="o">-</span> <span class="o">|</span><span class="n">E</span><span class="o">|</span> <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h6 id="in-time-2">In-time</h6>
<p>$T(n)=O(n)\newline$</p>
<h3 id="shellsort">ShellSort</h3>
<blockquote>
<p>Donald L.Shell,1959</p>
</blockquote>
<h4 id="idea-1">Idea</h4>
<p><strong>Think of the whole sequence as a matrix, with each column sorted individually</strong>$\rightarrow(w-sorting)\newline$</p>
<h4 id="step-sequence">step sequence</h4>
<p>An <strong>inverted</strong> sequence of <strong>the width of each matrix</strong></p>
<p>$set(step)={w_1=1,w_2,w_3,&hellip;w_k,&hellip;}\newline$</p>
<blockquote>
<p>diminishing increment</p>
</blockquote>
<h4 id="algorithm">Algorithm</h4>
<p>$Call-by-rank\newline$</p>
<p>$The\ width\ of\ the\ matrix\ is\ w,then\ the\ elements\ in\ the\ i^{th}\ column\ is\ a[i+kw],0\leq k &lt;\frac {n}{w}\newline$</p>
<h6 id="internal-sort-rightarrowinput-sensitive-algorithm">Internal sort $\rightarrow$Input sensitive algorithm</h6>
<p>$\rightarrow insertionsort(The\ running\ time\ depends\ on\ the\ total\ number\ of\ inversions)\newline$</p>
<h6 id="the-biggest-factor"><strong>The biggest factor</strong></h6>
<p>$\rightarrow set(step)={w_1=1,w_2,w_3,&hellip;w_k,&hellip;}\newline$</p>
<h6 id="example">Example</h6>
<p>$set(step)_{shell}={1,2,4,8,&hellip;,2^k,&hellip;}\newline$</p>
<p>worst-case: $O(n\log n)\newline$</p>
<p>best-case: $O(n)\newline$</p>
<h6 id="code-1">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">shellSort</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//0 &lt;= lo &lt; hi &lt;= size &lt;= 2^30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="cm">/*DSA*/</span> <span class="n">printf</span> <span class="p">(</span> <span class="s">&#34;</span><span class="se">\t</span><span class="s">SHELLsort [%3d, %3d)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">d</span> <span class="o">=</span> <span class="mh">0x3FFFFFFF</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">d</span><span class="p">;</span> <span class="n">d</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span> <span class="p">)</span> <span class="c1">//PS Sequence: { 1, 3, 7, 15, ..., 1073741823 }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">j</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">d</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//for each j in [lo+d, hi)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="n">T</span> <span class="n">x</span> <span class="o">=</span> <span class="n">_elem</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">         <span class="k">while</span> <span class="p">(</span> <span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">_elem</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="n">_elem</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">_elem</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">-=</span> <span class="n">d</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="n">_elem</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">//insert [j] into its subsequence
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Searching</title>
    <link>https://Jungle430.github.io/posts/searching/</link>
    <pubDate>Fri, 18 Nov 2022 14:47:32 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/searching/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="searching">Searching</h2>
<h3 id="read-map">Read Map</h3>
<h4 id="static-search-table">Static Search Table</h4>
<blockquote>
<p>Sequential Search</p>
<p>Binary Search</p>
<p>Indexing Search</p>
</blockquote>
<h4 id="binary-search-trees-dynamic-search-table">Binary Search Trees (Dynamic Search Table)</h4>
<blockquote>
<p>Binary search tree</p>
<p>AVL tree</p>
<p>B-Tree</p>
</blockquote>
<h4 id="hash-table">Hash Table</h4>
<blockquote>
<p>What is hashing</p>
<p>Hash Function</p>
<p>Collision Resolution</p>
<p>Closed Hashing</p>
<p>Open Hashing</p>
<p>Analysis of Hashing</p>
</blockquote>
<h3 id="search-table">Search Table</h3>
<h4 id="definition">Definition</h4>
<p>A set of the same type of data elements</p>
<h4 id="key">Key</h4>
<p>The value of <strong>data item</strong> in the data element. It is used to identify the data elements</p>
<blockquote>
<p>Primary Key and Second Key</p>
</blockquote>
<h4 id="searching-1">Searching</h4>
<p>Based on the search value of key find out the element whose key value is same as search value</p>
<p>It <strong>returns the position of the element</strong> located in</p>
<h4 id="operations-on-searching-table">Operations on searching table</h4>
<ol>
<li>
<p>Search a given element in the search table</p>
</li>
<li>
<p>Get attributes of a given element</p>
</li>
<li>
<p>Insert an element into the search table</p>
</li>
<li>
<p>Delete an element from the search table</p>
</li>
</ol>
<h4 id="static-search-table-1">Static Search Table</h4>
<p>Only do search on the search table</p>
<h4 id="dynamic-search-table">Dynamic Search Table</h4>
<p>Need do search and insertion and deletion on the search table</p>
<h3 id="basic-concepts">Basic concepts</h3>
<blockquote>
<p>Given: Distinct keys $k_1 , k_2 , …, k_n$ and collection T of n records of the form $((k_1 , I_1 ), (k_2 , I_2 ), …, (k_n , I_n ))\newline$</p>
<p>where $I_j$ is the information associated with key $k_j\ for\ 1 \leq j \leq n\newline$</p>
</blockquote>
<h4 id="search-problem">Search Problem</h4>
<p>For key value K, locate the record $(k_j , I_j)$ in T such that $k_j = K\newline$</p>
<h4 id="search">Search</h4>
<p>Searching is a systematic method for locating the $record(s)$ with key value $k_j = K\newline$</p>
<h4 id="successful-vs-unsuccessful">Successful vs Unsuccessful</h4>
<p>A <strong>successful</strong> search is one in which a record with key $k_j = K$ is found</p>
<p>An <strong>unsuccessful</strong> search is one in which no record with $k_j = K$ is found (and presumably no such record exists)</p>
<blockquote>
<p>We often ask how many times one key is compared with another during a search.</p>
<p>This gives us a good measure of the total amount of work that the algorithm will do</p>
</blockquote>
<h3 id="approaches-to-search">Approaches to Search</h3>
<ol>
<li>
<p>Sequential and list methods (lists, tables, arrays).</p>
</li>
<li>
<p>Tree indexing methods</p>
</li>
<li>
<p>Direct access by key value (hashing)</p>
</li>
</ol>
<div class="mermaid" id="id-1"></div>
<h3 id="static-search-table-2">Static Search Table</h3>
<h4 id="sequential-search">Sequential Search</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">auto</span> <span class="n">LIST_SIZE</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">KeyType</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">OtherType</span> <span class="n">other_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">ElemType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">ElemType</span> <span class="o">*</span><span class="n">elem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">SSTable</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="general-idea">General Idea</h5>
<p>Begin at one end of the list and scan down it until the desired key is found or the end is reached</p>
<blockquote>
<p>A successful search returns the position of the record</p>
<p>An unsuccessful search returns 0</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">S_search</span><span class="p">(</span><span class="n">SSTable</span> <span class="n">ST</span><span class="p">[],</span> <span class="n">KeyType</span> <span class="n">K</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">ST</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">key</span> <span class="o">=</span> <span class="n">K</span><span class="p">;</span><span class="cm">/*a sentinel,storage the Key Value*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span> <span class="n">ST</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">key</span> <span class="o">!=</span> <span class="n">K</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">);</span><span class="cm">/*compare backwards*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">i</span><span class="p">;</span><span class="cm">/*return the position, or 0*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="analysis">Analysis</h5>
<blockquote>
<p>To analyze the behavior of an algorithm that makes comparisons of keys</p>
<p>we shall use the count of these key comparisons as our measure of the work done</p>
</blockquote>
<h5 id="average-search-lengthasl">Average Search Length(ASL)</h5>
<p>$$
ASL=P_1C_1+P_2C_2+&hellip;+P_nC_n=\sum_{i=1}^n\newline
$$
$Where\ P_i\ is\ probability(frequency)\ of\ search\ i^{th}\ record\newline$
$and\ C_i\ is\ the\ count\ of\ key\ comparisons\ when\ search\ it\newline$</p>
]]></description>
</item>
<item>
    <title>Graph</title>
    <link>https://Jungle430.github.io/posts/graph/</link>
    <pubDate>Fri, 11 Nov 2022 19:53:36 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/graph/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="graph">Graph</h2>
<p>Definition: A graph G consists of two sets</p>
<blockquote>
<p>a finite, nonempty set of vertices V(G)</p>
<p>a finite, possible empty set of edges E(G)</p>
<p>G(V,E) represents a graph</p>
<p>The number of vertices is written $|V|(n)$, and the number of edges is written $|E|(e)$</p>
</blockquote>
<p>General graphs differ from trees</p>
<ol>
<li>need not have a root node</li>
<li>no implicit parent-child relationship</li>
<li>may be several (or no) paths from one vertex to another</li>
</ol>
<h3 id="definition">Definition</h3>
<h4 id="for-a-directed-graph">For a Directed graph</h4>
<p>$if\ u, v\ are\ two\ vertices,then\ &lt;u, v&gt; is\ an\ arc(edge), u\ is\ called\ as\ tail, v\ is\ called\ head$</p>
<p>$Example:$</p>
<p>$[u]\rightarrow[v]\ is\ called &lt;u, v&gt;, and\ [v]\rightarrow[u] is\ called &lt;v, u&gt;$</p>
<p>$$
[u]\rightarrow[v]
$$</p>
<div class="mermaid" id="id-1"></div>
<p>$$
[v]\rightarrow[u]
$$</p>
<div class="mermaid" id="id-2"></div>
<p>A directed graph is one in which each edge is a directed pair of vertices, $&lt; u,v &gt; \neq &lt; v,u &gt;$</p>
<h4 id="for-an-undirected-graph">For an undirected graph</h4>
<p>An undirected graph is one in which the pair of vertices in an edge is unordered, $（u,v）= （v,u）$
$$
(u, v)=(v, u)
$$</p>
<div class="mermaid" id="id-3"></div>
<h4 id="complete-graph">Complete graph</h4>
<p>A complete graph is a graph that has the $maximum\ number\ of\ edges$; A complete graph is a graph in which $there\ is\ an\ edge\ between\ every\ pair\ of\ vertices$.</p>
<blockquote>
<p>for a $undirected\ graph$ with $n\ vertices$, the maximum number of edges is $\frac {n(n-1)}{2}(C_n^2)$</p>
</blockquote>
<blockquote>
<p>for a $directed\ graph$ with n vertices, the maximum number of edges is $n(n-1)$</p>
</blockquote>
<h4 id="sparse-graph-and-dense-graph">Sparse Graph and Dense Graph</h4>
<p>If the edges of a graph is $e&lt;n\log n$, the graph is called <strong>Sparse Graph</strong> ,otherwise, it is called as <strong>Dense Graph</strong></p>
<h4 id="examples-for-graph">Examples for Graph</h4>
<h5 id="undirected-graph">Undirected graph</h5>
<p>$$
V(G_1)={0,1,2,3}\
and\ E(G_1)={(0,1),(0,2),(0,3),(1,2),(1,3),(2,3)}
$$</p>
<p>$$
Graph \rightarrow G_1
$$</p>
<div class="mermaid" id="id-4"></div>
<h5 id="directed-graph">Directed graph</h5>
<p>$$
V(G_2)={0,1,2}\
and\ E(G_2)={&lt;0, 1&gt;,&lt;1, 0&gt;,&lt;1, 2&gt;}
$$</p>
<p>$$
Graph\rightarrow G_2
$$</p>
<div class="mermaid" id="id-5"></div>
<h4 id="adjacent-and-incident">Adjacent and Incident</h4>
<p>If $(v_0 ,v_1 )$ is an edge in an $undirected\ graph$</p>
<blockquote>
<p>$v_0$ and $v_1$ are $adjacent$</p>
<p>The edge $(v_0 , v_1)$ is $incident$ on vertices $v_0\ and\ v_1$</p>
</blockquote>
<p>If $&lt;v_0 , v_1&gt;$ is an edge in a $directed\ graph$</p>
<blockquote>
<p>$v_0$ is $adjacent\ to$ $v_1$ , and $v_1$ is $adjacent\ from$ $v_0$ .</p>
<p>The edge $&lt;v_0 , v_1&gt;$ is $incident$ on $v_0$ and $v_1$</p>
</blockquote>
<h4 id="weighted-graphnetwork">Weighted graph(network)</h4>
<p>There is some <strong>cost</strong> or <strong>weight</strong> associated with each edge</p>
<h4 id="subgraph">Subgraph</h4>
<p>A subgraph of $G$ is a graph $G&rsquo;$ such that $V(G’)$ is a subset of $V(G)$ and $E(G’)$ is a subset of $E(G)$
$$
V(G)\supseteq V(G&rsquo;)
$$</p>
<p>$$
E(G)\supseteq E(G&rsquo;)
$$</p>
<h4 id="degree">Degree</h4>
<p>The degree of a vertex (TD: Total Degree) is the number of edges incident to that vertex</p>
<h5 id="in-degree-and-out-degreefor-a-directed-graph">In-degree and Out-degree(for a directed graph)</h5>
<p>The <strong>in-degree</strong> of a vertex v (ID) is the number of edges that have <em>v</em> as the <strong>head</strong></p>
<p>The <strong>out-degree</strong> of a vertex v (OD) is the number of edges that have <em>v</em> as the <strong>tail</strong></p>
<h5 id="conclusion">Conclusion:</h5>
<p>if $d_i$ is the degree of a vertex $i$ in a graph $G$ with $n$ vertices and $e$ edges, the number of edges is
$$
e=\frac{\sum_{i=1}^n d_i}{2}
$$</p>
<h5 id="examples-for-degree">Examples for degree</h5>
<p>directed graph:</p>
<div class="mermaid" id="id-6"></div>
<p>$$
0\rightarrow in=1\ and\ out=1
$$</p>
<p>$$
1\rightarrow in=1\ and\ out=2
$$</p>
<p>$$
2\rightarrow in=1\ and\ out=0
$$</p>
<p>Undirected graph:</p>
<div class="mermaid" id="id-7"></div>
<p>$$
0\rightarrow 2
$$</p>
<p>$$
[1,2]\rightarrow 3
$$</p>
<p>$$
[3, 4, 5, 6] \rightarrow 1
$$</p>
<h4 id="path">Path</h4>
<h5 id="definition-1">Definition</h5>
<p>$A\ path\ from\ vertex\ v_p\ to\ v_q\ in\ a\ graph\ G\ is\ a\ sequence\ of\ vertices,$</p>
<p>$\rightarrow v_p , v_{i_1} , v_{i_2} , &hellip;, v_{i_n}, v_{q}\ such\ that (v_p , v_{i_1}), (v_{i_1} ,v_{i_2} ), &hellip;, (v_{i_n}, v_q) are\ edges\ in\ a\ graph$</p>
<h5 id="length-of-a-path">Length of a path</h5>
<p>The length of a path is <strong>the number of edges</strong> on it</p>
<h5 id="simple-path">Simple path</h5>
<p>A simple path is a path in which all vertices are <strong>distinct</strong></p>
<h5 id="simple-circle">Simple Circle</h5>
<p>A simple cycle is a path in which all vertices,<strong>except the first and the last</strong>, are distinct. <strong>The first and the last vertices are the same</strong></p>
<h4 id="example-of-graph">Example of Graph</h4>
<h5 id="traffic-flow-can-be-modeled-by-a-graph">Traffic flow can be modeled by a graph</h5>
<blockquote>
<p>Each street intersection represents a vertex, each street is an edge</p>
<p>Edge costs could represent, among other things, a <strong>speed limit or capacity</strong></p>
<p>We could ask for <strong>the shortest route</strong> or use this information to find the most likely location for <strong>bottleneck</strong></p>
</blockquote>
<h3 id="adt">ADT</h3>
<p>Graph</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">Objects: a nonempty set of vertices and a set of edges
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Functions: for all graph in Graph, v, v1 and v2 in Vertices
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Graph Create(): return an empty graph
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Graph DeleteEdge(graph, v1, v2): return a graph in which the edge (v1, v2) is removed
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">......
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="graph-implementation">Graph Implementation</h3>
<h4 id="adjacency-matrix-array">Adjacency Matrix (<strong>Array</strong>)</h4>
<h5 id="definition-2">Definition</h5>
<p>The adjacency matrix of G is a two-dimensional n by n array, say $A[n] [n]$
$$
A[i][j]=\begin{cases}
1\ if\ &lt;V_i,V_j&gt; \in E\ or\ (V_i,V_j)\in E\newline
0\ otherwise
\end{cases}
$$</p>
<p>For a <strong>weighted graph</strong></p>
<p>$$
A[i][j]=\begin{cases}
W(i, j)\ when\ i\neq j\ and\ &lt;V_i,V_j&gt; \in E\ or\ (V_i,V_j)\in E\newline
\infty\ otherwise
\end{cases}
$$</p>
<h5 id="example">Example</h5>
<p>For a graph</p>
<div class="mermaid" id="id-8"></div>
<p>$$
\begin{pmatrix}
0&amp; 1&amp; 0\newline
1&amp; 0&amp; 1\newline
0&amp; 0&amp; 0
\end{pmatrix}
$$</p>
<p>For a weight graph</p>
<p>The weight of the edge from vertex i to vertex j is used instead of 1 in the adjacency matrix
$$
\begin{pmatrix}
\infty&amp; 1&amp; \infty&amp; 4\newline
\infty&amp; \infty&amp; 9&amp; 2\newline
3&amp; 5&amp; \infty&amp; 8\newline
\infty&amp; \infty&amp; 6&amp; \infty
\end{pmatrix}
$$</p>
<h5 id="notice">Notice</h5>
<p>The adjacency matrix for an <strong>undirected graph</strong> is <strong>symmetric</strong></p>
<p>The adjacency matrix for a <strong>digraph need not be symmetric</strong></p>
<h5 id="merits-of-adjacency-matrix">Merits of Adjacency Matrix</h5>
<p>From the adjacency matrix, to determine the connection of vertices is easy</p>
<p><strong>For a undirected graph, the degree of a vertex i is</strong> $\sum_{j=1}^n A[i][j]$</p>
<p>For a <strong>directed graph</strong></p>
<p>The sum of 1 in row i of the adjacency matrix is yields the out-degree of the $i^{th}$ vertex
$$
\begin{bmatrix}
a_1&amp;a_2&amp;a_3&amp;\dots&amp;a_n
\end{bmatrix}
$$
The sum of the entries in the $i^{th}$ column is its in degree
$$
\begin{bmatrix}
a_1\newline
a_2\newline
a_3\newline
\vdots\newline
a_n
\end{bmatrix}
$$</p>
<h5 id="code">Code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxVNum</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="n">XXX</span> <span class="n">VertexType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">ArcCell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*Type of vertex relationship. For unauthorized graph, use 1 or 0 to indicate adjacent no;
</span></span></span><span class="line"><span class="cl"><span class="cm">	*For weighted graphs, is the weight value
</span></span></span><span class="line"><span class="cl"><span class="cm">	*/</span>
</span></span><span class="line"><span class="cl">    <span class="n">VRType</span> <span class="n">adj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">InfoType</span> <span class="o">*</span><span class="n">Info</span><span class="p">;</span><span class="c1">//Pointer to the arc related information (may not be available)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">ArcCell</span><span class="p">,</span> <span class="n">AdjMatrix</span><span class="p">[</span><span class="n">MaxVNum</span><span class="p">][</span><span class="n">MaxVNum</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">VertexType</span> <span class="n">vexs</span><span class="p">[</span><span class="n">MaxVNum</span><span class="p">];</span> <span class="cm">/* Vertex table */</span>
</span></span><span class="line"><span class="cl">	<span class="n">AdjMatrix</span> <span class="n">arcs</span><span class="p">;</span> <span class="cm">/* The adjacency matrix, i.e. the edge table */</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">vexnum</span><span class="p">,</span> <span class="n">arcnum</span><span class="p">;</span> <span class="cm">/* The number of vertices and edges in the graph */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Mgraph</span><span class="p">;</span> <span class="cm">/* Mgraph is a graph stored in an adjacency matrix */</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Create a graph</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">CreateGraph</span> <span class="p">(</span><span class="n">Mgraph</span> <span class="o">&amp;</span><span class="n">ga</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span> <span class="o">&gt;&gt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">arcnum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">ga</span><span class="o">-&gt;</span><span class="n">vexs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="err">＝</span> <span class="n">getchar</span><span class="p">();</span> <span class="cm">/*Read into the vertex information and establish the vertex table*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">ga</span><span class="o">-&gt;</span><span class="n">arcs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="err">＝</span> <span class="err">∝</span><span class="p">;</span> <span class="cm">/*The Adjacency matrix is initialized*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">arcnum</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">v1</span> <span class="o">&gt;&gt;</span> <span class="n">v2</span> <span class="o">&gt;&gt;</span> <span class="n">w</span><span class="p">;</span> <span class="cm">/*Read in the vertices and weights of an edge*/</span>
</span></span><span class="line"><span class="cl">		<span class="n">i</span> <span class="o">=</span> <span class="n">LocateVex</span><span class="p">(</span><span class="n">ga</span><span class="p">,</span><span class="n">v1</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">j</span> <span class="o">=</span> <span class="n">LocateVex</span><span class="p">(</span><span class="n">ga</span><span class="p">,</span><span class="n">v2</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">ga</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">adj</span> <span class="err">＝</span> <span class="n">w</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">ga</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">adj</span> <span class="err">＝</span> <span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="adjacency-list">Adjacency List</h4>
<p>If a graph does not have many edges, the adjacency matrix will be sparse</p>
<blockquote>
<p>such representation is a waste of space</p>
<p>use an array of pointers to linked row-lists</p>
<p>adjacency-list representation for graphs</p>
</blockquote>
<h5 id="description-of-adjacency-list">Description of Adjacency List</h5>
<p>Each row in adjacency matrix is represented as an adjacency list</p>
<blockquote>
<p>The graph is represented by an array or vector <em>v</em>[1],<em>v</em>[2],&hellip;,<em>v</em>[n], one element for each vertex in the graph</p>
</blockquote>
<blockquote>
<p>Each <em>v</em>[i] stores the data stored in vertex i together with a linked list of the numbers of all vertices adjacent from vertex i</p>
</blockquote>
<div class="mermaid" id="id-9"></div>
<div class="mermaid" id="id-10"></div>
<h5 id="example-1">Example:</h5>
<div class="mermaid" id="id-11"></div>
<div class="mermaid" id="id-12"></div>
<h5 id="merits-and-demerits-of-adjacency-list">Merits and Demerits of Adjacency List</h5>
<p>degree of a vertex in an undirected graph – # of nodes in adjacency list</p>
<p>out-degree of a vertex in a directed graph – # of nodes in its adjacency list</p>
<p>in-degree of a vertex in a directed graph – traverse the whole data structure</p>
<h5 id="inverse-adjacency-list">Inverse adjacency list</h5>
<p>Linked table is entry edge</p>
<div class="mermaid" id="id-13"></div>
<div class="mermaid" id="id-14"></div>
<div class="mermaid" id="id-15"></div>
<h5 id="code-1">code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxVerNum</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="cm">/*Maximum verx 100*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*Adjacent table edge junction type*/</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">ArcNode</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">adjvex</span><span class="p">;</span> <span class="cm">/*Neighborhood domain*/</span>
</span></span><span class="line"><span class="cl">	<span class="n">InfoType</span> <span class="o">*</span><span class="n">Info</span><span class="p">;</span> <span class="cm">/*Domain info, for edge information*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="nc">ArcNode</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span> <span class="cm">/*Pointer domain to the next neighbor*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">ArcNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*Table header node type*/</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">Vnode</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">VertexType</span> <span class="n">vertex</span><span class="p">;</span> <span class="cm">/*Vertex Domains*/</span>
</span></span><span class="line"><span class="cl">	<span class="n">ArcNode</span> <span class="o">*</span><span class="n">firstedge</span><span class="p">;</span> <span class="cm">/*Side table head pointer*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">Vnode</span><span class="p">,</span> <span class="n">AdjList</span> <span class="p">[</span><span class="n">MaxVertexNum</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*The type of figure*/</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">AdjList</span> <span class="n">vertices</span><span class="p">;</span> <span class="cm">/*adjacency list*/</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">vexnum</span><span class="p">,</span> <span class="n">arcnum</span><span class="p">;</span> <span class="cm">/*Vertices and edges*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">ALGraph</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="traversing-graph">Traversing Graph</h3>
<p>Some applications require visiting every vertex in a graph exactly once.</p>
<p>The application may require that vertices should be visited <strong>in some special order</strong> based on graph topology</p>
<blockquote>
<p>DFS: Depth-First Search</p>
<p>BFS: Breadth-First Search</p>
</blockquote>
<h4 id="depth-first-searchdfs">Depth-First Search(DFS)</h4>
<h5 id="basic-idea">Basic idea</h5>
<ol>
<li>
<p>Start from a given vertex <em>v</em> and visit it.</p>
</li>
<li>
<p>Visit the first neighbor <em>w</em> of <em>v</em>. Then visit the first neighbor of <em>w</em> that has not already been visited, etc.</p>
</li>
<li>
<p>If a node with no unexamined neighbors, then backup to the last visited node and examine its remaining neighbors.</p>
</li>
<li>
<p>The search continues until all nodes of the graph have been examined.</p>
</li>
</ol>
<h5 id="example-2">Example</h5>
<div class="mermaid" id="id-16"></div>
<p>$$
\begin{bmatrix}
V1 &amp;V2 &amp;V4 &amp;V8 &amp;V3 &amp;V6 &amp;V7 &amp;V5
\end{bmatrix}
$$</p>
<h5 id="algorithm">Algorithm</h5>
<p>Difficulties：</p>
<ol>
<li>
<p>How to determine whether <em>v</em> has been visited?</p>
</li>
<li>
<p>How to search the neighbor of <em>v</em>？</p>
</li>
</ol>
<p>Solutions：</p>
<ol>
<li>
<p>Using an array visited[n]. When <em>i</em> <em>th</em> vertex has been visited, visited[i]=TRUE.</p>
</li>
<li>
<p>Varying by different data structure:</p>
</li>
</ol>
<blockquote>
<p>• <strong>Adjacency Matrix</strong></p>
<p>• <strong>Adjacency List</strong></p>
</blockquote>
<p>DFS uses backtracking. <strong>Recursion</strong> is a natural technique for such problems</p>
<blockquote>
<p>a <strong>stack</strong> is automatically maintained to make backtracking possible</p>
</blockquote>
<p>DFS</p>
<ol>
<li>
<p>Visit the start vertex <em>v</em>.</p>
</li>
<li>
<p>For each vertex <em>w</em> adjacent to <em>v</em> do:</p>
</li>
</ol>
<blockquote>
<p>• If <em>w</em> has not been visited, apply the Depth-First Search (DFS) algorithm with <em>w</em> as the start vertex.</p>
</blockquote>
<h5 id="code-2">Code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">auto</span> <span class="n">MAX</span><span class="p">{</span> <span class="mi">500</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span><span class="n">MAX</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DFSTraverse</span><span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">visited</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="p">[</span> <span class="n">k</span> <span class="p">])</span> 
</span></span><span class="line"><span class="cl">            <span class="n">DFS</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">VISIT</span><span class="p">(</span><span class="n">v</span><span class="p">);</span> <span class="c1">// access to the v_th vertex in graph G
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">FirstAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">v</span><span class="p">);</span> <span class="n">w</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">=</span> <span class="n">NextAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">w</span><span class="p">])</span> 
</span></span><span class="line"><span class="cl">            <span class="n">DFS</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">FirstAdjVex</span><span class="p">(</span><span class="n">ALGraph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    *returns the serial number of the first neighbor of the v th vertex in G. 
</span></span></span><span class="line"><span class="cl"><span class="cm">    *If v has no neighbors, it returns 0
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">G</span><span class="p">.</span><span class="n">vertices</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">firstarc</span> <span class="o">?</span> <span class="n">G</span><span class="p">.</span><span class="n">vertices</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">firstarc</span><span class="o">-&gt;</span><span class="nl">adjvex</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">NextAdjVex</span><span class="p">(</span><span class="n">ALGraph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">w</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    *returns the serial number of the next neighbor of the v th vertex in G relative to the vertex w.
</span></span></span><span class="line"><span class="cl"><span class="cm">    *Returns 0 if v has no next neighbor relative to the vertex w
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">	<span class="n">ArcNode</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">vetrices</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">firstarc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">adjvex</span> <span class="o">!=</span> <span class="n">w</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nextarc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">adjvex</span> <span class="o">==</span> <span class="n">w</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nextarc</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nextarc</span><span class="o">-&gt;</span><span class="n">adjvex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="algorithm-analysis">Algorithm Analysis</h5>
<p>Let G=(V,E) be a graph with <em>n</em> vertices and <em>e</em> edges</p>
<p>$Adjacency\ list:\ O(n+e)$</p>
<p>$Adjacency\ matrix:\ O(n^2)$</p>
<h4 id="bread-first-searchbfs">Bread-First Search(BFS)</h4>
<h5 id="basic-idea-1">Basic idea</h5>
<ol>
<li>
<p>Start from a given vertex <em>v</em> and visit it.</p>
</li>
<li>
<p>Visit all neighbors of <em>v</em>.</p>
</li>
<li>
<p>Then visit all neighbors of first neighbor <em>w</em> of <em>v</em>.</p>
</li>
<li>
<p>Then visit all neighbors of second neighbor <em>x</em> of <em>v</em>, etc</p>
</li>
</ol>
<h5 id="example-3">Example</h5>
<div class="mermaid" id="id-17"></div>
<p>$$
\begin{bmatrix}
V1 &amp;V2 &amp;V3 &amp;V4 &amp;V6 &amp;V7 &amp;V8 &amp;V5
\end{bmatrix}
$$</p>
<h5 id="algorithm-1">Algorithm</h5>
<blockquote>
<p>BFS visits nodes level by level</p>
</blockquote>
<p>While visiting each node on a given level</p>
<blockquote>
<p>store it</p>
<p>so that, we can return to it after completing this level</p>
<p>so that nodes adjacent from it can be visited</p>
</blockquote>
<p>Because the first node visited on a given level should be the first one to which we return, a <strong>queue</strong> is an appropriate data structure for storing the nodes</p>
<p>BFS</p>
<ol>
<li>
<p>Visit the start vertex <em>v</em>.</p>
</li>
<li>
<p>Initialize a queue to contain only the start vertex.</p>
</li>
<li>
<p>While the queue is not empty do:</p>
</li>
</ol>
<blockquote>
<p>• Remove a vertex <em>v</em> from the queue.</p>
</blockquote>
<blockquote>
<p>• For all vertices <em>w</em> adjacent to <em>v</em> do:</p>
</blockquote>
<blockquote>
<p>– If w has not been visited then</p>
<blockquote>
<p>i. Visit <em>w</em>.
ii. Add <em>w</em> to the queue.</p>
</blockquote>
</blockquote>
<h5 id="code-3">Code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">BFSTraverse</span><span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">v</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">InitQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">v</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">            <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">VISIT</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">EnQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">EmptyQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">))</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                <span class="n">DeQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span><span class="n">u</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">				<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">FirstAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span> <span class="n">w</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">=</span> <span class="n">NextAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">w</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">w</span><span class="p">])</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">visited</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">VISIT</span><span class="p">(</span><span class="n">w</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">EnQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="c1">// end while
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span> <span class="c1">// end if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="algorithm-analysis-1">Algorithm Analysis</h5>
<p>Let G=(V,E) be a graph with <em>n</em> vertices and <em>e</em> edges</p>
<p>$Adjacency\ list:\ O(n+e)$</p>
<p>$Adjacency\ matrix:\ O(n^2)$</p>
<h4 id="for-adjacency-matrix-unweighted-directed-graph-in-c">For adjacency matrix unweighted directed Graph in C++</h4>
<p>$$
A[i][j]=\begin{cases}
1\ if\ &lt;V_i,V_j&gt; \in E\ or\ (V_i,V_j)\in E\newline
0\ otherwise
\end{cases}
$$</p>
<h5 id="graph-1">Graph</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;exception&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Graph</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">*</span><span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">**</span><span class="n">matrix</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Graph</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Graph</span><span class="p">(</span><span class="n">T</span> <span class="n">data</span><span class="p">[],</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">setConnect</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">**</span><span class="n">args</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="na">[[nodiscard]]</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">&amp;</span><span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">*</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">~</span><span class="n">Graph</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Graph</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="o">:</span><span class="n">_data</span><span class="p">{</span><span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">size</span><span class="p">]{}},</span> <span class="n">_size</span><span class="p">{</span><span class="n">size</span><span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">*</span><span class="p">[</span><span class="n">_size</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">[</span><span class="n">_size</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">setConnect</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">**</span><span class="n">args</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">!=</span> <span class="n">_size</span><span class="p">)</span> <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">size</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">T</span> <span class="o">&amp;</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_data</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">*</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::~</span><span class="n">Graph</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">delete</span><span class="p">[]</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">matrix</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="dfs">DFS</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">VST</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">DFS</span><span class="p">(</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">graph</span><span class="p">,</span> <span class="n">VST</span> <span class="o">&amp;</span><span class="n">visit</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="o">*</span><span class="n">statue</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">statue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="bfs">BFS</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">VST</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BFS</span><span class="p">(</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">graph</span><span class="p">,</span> <span class="n">VST</span> <span class="o">&amp;</span><span class="n">visit</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="o">*</span><span class="n">statue</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">statue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="connectivity">Connectivity</h3>
<h4 id="definition-3">Definition</h4>
<p>Connected</p>
<blockquote>
<p>An <strong>undirected graph</strong> is <strong>connected</strong> if there is a path <strong>from every vertex to every other vertex</strong></p>
</blockquote>
<p>Strongly connected</p>
<blockquote>
<p>A <strong>directed graph</strong> with this property is called <strong>strongly connected</strong></p>
</blockquote>
<p>Weakly connected</p>
<blockquote>
<p>If <strong>a directed graph is not strongly connected</strong>, but the <strong>underlying graph</strong>(without direction to the arcs)is <strong>connected</strong>, then the graph is said to be <strong>weakly connected</strong>.</p>
</blockquote>
<h4 id="minimal-cost-spanning-trees">Minimal Cost Spanning Trees</h4>
<h5 id="spanning-trees">Spanning Trees</h5>
<h6 id="definition-4">Definition</h6>
<p>A spanning tree is any tree that consists solely of edges in G and that includes all the vertices(Contains all the vertices in the graph, but only enough n-1 edges to form a tree)</p>
<p>$$
E(G):T(tree\ edges)+N(nontree\ edges)\newline
T:set\ of\ edges\ used\ during\ search\newline
N:set\ of\ remaining\ edges\newline
$$
A spanning tree is a <strong>minimal connected subgraph</strong>, G’, of G such that <strong>V(G’)=V(G)</strong> and <strong>G’ is connected</strong></p>
<h6 id="example-4">Example</h6>
<div class="mermaid" id="id-18"></div>
<p>Possible spanning trees</p>
<div class="mermaid" id="id-19"></div>
<div class="mermaid" id="id-20"></div>
<div class="mermaid" id="id-21"></div>
<h6 id="dfs-and-bfs">DFS and BFS</h6>
<blockquote>
<p>Either DFS or BFS can be used to create a spanning tree</p>
</blockquote>
<p>When <strong>DFS</strong> is used, the resulting spanning tree is known as a <strong>depth first spanning tree</strong></p>
<p>When <strong>BFS</strong> is used, the resulting spanning tree is known as a <strong>breadth first spanning tree</strong></p>
<h6 id="nontree-edge">Nontree edge</h6>
<p>While adding a nontree edge into any spanning tree, this will create a <strong>cycle</strong></p>
<h5 id="minimal-cost-spanning-trees-1">Minimal Cost Spanning Trees</h5>
<h6 id="definition-5">Definition</h6>
<p>The <strong>cost of a spanning tree</strong> of a <strong>weighted undirected graph</strong> is the sum of the costs of the edges in the spanning tree</p>
<p>A <strong>Minimal Cost Spanning Tree (MST)</strong> is a spanning tree of <strong>least</strong> cost</p>
<h4 id="algorithm-for-minimal-cost-spanning-tree">Algorithm for Minimal Cost Spanning Tree</h4>
<blockquote>
<p>$Prim$</p>
<p>$Kruskal$</p>
</blockquote>
<h5 id="prim-algorithm">Prim algorithm</h5>
<p>Let Graph $G = {V, E}$, the minimum cost spanning tree be $T={U, T_E }$ and $U=V, T_E\subseteq E\newline$.</p>
<p>$Initially\rightarrow U={u_0 }, T_E=\empty$</p>
<p>Adding edges and vertices to T one at a time</p>
<ol>
<li>
<p><strong>Select the least cost edge</strong> $(u,v)$ that $u\in U\ and\ v\notin U$. Adding $v\ to\ U\ and\ (u,v)\ to\ T_E$</p>
</li>
<li>
<p>It continues, until n-1 edges have been selected and U=V</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">The</span> <span class="n">minimum</span> <span class="n">cost</span> <span class="n">spanning</span> <span class="n">tree</span> <span class="n">T</span> <span class="o">=</span> <span class="p">{</span><span class="n">U</span><span class="p">,</span><span class="n">TE</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">U</span> <span class="o">=</span> <span class="p">{</span><span class="n">u0</span><span class="p">};</span> 
</span></span><span class="line"><span class="cl"><span class="n">TE</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">T</span> <span class="n">contains</span> <span class="n">fewer</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">let</span> <span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="n">be</span> <span class="n">a</span> <span class="n">least</span> <span class="n">cost</span> <span class="n">edge</span> <span class="n">such</span> <span class="n">that</span> <span class="n">u</span> <span class="n">in</span> <span class="n">U</span> <span class="n">and</span> <span class="n">v</span> <span class="n">notin</span> <span class="n">U</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">there</span> <span class="n">is</span> <span class="n">no</span> <span class="n">such</span> <span class="n">edge</span> <span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">add</span> <span class="n">v</span> <span class="n">to</span> <span class="n">U</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">add</span> <span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="n">to</span> <span class="n">TE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">T</span> <span class="n">contains</span> <span class="n">fewer</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span><span class="c1">//fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">No</span> <span class="n">spanning</span> <span class="n">tree</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="kruskal-algorithm">Kruskal algorithm</h5>
<p>Build a Minimum cost Spanning Tree (MST) T by <strong>adding edges to T one at a time</strong></p>
<p>Select the edges for inclusion in T <strong>in non-decreasing order of the cost</strong></p>
<p>An edge is added to T if it <strong>does not form a cycle</strong></p>
<p>Since G is connected and has $n &gt; 0$ vertices, exactly n-1 edges will be selected</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">TE</span><span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">((</span><span class="n">T</span> <span class="n">contains</span> <span class="n">less</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">E</span> <span class="n">is</span> <span class="n">not</span> <span class="n">empty</span><span class="p">))</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">choose</span> <span class="n">a</span> <span class="n">least</span> <span class="n">cost</span> <span class="nf">edge</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">from</span> <span class="n">E</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">delete</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">from</span> <span class="n">E</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">((</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">does</span> <span class="n">not</span> <span class="n">create</span> <span class="n">a</span> <span class="n">cycle</span> <span class="n">in</span> <span class="n">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">add</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">to</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="n">discard</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">T</span> <span class="n">contains</span> <span class="n">fewer</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span><span class="c1">//fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">printf</span> <span class="p">(</span><span class="err">“</span><span class="n">No</span> <span class="n">spanning</span> <span class="n">tree</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="time-complexity-analysis">Time Complexity Analysis</h5>
<p>$Prim’s\ algorithm:O(n^2)\newline$</p>
<blockquote>
<p>Regardless of the <strong>number of edges</strong> in the graph, it is suitable to find the minimum spanning tree of <strong>dense nets</strong></p>
</blockquote>
<p>$Kruskal’s\ algorithm:O(e\log e)\ (Merge\ Sort\ for\ edges)\newline$</p>
<blockquote>
<p>Regardless of the <strong>number of vertices</strong> in the graph, it is suitable to find the minimum spanning tree of <strong>sparse nets</strong></p>
</blockquote>
<h3 id="application-of-graph">Application of Graph</h3>
<p>Application of <strong>Directed Acyclic (Acycline) Graph</strong></p>
<ol>
<li>
<p>Topological Sort</p>
</li>
<li>
<p>Critical Path</p>
</li>
</ol>
<p>Shortest-Path Algorithms</p>
<h4 id="topological-sort">Topological Sort</h4>
<h5 id="definition-6">Definition</h5>
<p>An ordering of vertices in a Directed Acyclic Graph, such that if there is a path from $v_i$ to $v_j$ , then $v_j$ appears <strong>after</strong> $v_i$ in the ordering</p>
<h5 id="example-5">Example</h5>
<p>An advanced placement course in a college training program</p>
<h5 id="activity-on-vertexaovnetwork">Activity on Vertex(AOV)—Network</h5>
<p>Vertices represent activity, and arcs represent directed graphs of priority relations between activities</p>
<h5 id="notice-1">Notice</h5>
<p>Topological ordering is <strong>not possible</strong> if <strong>there is a cycle in the graph</strong></p>
<h5 id="a-simple-algorithm">A simple algorithm</h5>
<h6 id="steps">steps</h6>
<ol>
<li>
<p>Compute the in-degree of all vertices from the adjacency information of the graph</p>
</li>
<li>
<p>Find any vertex <strong>with no incoming edges</strong></p>
</li>
<li>
<p>Print this vertex, and <strong>remove it and its edges</strong></p>
</li>
<li>
<p>Apply this strategy to the rest of the graph</p>
</li>
</ol>
<h6 id="time-complexity-analysis-1">Time Complexity Analysis</h6>
<p>$O(n^2)$</p>
<h6 id="code-4">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Topsort</span> <span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">Counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Vertex</span> <span class="n">V</span><span class="p">,</span> <span class="n">W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="p">(</span><span class="n">Counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">Counter</span> <span class="o">&lt;</span> <span class="n">NumVertex</span><span class="p">;</span> <span class="n">counter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">V</span> <span class="o">=</span> <span class="n">FindNewVertexOfInDegreeZero</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">V</span> <span class="o">==</span> <span class="n">NotAVertex</span><span class="p">)</span> <span class="p">{</span><span class="c1">//exit a circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Graph has a cycle&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">TopNum</span> <span class="p">[</span><span class="n">V</span><span class="p">]</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">;</span><span class="c1">//The order of print
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">each</span> <span class="n">W</span> <span class="n">adjacent</span> <span class="n">from</span> <span class="n">V</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">Indegree</span><span class="p">[</span><span class="n">W</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="an-improved-algorithm">An improved algorithm</h5>
<h6 id="steps-1">steps</h6>
<ol>
<li>
<p>Keep all the unassigned vertices of indegree 0 in a <strong>queue</strong>.</p>
</li>
<li>
<p>While <strong>queue</strong> is not empty</p>
<blockquote>
<p>• Remove a vertex in the <strong>queue</strong>.</p>
<p>• Decrement the indegree of all adjacent vertices.</p>
<p>• If the indegree of an adjacent vertex becomes 0, <strong>enqueue</strong> the vertex</p>
</blockquote>
</li>
<li>
<p>The topological ordering is the order in which the vertices <strong>dequeue</strong></p>
</li>
</ol>
<h6 id="time-complexity-analysis-2">Time Complexity Analysis</h6>
<p>$O(n+e)\newline$</p>
<h6 id="code-5">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Topsort</span> <span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span> <span class="n">Q</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">Counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Vertex</span> <span class="n">V</span><span class="p">,</span> <span class="n">W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Q</span> <span class="o">=</span> <span class="n">CreateQueue</span> <span class="p">(</span><span class="n">NumVertex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">MakeEmpty</span> <span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">each</span> <span class="n">vertex</span> <span class="n">V</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">Indegree</span> <span class="p">[</span><span class="n">V</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">Enqueue</span><span class="p">(</span><span class="n">V</span><span class="p">,</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">IsEmpty</span><span class="p">(</span><span class="n">Q</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">V</span> <span class="o">=</span> <span class="n">Dequeue</span><span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">TopNum</span><span class="p">[</span><span class="n">V</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">Counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//The topological ordering is the order in which the vertices dequeue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">each</span> <span class="n">W</span> <span class="n">adjacent</span> <span class="n">from</span> <span class="n">V</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">Indegree</span><span class="p">[</span><span class="n">W</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Enqueue</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">Counter</span> <span class="o">!=</span> <span class="n">NumBertex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Graph has a cycle</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="c1">//fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DisposeQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="critical-path">Critical Path</h4>
<h6 id="aoe-activity-on-edge-network">AOE (Activity on Edge) Network</h6>
<blockquote>
<p>Vertex: Represents an event or a status</p>
<p>Edge: represents an activity. An edge (v, w) means that event v must be done before w may begin</p>
<p>Weight: Duration time of an activity</p>
</blockquote>
<p>~There is only one vertex whose in-degree is 0, and only one vertex whose out-degree is 0</p>
<p>~No cycle</p>
<p>~This type of a graph could be (and frequently) used to model projects</p>
<h6 id="questions">Questions</h6>
<blockquote>
<p>What is the earliest completion time for the project?</p>
<p>$\rightarrow The\ longest\ path\newline$</p>
</blockquote>
<blockquote>
<p>Which activities can be delayed, and by how long, without affecting the minimum completion time?</p>
<p>$\rightarrow Not\ critical\ activities\newline$</p>
</blockquote>
<h6 id="elements">Elements</h6>
<p>e(i): earliest start time of $a_i\newline$</p>
<p>l(i): latest start time of $a_i$ (without affecting the minimum completion time)</p>
<p>e(i)=l(i): $a_i$ <strong>is a critical activity</strong>, all the activities on the critical path are critical activities</p>
<p>ve(j): the earliest occurring time of $v_j\newline$</p>
<p>vl(j): the latest occurring time of $v_j$ (without affecting the minimum completion time)</p>
<p>$$
V_j\stackrel{a_i}{\longrightarrow}V_k\newline
$$</p>
<p>If $a_i$ is represented by $&lt;j,k&gt;$, its duration time is $dut(&lt;j,k&gt;)\newline$</p>
<p>then $e(i) = ve(j), l(i) = vl(k) - dut(&lt;j,k&gt;)\newline$</p>
<h6 id="calculate">Calculate</h6>
<ol>
<li>
<p>$From\ ve(0)=0: ve(j) = max(ve(i) + dut(&lt;i,j&gt;))\newline$</p>
</li>
<li>
<p>$vl(n-1)=ve(n-1), from\ the\ last\ one:vl(i) = min(vl(j) - dut(&lt;i,j&gt;))\newline$</p>
</li>
</ol>
<h6 id="time-complexity-analysis-3">Time Complexity Analysis</h6>
<p>Suppose there are n events and e activities in AOE</p>
<p>$The\ Time\ Complexity\ of\ whole\ algorithm\ is\ O(n+e)\newline$</p>
<h4 id="shortest-paths-problems">Shortest Paths Problems</h4>
<p>Input: A graph with weights or costs associated with each edge</p>
<p>Output: The list of edges forming the shortest path</p>
<p>Sample problems:</p>
<blockquote>
<p>Find shortest path between two named vertices</p>
<p>Find shortest path from S to all other vertices——Single-Source Shortest Paths</p>
<p>Find shortest path between all pairs of vertices——All-Pairs Shortest Paths</p>
</blockquote>
<h5 id="dijkstra-idea">Dijkstra idea</h5>
<h6 id="step">step</h6>
<p>All vertexes are divided into 2 groups</p>
<blockquote>
<p>S : the vertexes that have found the shortest path from $V_0$ to them</p>
<p>V-S=T: The vertexes that have not calculated the distances</p>
</blockquote>
<p>Adding vertex in T to S in non-decreasing order of distances</p>
<blockquote>
<p>The distances from $V_0$ to vertexes in S is not longer than the distances from $V_0$ to any vertexes in T</p>
</blockquote>
<h6 id="algorithm-2">algorithm</h6>
<p>For G(V,E) is expressed in Adjacency Matrix</p>
<ol>
<li>
<p>Initially, $S={v_0}$; An array D[n] to store the distance and D[i] is the shortest distance from $v_0\ to\ v_i$</p>
<blockquote>
<p>If exist an edge $(v_0,v_i),D[i] =  w(v_0 ,v_i)\newline$
If there is no such edge, then D[i]= +$\infty\newline$</p>
</blockquote>
</li>
<li>
<p>Select the minimal D[j] from V-S, then vertex $v_j$ is the destination of the currently shortest path, and D[j] is the shortest distance</p>
</li>
<li>
<p>Adding $v_j$ to S,and for all vertexes $v_k\in V-S\newline$</p>
</li>
</ol>
<blockquote>
<p>$if\ D[j]+arcs[j][k]&lt;D[k]\newline then\ D[k]=D[j]+arcs[j][k]\newline$</p>
</blockquote>
<ol start="4">
<li>Repeat processing (2),(3), until all vertexes are added into S</li>
</ol>
<h6 id="code-6">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">int</span> <span class="n">PathMatrix</span><span class="p">[</span><span class="n">MAX</span><span class="p">][</span><span class="n">MAX</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">int</span> <span class="n">ShortPathTable</span><span class="p">[</span><span class="n">MAX</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">ShortestPath</span><span class="p">(</span><span class="n">MGraph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v0</span><span class="p">,</span> <span class="n">PathMatrix</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="n">ShortPathTable</span> <span class="o">&amp;</span><span class="n">D</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">v</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">final</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">Edge</span><span class="p">[</span><span class="n">v0</span><span class="p">][</span><span class="n">v</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&lt;</span> <span class="err">∞</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">D</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">final</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">min</span> <span class="o">=</span> <span class="err">∞</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">final</span><span class="p">[</span><span class="n">w</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">v</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">					<span class="n">min</span> <span class="o">=</span> <span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">final</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">final</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">G</span><span class="p">.</span><span class="n">Edge</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">+</span> <span class="n">G</span><span class="p">.</span><span class="n">Edge</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="n">P</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">				<span class="n">P</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h6 id="time-complexity-analysis-4">Time Complexity Analysis</h6>
<p>For Dijkstra’s Algorithm, the Time complexity is $O(n^2)\newline$</p>
<p>For every vertex $u, v\in V, calculate\ d(u, v)\newline$</p>
<p>Time complexity is $O(n^3)\newline$</p>
]]></description>
</item>
<item>
    <title>Dynamic Programming</title>
    <link>https://Jungle430.github.io/posts/dynamic-programming/</link>
    <pubDate>Tue, 08 Nov 2022 11:39:47 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/dynamic-programming/</guid>
    <description><![CDATA[<h1 id="something-about-dynamic-programming">Something About Dynamic Programming</h1>
<h2 id="fibonacci-by-dynamic-programming">$Fibonacci\ By\ Dynamic\ Programming$</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * In this program, we will calculate the Fibonacci by dynamic programming
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The definition of the Fibonacci: Fibonacci(n) = Fibonacci(n - 1) + Fibonacci(n - 2) (n &gt;= 2)
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Fibonacci(1) = 1 and Fibonacci(0) = 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> * we can find the program is faster than the recursion&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm"> * T(n) = O(n) and S(n) = O(1)
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">FibonacciByDynamicProgramming</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">f</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span> <span class="n">g</span><span class="p">{</span><span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">g</span> <span class="o">=</span> <span class="n">g</span> <span class="o">+</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="n">g</span> <span class="o">-</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">64</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fibonacci(&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;) = &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">FibonacciByDynamicProgramming</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="longest-common-subsequence-by-dynamic-programming">$Longest\ Common\ Subsequence\ By\ Dynamic\ Programming$</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * In this program, we will use dynamic programming to find the length
</span></span></span><span class="line"><span class="cl"><span class="cm"> * of the longest common subsequence in two arrays
</span></span></span><span class="line"><span class="cl"><span class="cm"> * T(m + n) = O(m * n) and S(m + n) = O(m * n)
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Example: array1[] = {1, 2, 3, 4, 5, 6, 7}
</span></span></span><span class="line"><span class="cl"><span class="cm"> *          array2[] = {2, 5, 6, 7}
</span></span></span><span class="line"><span class="cl"><span class="cm"> * we should make a matrix(n * m) and make the element in array1 and array2 in the top and left of the matrix
</span></span></span><span class="line"><span class="cl"><span class="cm"> * like this case:        1 2 3 4 5 6 7
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      2 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      5 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      6 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      7 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Then we will fill the matrix top line and leftest column
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The measuring of the matrix[1, x] x -&gt; [1, m]:
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The length of the longest common subsequence in array2[0] and the array1[x - 1]
</span></span></span><span class="line"><span class="cl"><span class="cm"> * and in the same way, we can easy to understand the measuring of the matrix[x, 1] x -&gt; [1, n]:
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The length of the longest common subsequence in array1[0] and the array2[x - 1]
</span></span></span><span class="line"><span class="cl"><span class="cm"> * so after fill, the matrix:
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                        1 2 3 4 5 6 7
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      2 0 1 1 1 1 1 1
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      5 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      6 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      7 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> * the base elements are ok, so we will use dynamic programming
</span></span></span><span class="line"><span class="cl"><span class="cm"> * if array1[x] == array2[y],we can know that it is form the &#34;decreasing and conquer&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm"> * so we should make matrix[y - 1, x - 1] = matrix[y - 2, x - 2] + 1
</span></span></span><span class="line"><span class="cl"><span class="cm"> * else array1[x] != array2[y],we can know that it is form the &#34;divide and conquer&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm"> * so we should make matrix[y - 1, x - 1] = max(matrix[y - 2, x - 1], matrix[y - 1, x - 2]
</span></span></span><span class="line"><span class="cl"><span class="cm"> * After the dynamic programming, the matrix:
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      1 2 3 4 5 6 7
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    2 0 1 1 1 1 1 1
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    5 0 1 1 1 2 2 2
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    6 0 1 1 1 2 3 3
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    7 0 1 1 1 2 3 4
</span></span></span><span class="line"><span class="cl"><span class="cm"> * until to matrix[n, m] we find the length of the longest common subsequence of array1 and array2
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;array&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//The algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">N1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">N2</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">LongestCommonSubsequenceByDynamicProgramming</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">N1</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">array1</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">N2</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">array2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">,</span> <span class="n">N1</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">N2</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">flag</span><span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">||</span> <span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">array2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">||</span> <span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">array1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">array1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">matrix</span><span class="p">[</span><span class="n">N2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">N1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//text code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">7</span><span class="o">&gt;</span> <span class="n">v1</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span> <span class="n">v2</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="mi">7</span><span class="o">&gt;</span> <span class="n">c1</span><span class="p">{</span><span class="sc">&#39;p&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;g&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;m&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="mi">9</span><span class="o">&gt;</span> <span class="n">c2</span><span class="p">{</span><span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;l&#39;</span><span class="p">,</span> <span class="sc">&#39;g&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;i&#39;</span><span class="p">,</span> <span class="sc">&#39;t&#39;</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">,</span> <span class="sc">&#39;m&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">LongestCommonSubsequenceByDynamicProgramming</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">LongestCommonSubsequenceByDynamicProgramming</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>String</title>
    <link>https://Jungle430.github.io/posts/string/</link>
    <pubDate>Sun, 06 Nov 2022 22:37:05 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/string/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="string">String</h2>
<h3 id="structurerightarrow-list">$Structure\rightarrow list$</h3>
<ol>
<li>linked String</li>
<li>Arrayed String</li>
</ol>
<h3 id="general-concepts-of-string">General Concepts of String</h3>
<ol>
<li>$Null\ String(\emptyset)：Nothing\ in\ the\ string, the\ length\ is\ zero.$</li>
<li>$Blank(Space)string：Only\ includes\ one\ or\ more\ blanks(spaces)in\ the\ string.$</li>
<li>$Substring: sub-sequence\ of\ one\ string.$</li>
</ol>
<h3 id="adt">ADT</h3>
<p>{</p>
<pre><code>ADT String {Data Object：D＝{ ai | ai∈CharacterSet,i=1,2,...n, n≥0 }
Data Relationship：R1＝{ &lt; ai-1, ai &gt; | ai-1, ai∈D,i=2,...,n }
Operation： ……
</code></pre>
<p>} ADT String</p>
<h3 id="operations">Operations</h3>
<p>{</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">    <span class="n">StrAssign</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="n">chars</span><span class="p">)</span> <span class="c1">//string assignment
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">chars</span> <span class="n">are</span> <span class="n">character</span> <span class="n">constant</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">assign</span> <span class="n">chars</span> <span class="n">to</span> <span class="n">T</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrCopy</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="n">S</span><span class="p">)</span> <span class="c1">//String Copy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">string</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Copy</span> <span class="n">S</span> <span class="n">string</span> <span class="n">to</span> <span class="n">T</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">DestroyString</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Destroy</span> <span class="n">S</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ClearString</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Change</span> <span class="n">S</span> <span class="n">into</span> <span class="n">Null</span> <span class="n">string</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrEmpty</span> <span class="p">(</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">If</span> <span class="n">S</span> <span class="n">is</span> <span class="n">null</span> <span class="n">string</span><span class="err">，</span><span class="k">return</span> <span class="n">TRUE</span><span class="err">，</span><span class="n">otherwise</span><span class="p">,</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrCompare</span> <span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span> <span class="c1">//String comparison
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">and</span> <span class="n">T</span> <span class="n">Strings</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">If</span> <span class="n">S</span><span class="o">&gt;</span><span class="n">T</span><span class="err">，</span><span class="n">the</span> <span class="k">return</span> <span class="n">value</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="mi">0</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">S</span><span class="o">=</span><span class="n">T</span><span class="err">，</span><span class="n">the</span> <span class="k">return</span> <span class="n">value</span> <span class="n">is</span> <span class="mi">0</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">S</span><span class="o">&lt;</span><span class="n">T</span><span class="err">，</span><span class="n">the</span> <span class="k">return</span> <span class="n">value</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">0.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrLength</span> <span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="c1">// get string length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span> <span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">The</span> <span class="n">number</span> <span class="n">of</span> <span class="n">characters</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Concat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="n">S1</span><span class="p">,</span><span class="n">S2</span><span class="p">)</span> <span class="c1">//String Concatenation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S1</span> <span class="n">and</span> <span class="n">S2</span><span class="err">。</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Concatenate</span> <span class="n">S1</span> <span class="n">and</span> <span class="n">S2</span> <span class="n">and</span> <span class="n">put</span> <span class="n">the</span> <span class="k">new</span> <span class="n">string</span> <span class="n">into</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">SubString</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">Sub</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="c1">//Get substring
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span><span class="err">，</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="n">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">len</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">-</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Return</span> <span class="n">substring</span> <span class="n">of</span> <span class="n">string</span><span class="p">,</span> <span class="n">which</span> <span class="n">from</span> <span class="n">pos</span> <span class="n">to</span> <span class="n">pos</span> <span class="o">+</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="n">position</span> <span class="n">of</span> <span class="n">S</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Index</span> <span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span> <span class="c1">//String index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span> <span class="n">and</span> <span class="n">T</span><span class="err">，</span><span class="n">T</span> <span class="n">is</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span><span class="p">,</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nl">Output</span><span class="p">:</span> <span class="n">If</span> <span class="n">the</span> <span class="n">there</span> <span class="n">is</span> <span class="n">a</span> <span class="n">substring</span> <span class="n">T</span> <span class="n">in</span> <span class="n">S</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">the</span> <span class="n">position</span> <span class="n">of</span> <span class="n">sub</span><span class="o">-</span><span class="n">string</span> <span class="n">T</span> <span class="n">occurs</span> <span class="n">first</span> <span class="n">time</span> <span class="n">after</span> <span class="n">pos</span><span class="p">,</span> <span class="n">otherwise</span> <span class="k">return</span> <span class="mf">0.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Replace</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">V</span><span class="p">)</span> <span class="c1">//String replacement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span> <span class="n">and</span> <span class="n">V</span><span class="p">,</span> <span class="n">T</span> <span class="n">is</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Replace</span> <span class="n">non</span><span class="o">-</span><span class="n">overlapped</span> <span class="n">substring</span> <span class="n">T</span> <span class="n">of</span> <span class="n">S</span> <span class="n">with</span> <span class="n">V</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrInsert</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span> <span class="n">and</span> <span class="n">T</span><span class="err">，</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="err">＋</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Insert</span> <span class="n">String</span> <span class="n">T</span> <span class="n">before</span> <span class="n">the</span> <span class="n">pos</span> <span class="n">character</span> <span class="n">of</span> <span class="n">string</span> <span class="n">S</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrDelete</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span> <span class="err">，</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">-</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Delete</span> <span class="n">a</span> <span class="n">sub</span><span class="o">-</span><span class="n">string</span> <span class="n">with</span> <span class="n">len</span> <span class="n">length</span> <span class="n">from</span> <span class="n">pos</span> <span class="n">character</span> <span class="n">in</span> <span class="n">string</span> <span class="n">S</span><span class="p">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>}</p>
<blockquote>
<p>The StrAssign,Strcopy,StrCompare,StrLength,Concat and SubString are called as Minimum Operation Set of string type.</p>
<p>That is, these operations can not be implemented with other string operations, But the other string operations can be implemented with these 6 basic string operations.</p>
</blockquote>
<h3 id="string-pattern-matching">String Pattern Matching</h3>
<h4 id="forcematch">ForceMatch</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Rank</span> <span class="nf">ForceMatch</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">n</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">-=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$n = T.length(),and\ m = P.length(), T=O(mn)$</p>
<h4 id="kmp">KMP</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">*</span><span class="nf">BuildNext</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">N</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">m</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">N</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">t</span><span class="p">])</span> <span class="o">?</span> <span class="n">N</span><span class="p">[</span><span class="o">++</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="nl">t</span> <span class="p">:</span> <span class="n">t</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="nf">KMPFirst</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="n">BuildNext</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">n</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$n = T.length(),and\ m = P.length(), T=O(m+n)$</p>
<h4 id="optimization-kmp">Optimization KMP</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">*</span><span class="nf">buildNext</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">N</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">m</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">N</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">t</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">N</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">?</span> <span class="n">N</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">:</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="nf">KMPEnd</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="n">buildNext</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">n</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="supplement">supplement</h4>
<p>for ppt use python</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">Str</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">Str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">Str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">Str</span><span class="p">[</span><span class="n">t</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">Next</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">t</span> <span class="o">=</span> <span class="n">Next</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">k</span><span class="p">:</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Next</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Next</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>in list</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">Str</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">Str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">_size</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">Str</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">Str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">Str</span><span class="p">[</span><span class="n">t</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">Next</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span> <span class="o">=</span> <span class="n">Next</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Next</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Stack and Queue</title>
    <link>https://Jungle430.github.io/posts/stack-and-queue/</link>
    <pubDate>Sun, 06 Nov 2022 22:36:10 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/stack-and-queue/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="stack-and-queue">Stack and Queue</h2>
<h3 id="stack">Stack</h3>
<p>Definition: Lists with the restriction that insertions
and deletions can be performed in only one position, namely,
the end of the list. Access the list from the top.</p>
<ol>
<li>First in, last out (FILO) lists</li>
<li>Or last in, first out (LIFO) lists.</li>
</ol>
<h4 id="basic-concepts">Basic Concepts</h4>
<blockquote>
<p>Top: the end of the list, namely, the operation end.</p>
<p>Bottom: the head of the list</p>
<p>Push: Insert an element into the end of the list.</p>
<p>Pop: Delete an element from the end of the list.</p>
</blockquote>
<p>$Bottom\rightarrow [a_1] [a_2]&hellip;&hellip;[a_{n-1}] [a_n]\leftarrow Top$</p>
<p>$Operation$</p>
<p>$[a_1] [a_2]&hellip;&hellip;[a_{n-1}] [a_n]^{\rightarrow Pop}_{\leftarrow Push}$</p>
<h4 id="adt">ADT</h4>
<p>ADT Stack {</p>
<pre><code>Data Object：D = {ai | ai∈ElementSet, (i=1,2,…,n, n≥1)}
Data Relationship：R = {＜ai-1,ai＞|ai-1,ai ∈ D, (i=2,3,…,n)}
assume an is top, a1 is bottom.
</code></pre>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">    <span class="c1">//Basic Operations:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">InitStack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="c1">//Create an empty Stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DestroyStack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="c1">//If S exists, Destroy it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ClearStack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="c1">//If S exists, make the Stack empty. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StackEmpty</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="c1">//if S is empty, return TRUE, otherwise return FALSE.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StackLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="c1">//return the length of Stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">GetTop</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="c1">// If S exists and non-empty, return the top element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span><span class="n">e</span><span class="p">)</span> <span class="c1">// Insert e as the top element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span><span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="c1">// If Stack exists and non-empty, set the top element to e, then delete the top element. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StackTraverse</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="n">visit</span><span class="p">())</span> <span class="c1">//visit all of elements in the Stack.
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>}</p>
<p>$!if\ input\ is {&hellip;a_i, &hellip; a_j, &hellip;a_k, &hellip;}, then\ the\ output\ is\ impossible {&hellip;a_k, &hellip;a_i, &hellip;a_j, &hellip;}$</p>
<h4 id="stack-mixed-wash">Stack mixed wash</h4>
<blockquote>
<p>$if\ the\ stack.size()\ is\ n,then\ the\ size\ of\ Stack\ mixed\ wash\ sp(n)\ is\ Catalan(n)=\frac{(2n)!}{(n + 1)!n!}, and\ sp(n) = \sum_{k=1}^nsp(n - k)*sp(k - 1), base:\ sp(1) = 1$</p>
</blockquote>
<h4 id="array-implementation-of-stacks">Array implementation of stacks</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">STACK_INIT_SIZE</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">STACKINCREMENT</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SElemType</span> <span class="o">*</span><span class="n">base</span><span class="p">;</span> <span class="c1">//Bottom pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SElemType</span> <span class="o">*</span><span class="n">top</span><span class="p">;</span> <span class="c1">//Top pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">stacksize</span><span class="p">;</span> <span class="c1">//max capacity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">SqStack</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Bottom Pointer base,always points to the bottom;</p>
<p>Top pointer, is on the top of the Stack.</p>
</blockquote>
<blockquote>
<p>When top=M, Stack is full，If run push, then overflow.</p>
<p>When top=base, Stack is empty，If run Pop, then underflow;</p>
</blockquote>
<p>Initialize Stack</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">InitStack</span> <span class="p">(</span><span class="n">SqStack</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="p">{</span><span class="c1">// Create an empty Stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//Allocate memory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="o">=</span><span class="p">(</span><span class="n">SElemType</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">STACK_INIT_SIZE</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SElemType</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">)</span>    
</span></span><span class="line"><span class="cl">        <span class="n">exit</span> <span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span> <span class="c1">//if allocate failed, then assignment failed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//initialize top pointer(equal to base)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span> <span class="o">=</span> <span class="n">STACK_INIT_SIZE</span><span class="p">;</span><span class="c1">//initialize stack&#39;s max capacity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Push an element into the stack:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Push</span> <span class="p">(</span><span class="n">SqStack</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">SElemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Stack Full，Extend space of the stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span> <span class="o">&gt;=</span> <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span><span class="p">.</span><span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="n">SElemType</span> <span class="o">*</span><span class="p">)</span> <span class="n">realloc</span> <span class="p">(</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">,(</span><span class="n">S</span><span class="p">.</span><span class="n">stacksize</span> <span class="o">+</span> <span class="n">STACKINCREMENT</span><span class="p">)</span> <span class="o">*</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">SElemType</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">exit</span> <span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span> <span class="c1">//Assignment failed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span> <span class="o">+</span> <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span> <span class="o">+=</span> <span class="n">STACKINCREMENT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>   
</span></span><span class="line"><span class="cl">    <span class="c1">//push the element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">*</span><span class="n">S</span><span class="p">.</span><span class="n">top</span><span class="o">++</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Pop the top of the stack</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Pop</span> <span class="p">(</span><span class="n">SqStack</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">SElemType</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="c1">// If Stack is Non-empty，let top element to e，then delete
</span></span></span><span class="line"><span class="cl"><span class="c1">// the top element, return OK, otherwise return ERROR.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">==</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">)</span>   
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="o">*--</span><span class="n">S</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="linked-list-implementation-of-stacks">Linked List implementation of stacks</h4>
<p>structure of node:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">Snode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SElemType</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Snode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Snode</span><span class="p">,</span> <span class="o">*</span><span class="n">LinkStack</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Initialize Stack</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">InitlinkStack</span><span class="p">(</span><span class="n">LinkStack</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// InitlinkStack
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>memory structure</p>
<p>$top\rightarrow [a_n]\rightarrow [a_{n-1}]\rightarrow&hellip;&hellip;\rightarrow[a_1]\rightarrow null$</p>
<p>push:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Push</span><span class="p">(</span><span class="n">LinkStack</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="n">SElemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">Snode</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Snode</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// Push;
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>pop:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Pop</span><span class="p">(</span><span class="n">LinkStack</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="n">SElemType</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">s</span><span class="p">)</span> <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// Pop;
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="application-of-stack">Application of Stack</h3>
<h4 id="balancing-symbols">Balancing Symbols</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">algorithm</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">exp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LinkedStack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">exp</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span> <span class="o">||</span> <span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">((</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;)&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">?</span> <span class="s">&#34;Success!&#34;</span> <span class="o">:</span> <span class="s">&#34;Fail!&#34;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="conversion">Conversion</h4>
<p>Example: 10-&gt;8</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">algorithm</span><span class="p">(</span><span class="kt">int</span> <span class="n">Number</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LinkedStack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Number</span> <span class="o">&amp;</span> <span class="mh">0x07</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Number</span> <span class="o">&gt;&gt;=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">Number</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="evaluate-postfix-expression">Evaluate postfix expression</h4>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">double</span> <span class="nf">evaluate</span> <span class="p">(</span> <span class="kt">char</span><span class="o">*</span> <span class="n">S</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">RPN</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//对（已剔除白空格的）表达式S求值，并转换为逆波兰式RPN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">opnd</span><span class="p">;</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">optr</span><span class="p">;</span> <span class="c1">//运算数栈、运算符栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">optr</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="sc">&#39;\0&#39;</span> <span class="p">);</span> <span class="c1">//尾哨兵&#39;\0&#39;也作为头哨兵首先入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span> <span class="o">!</span><span class="n">optr</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//在运算符栈非空之前，逐个处理表达式中各字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="k">if</span> <span class="p">(</span> <span class="n">isdigit</span> <span class="p">(</span> <span class="o">*</span><span class="n">S</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//若当前字符为操作数，则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">readNumber</span> <span class="p">(</span> <span class="n">S</span><span class="p">,</span> <span class="n">opnd</span> <span class="p">);</span> <span class="n">append</span> <span class="p">(</span> <span class="n">RPN</span><span class="p">,</span> <span class="n">opnd</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="p">);</span> <span class="c1">//读入操作数，并将其接至RPN末尾
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="p">}</span> <span class="k">else</span> <span class="c1">//若当前字符为运算符，则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">switch</span> <span class="p">(</span> <span class="n">priority</span> <span class="p">(</span> <span class="n">optr</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="o">*</span><span class="n">S</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//视其与栈顶运算符之间优先级高低分别处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>             <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span> <span class="c1">//栈顶运算符优先级更低时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">optr</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="o">*</span><span class="n">S</span> <span class="p">);</span> <span class="n">S</span><span class="o">++</span><span class="p">;</span> <span class="c1">//计算推迟，当前运算符进栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="sc">&#39;=&#39;</span><span class="o">:</span> <span class="c1">//优先级相等（当前运算符为右括号或者尾部哨兵&#39;\0&#39;）时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>               <span class="n">optr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="n">S</span><span class="o">++</span><span class="p">;</span> <span class="c1">//脱括号并接收下一个字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">             <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="c1">//栈顶运算符优先级更高时，可实施相应的计算，并将结果重新入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="kt">char</span> <span class="n">op</span> <span class="o">=</span> <span class="n">optr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="n">append</span> <span class="p">(</span> <span class="n">RPN</span><span class="p">,</span> <span class="n">op</span> <span class="p">);</span> <span class="c1">//栈顶运算符出栈并续接至RPN末尾
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span> <span class="sc">&#39;!&#39;</span> <span class="o">==</span> <span class="n">op</span> <span class="p">)</span> <span class="c1">//若属于一元运算符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="n">opnd</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="n">calcu</span> <span class="p">(</span> <span class="n">op</span><span class="p">,</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span> <span class="p">)</span> <span class="p">);</span> <span class="c1">//则取一个操作数，计算结果入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">else</span> <span class="p">{</span> <span class="c1">//对于其它（二元）运算符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="kt">double</span> <span class="n">pOpnd2</span> <span class="o">=</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">(),</span> <span class="n">pOpnd1</span> <span class="o">=</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="c1">//取出后、前操作数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="n">opnd</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="n">calcu</span> <span class="p">(</span> <span class="n">pOpnd1</span><span class="p">,</span> <span class="n">op</span><span class="p">,</span> <span class="n">pOpnd2</span> <span class="p">)</span> <span class="p">);</span> <span class="c1">//实施二元计算，结果入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">             <span class="p">}</span>
</span></span><span class="line"><span class="cl">             <span class="k">default</span> <span class="o">:</span> <span class="n">exit</span> <span class="p">(</span> <span class="o">-</span><span class="mi">1</span> <span class="p">);</span> <span class="c1">//逢语法错误，不做处理直接退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="p">}</span><span class="c1">//switch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span><span class="c1">//while
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="c1">//弹出并返回最后的计算结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="infix-to-postfix">infix to postfix</h4>
<p>Precedence:</p>
<ol>
<li>&lsquo;(&rsquo; and &lsquo;)&rsquo; have the highest precedence</li>
<li>&lsquo;*&rsquo; and &lsquo;/ &lsquo;have lower precedence than &lsquo;(&rsquo; and &lsquo;)&rsquo;</li>
<li>&lsquo;+&rsquo; and &lsquo;-&rsquo; have lower precedence than &lsquo;*&rsquo; and &lsquo;/&rsquo;</li>
</ol>
<blockquote>
<p>Converting infix expressions into postfix</p>
<p>$Infix: [A * B + C * D]$</p>
<p>$Postfix: [A B * C D * +]$</p>
</blockquote>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">algorithm</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">100</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">100</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">LinkedStack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">linkedStack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">iteration</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;F&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">iteration</span> <span class="o">+=</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">linkedStack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="n">linkedStack</span><span class="p">.</span><span class="n">top</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">                    <span class="n">iteration</span> <span class="o">+=</span> <span class="n">linkedStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">linkedStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iteration</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">linkedStack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">iteration</span> <span class="o">+=</span> <span class="n">linkedStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iteration</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="function-calls">Function Calls</h4>
<p>When a function is called</p>
<blockquote>
<p>• Local variables and status should be saved</p>
</blockquote>
<p>When the function returns</p>
<blockquote>
<p>• Saved values needs to be restored
In what order?</p>
</blockquote>
<p>Structure:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">h</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">g</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">h</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$bottom\rightarrow[main()]\rightarrow[f()]\rightarrow[g()]\rightarrow top$</p>
<p>$next:pop\ g(), push\ h()$</p>
<p>$bottom\rightarrow[main()]\rightarrow[f()]\rightarrow[h()]\rightarrow top$</p>
<h4 id="recursion">Recursion</h4>
<blockquote>
<p>Definition: Recursion simply means a function that calls itself directly or indirectly.</p>
</blockquote>
<p>Example: Find the last element of a list</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Find</span> <span class="p">(</span><span class="n">LinkList</span> <span class="n">L</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">L</span><span class="err">→</span><span class="n">next</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="n">L</span><span class="err">→</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="n">Find</span><span class="p">(</span><span class="n">L</span><span class="err">→</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The general form of a recursive algorithm</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">p</span> <span class="o">(</span><span class="n">parameters</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">stopping</span> <span class="n">condition</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">base</span> <span class="k">case</span> <span class="n">that</span> <span class="n">is</span> <span class="n">processed</span> <span class="n">without</span> <span class="n">recursion</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="nf">p</span><span class="o">(</span><span class="n">smaller</span> <span class="n">parameters</span><span class="o">);</span> <span class="c1">//recursive case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Step to make a recursive algorithm:</p>
<ol>
<li>Find the key step. Begin by asking yourself, “How can this problem be divided into parts?” or “How will the key step in the middle be done?”</li>
<li>Find a stopping rule. This stopping rule is usually the small,special case that is trivial or easy to handle without recursion.</li>
<li>Outline your algorithm. Combine the stopping rule and the key step, using an if statement to select between them.</li>
<li>Check termination. Verify that the recursion will always terminate. Be sure that your algorithm correctly handles extreme cases</li>
</ol>
<h3 id="queue">Queue</h3>
<h4 id="features">Features</h4>
<blockquote>
<p>insertions at one end</p>
<p>deletions at another end</p>
<p>FIFO (First In First Out)</p>
</blockquote>
<h4 id="operations">Operations</h4>
<p>{</p>
<pre><code>Enqueue(element):insert an element at the end of the list(rear)
Dequeue:delete the element at the start of the list (front)
IsEmpty:check whether the queue has an element or not
</code></pre>
<p>}</p>
<h4 id="implementation-of-queue">Implementation of Queue</h4>
<blockquote>
<p>Linked list implementation of queues</p>
<p>keep two pointers the front and the rear</p>
<blockquote>
<p>• Front is the head of the linked list</p>
<p>• Rear is the tail of the linked list</p>
</blockquote>
<p>Array implementation of queues</p>
<blockquote>
<p>keep positions of the front and the rear. When one reaches to the end of the Array, it starts over from the beginning</p>
<p>• Array is used as a circular array</p>
</blockquote>
<p>keep track of the size of queue</p>
</blockquote>
<p>Linked Queue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">QNode</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">QElemType</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">QNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">Qnode</span><span class="p">,</span> <span class="o">*</span><span class="n">QueuePtr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">QueuePtr</span> <span class="n">front</span><span class="p">;</span> <span class="c1">// front pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">QueuePtr</span> <span class="n">rear</span><span class="p">;</span> <span class="c1">// rear pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="n">LinkQueue</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>memory structure</p>
<p>$front\rightarrow [head]\rightarrow [X]\rightarrow [Y]^{\rightarrow null}_{\leftarrow rear}$</p>
<p>Initialization of a queue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">InitQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="p">(</span><span class="n">QueuePtr</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">QNode</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">-&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// InitQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Destroy a Queue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">DestroyQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// DestroyQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>push an element</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">EnQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">,</span> <span class="n">QelemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span> <span class="n">QueuePtr</span> <span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">QNode</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// EnQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>pop an element</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">DeQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">,</span> <span class="n">QelemType</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">){</span> 
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">==</span> <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">==</span> <span class="n">p</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// DeQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Array Queue</p>
<p>Avoid false overflow</p>
<ol>
<li>$move\ element$</li>
<li>$use\ array\ as\ a\ circle, empty\rightarrow(r - l) == 0, and\ full\rightarrow (rear + 1) % maxlength == front$</li>
</ol>
<blockquote>
<p>Enqueue</p>
<blockquote>
<p>Increment QueueSize</p>
<p>Queue [rear] = X</p>
<p>Increment rear</p>
</blockquote>
<p>Dequeue</p>
<blockquote>
<p>Decrement QueueSize</p>
<p>Increment front</p>
<p>return Queue[front-1]</p>
</blockquote>
</blockquote>
<p>Application:</p>
<blockquote>
<p>Print jobs</p>
<p>Computer networks</p>
<p>OS</p>
<p>Real-life waiting lines</p>
</blockquote>
]]></description>
</item>
<item>
    <title>List</title>
    <link>https://Jungle430.github.io/posts/list/</link>
    <pubDate>Sun, 06 Nov 2022 22:35:11 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/list/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="list">List</h2>
<h3 id="definition">Definition</h3>
<p>A list is a finite sequence of N elements</p>
<p>write as
L = (a1, a2, a3，…an)</p>
<p>The size of this list is n</p>
<p>n=0 -&gt; empty list</p>
<p>element</p>
<ol>
<li>The first element(No predecessor),called &ldquo;head&rdquo;</li>
<li>The ith element(has only one predecessor and only one successor)</li>
<li>The last element(No successor),called &ldquo;tail&rdquo;</li>
</ol>
<h3 id="adt">ADT</h3>
<p>ADT List {</p>
<pre><code>Data object：D = {ai | ai∈Elements, (i=1,2,…,n, n≥0)}

Data relationship ： R1 = { ＜ ai-1,ai ＞ |ai-1,ai ∈ D,
(i=2,3,…,n) }

Operations：
• InitList(&amp;L);
• DestroyList(&amp;L);
• ListInsert(&amp;L,i,e); 
• ListDelete(&amp;L,i,&amp;e);
……and so on
</code></pre>
<p>} ADT List</p>
<h3 id="operation">Operation</h3>
<p>{</p>
<pre><code>InitList(&amp;L):Create a empty list
DestroyList(&amp;L):Delete a list(L has been initialized)
ClearList(&amp;L):make L be an empty list(L has been initialized)

ListLength(L):return the size of elements in the list(L has been initialized)
ListEmpty(L):return if the list is an empty list(L has been initialized)

GetElem(L, i, &amp;e): 
make e equaled to the ith element in the list(L has been initialized and 1 &lt;= i &lt;= ListLength(L))
LocateElem(L, e, compare()): 
return the rank that the rank of the element is the first element which compare(element[rank], e) is true(L has been initialized),
if no element satisfy it, return 0

PriorElem(L, cur_e, &amp;pre_e): 
make the pre_e equal the predecessor of the element which is the first which equal to cur_e, or return FAIL(L has been initialized)
NextElem(L, cur_e, &amp;next_e):
make the next_e equal the successor of the element which is the first which equal to cur_e, or return FAIL(L has been initialized)

ListInsert(&amp;L, i, e): 
insert the element in the ith rank of the list(L has been initialized)
ListDelete(&amp;L, i, &amp;e):
delete the ith element in the list(L has been initialized and not be empty)

ListTraverse(&amp;L, visit()):
    for (begin, end)
        visit(list[rank]_data)
(L has been initialized)
</code></pre>
<p>}</p>
<p>Example: make $ListA \bigcup ListB$</p>
<h3 id="the-code">The code</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">union</span><span class="p">(</span><span class="n">List</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">List</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">La_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Lb_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">Lb_len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">GetElem</span><span class="p">(</span><span class="n">Lb_len</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">LocateElem</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">equal</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">ListInsert</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">++</span><span class="n">La_len</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Merge List</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">MergeList</span><span class="p">(</span><span class="n">List</span> <span class="n">La</span><span class="p">,</span> <span class="n">List</span> <span class="n">Lb</span><span class="p">,</span> <span class="n">List</span> <span class="o">&amp;</span><span class="n">Lc</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">InitList</span><span class="p">(</span><span class="n">Lc</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">La_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">La</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">Lb_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">Lb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">While</span> <span class="p">((</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">La_len</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">Lb_len</span><span class="p">)){</span> <span class="c1">//La和Lb均非空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">GetElem</span><span class="p">(</span><span class="n">La</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">ai</span><span class="p">);</span> <span class="n">GetElem</span><span class="p">(</span><span class="n">Lb</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">bj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">ai</span> <span class="o">&lt;=</span> <span class="n">bj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span> <span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">ai</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span> <span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">bj</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">La_len</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">GetElem</span><span class="p">(</span><span class="n">La</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="n">ai</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">            <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span> <span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">ai</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">Lb_len</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">GetElem</span><span class="p">(</span><span class="n">Lb</span><span class="p">,</span><span class="n">j</span><span class="o">++</span><span class="p">,</span><span class="n">bj</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">            <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span><span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">bj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>   
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c1">// MergeList
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implementation-of-lists">Implementation of Lists</h3>
<h4 id="array-implementation-of-lists">Array implementation of lists</h4>
<p>Using consecutive storage units to store elements of a list,the elements are stored in the logic order</p>
<blockquote>
<p>k&mdash;- the memory space size for one element</p>
<blockquote>
<p>The address of the (i+1)th element-&gt;Loc(ai+1) = Loc(ai) + k</p>
<p>Loc(a1)&mdash;-base address of the list</p>
<p>The address of the ith element:-&gt;Loc(ai) = Loc(a1) + (i-1)*k</p>
</blockquote>
</blockquote>
<p>$logic Element: [a_0, a_1, &hellip;, a_n]$
$Physical Element:{[locate(a_0)]\ [locate(a_1)]\ &hellip;\ [locate(a_n)]}$</p>
<p>$!!!\ Storage\ structure: random\ storage$</p>
<p>about data</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Vector</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">*</span><span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_size</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_capacity</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>supplement expend and shrink</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">expand</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_capacity</span> <span class="o">&gt;=</span> <span class="n">AUTO_INITIALIZER</span> <span class="o">&amp;&amp;</span> <span class="n">_size</span> <span class="o">&lt;</span> <span class="n">_capacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_capacity</span> <span class="o">&lt;</span> <span class="n">AUTO_INITIALIZER</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_capacity</span> <span class="o">=</span> <span class="n">AUTO_INITIALIZER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_size</span> <span class="o">&gt;=</span> <span class="n">_capacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_capacity</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">*</span><span class="n">OldData</span> <span class="o">=</span> <span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">_capacity</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">OldData</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span><span class="n">OldData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">shrink</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_capacity</span> <span class="o">&lt;</span> <span class="n">AUTO_INITIALIZER</span> <span class="o">||</span> <span class="n">_size</span> <span class="o">&gt;=</span> <span class="n">_capacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_capacity</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span> <span class="o">*</span><span class="n">OldData</span> <span class="o">=</span> <span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">_data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">_capacity</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">OldData</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">delete</span><span class="p">[]</span><span class="n">OldData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>T(n) = O(n)</p>
<p>insert</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">insert</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">Val</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">_size</span><span class="p">)</span> <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">out_of_range</span><span class="p">{</span><span class="s">&#34;The array is out of range!&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">expand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">_data</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span> <span class="c1">//Prevents data from being overwritten
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_data</span><span class="p">[</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">Val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">_size</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>!!!The number of elements moved depends on the length of the order table and the location of the inserted element.</p>
</blockquote>
<p>!!!Average:</p>
<p>$T(n) = \frac{\sum_{i=0}^n i}{n + 1} = \frac{\frac{n(n + 1)}{2}}{n + 1} = \frac {n}{2} = O(n)$</p>
<p>delete</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">remove</span><span class="p">(</span><span class="n">Rank</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">_size</span><span class="p">)</span> <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">out_of_range</span><span class="p">{</span><span class="s">&#34;out of range&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">_data</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">shrink</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>!!!The number of elements moved depends on the length of the order table and the location of the deleted element</p>
</blockquote>
<p>!!!Average:</p>
<p>$T(n) = \frac{\sum_{i = 0}^{n - 1} i}{n} = \frac{\frac{n(n - 1)}{2}}{n} = \frac{n - 1}{2} = O(n)$</p>
<h4 id="advantage">Advantage</h4>
<ol>
<li>Logic is Contiguous, and physical is Contiguous</li>
<li>Random access any element</li>
<li>The address can be calculated by base address</li>
</ol>
<h4 id="disadvantage">Disadvantage</h4>
<ol>
<li>Insertion and deletion must move lot of elements</li>
<li>Must assign memory with maximum-size</li>
<li>It is not easy to extend array size</li>
</ol>
<h4 id="linked-list-implement-of-lists">Linked list implement of lists</h4>
<ol>
<li>Connected by pointer links</li>
<li>Accessed via a pointer to the first node of the list</li>
<li>Subsequent nodes are accessed via the link-pointer
member of the current node</li>
<li>Link pointer in the last node is set to null to mark the
list’s end</li>
</ol>
<p>Use a linked list instead of an array when</p>
<ol>
<li>You have an unpredictable number of data elements</li>
<li>Your list needs to be sorted quickly</li>
</ol>
<h4 id="types-of-linked-list">Types of linked list</h4>
<ol>
<li>
<p>Singly linked list</p>
<blockquote>
<p>Only traversed in one direction</p>
</blockquote>
</li>
<li>
<p>Circular, singly linked list</p>
<blockquote>
<p>Pointer in the last node points back to the first node</p>
</blockquote>
</li>
<li>
<p>Doubly linked list</p>
<blockquote>
<p>Allows traversals both forwards and backwards</p>
</blockquote>
</li>
<li>
<p>Circular, doubly linked list</p>
<blockquote>
<p>Forward pointer of the last node points to the first node and backward pointer of the first node points to the last
node</p>
</blockquote>
</li>
</ol>
<h4 id="singly-linked-list">Singly Linked list</h4>
<blockquote>
<p>without head node</p>
</blockquote>
<p>$head(pointer) \rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow [a_n] [pointer]\rightarrow null$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow null$</p>
<blockquote>
<p>with head node</p>
</blockquote>
<p>$head(pointer)\rightarrow [head] [pointer]\rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow[a_n] [pointer]\rightarrow null$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow [head] [pointer]\rightarrow null$</p>
<p>code</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//ListNode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ListNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">ListNodePosition</span> <span class="o">=</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="n">data</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">successor</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//List without headNode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">using</span> <span class="n">Rank</span> <span class="o">=</span> <span class="kt">int</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">List</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>address data</p>
<p>code</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">T</span> <span class="o">&amp;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">Rank</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>insert node</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">insertAsSuccessor</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">Val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">{</span><span class="n">Val</span><span class="p">,</span> <span class="n">successor</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">successor</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">insertAsSuccessor</span><span class="p">(</span><span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">listNodePosition</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">listNodePosition</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">successor</span> <span class="o">=</span> <span class="n">listNodePosition</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">listNodePosition</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>delete</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//by the rank
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Delete</span><span class="p">(</span><span class="n">Rank</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">record</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">record</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">record</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="circular-singly-linked-list">Circular, singly linked list</h4>
<blockquote>
<p>A Feature of the circulated linked lists&mdash;the next pointer of the last node points to the head, so the linked list becomes a circle</p>
<p>Any node can be found from any given node</p>
</blockquote>
<p>structure</p>
<blockquote>
<p>without head node</p>
</blockquote>
<p>$head(pointer) \rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow [a_n] [pointer]\rightarrow head, tail \rightarrow [a_n]$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow head, tail\rightarrow head$</p>
<blockquote>
<p>with head node</p>
</blockquote>
<p>$head(pointer)\rightarrow [head] [pointer]\rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow[a_n] [pointer]\rightarrow [a_0]$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow [head] [pointer]\rightarrow [head]$</p>
<p>code</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Rank</span> <span class="o">=</span> <span class="kt">int</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ListCircle</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListCircle</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ListCircle</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="na">[[nodiscard]]</span> <span class="n">Rank</span> <span class="n">size</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="nf">DeleteNode</span><span class="p">(</span><span class="n">Rank</span> <span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">traverse</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">~</span><span class="n">ListCircle</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">ListCircle</span><span class="p">()</span> <span class="o">:</span><span class="n">head</span><span class="p">{</span><span class="k">new</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">{</span><span class="n">T</span><span class="p">{},</span> <span class="k">nullptr</span><span class="p">}},</span> <span class="n">_size</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">ListCircle</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">args</span><span class="p">)</span> <span class="o">:</span><span class="n">ListCircle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Rank</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">begin</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">iter</span><span class="o">-&gt;</span><span class="n">insertAsSuccessor</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">begin</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">iter</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">size</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">clear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">auto</span> <span class="n">record</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">delete</span> <span class="n">record</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::~</span><span class="n">ListCircle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">DeleteNode</span><span class="p">(</span><span class="n">Rank</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">record</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">record</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">record</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">traverse</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Empty List&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">visit</span><span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="doubly-linked-list">Doubly linked list</h4>
<blockquote>
<p>The feature of double linked lists &mdash;- There are two pointer fields in one node, one points to the predecessor, another to the successor</p>
<p>Any node in the list can be found by tracing back and forth from any given node.</p>
</blockquote>
<p>structure</p>
<p>$[a_{i-1}]^\rightarrow_\leftarrow[prior] [data] [next]^\rightarrow_\leftarrow[a_{i + 1}]$</p>
<blockquote>
<p>no empty list</p>
</blockquote>
<p>$L\rightarrow[head]\rightarrow[a_1]^\rightarrow_\leftarrow[a_2]^\rightarrow_\leftarrow&hellip;&hellip;^\rightarrow_\leftarrow[a_n]\rightarrow null\$
$head.prior\rightarrow[a_n]\$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$L\rightarrow prior = L\rightarrow next = null$</p>
<p>delete</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">remove</span> <span class="p">(</span> <span class="n">ListNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">p</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">T</span> <span class="n">e</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">p</span><span class="o">-&gt;</span><span class="n">pred</span><span class="o">-&gt;</span><span class="n">succ</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">succ</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="n">p</span><span class="o">-&gt;</span><span class="n">succ</span><span class="o">-&gt;</span><span class="n">pred</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">pred</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">delete</span> <span class="n">p</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>insert</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">ListInsert_DuL</span><span class="p">(</span><span class="n">DuLinklist</span> <span class="o">&amp;</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">ElemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DuLinklist</span> <span class="n">s</span><span class="p">,</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">GetElemP_DuL</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">i</span><span class="p">)))</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">DuLinklist</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">DuLNode</span><span class="p">))))</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">prior</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prior</span><span class="p">;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span> <span class="n">prior</span> <span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prior</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="circular-doubly-linked-list">Circular, doubly linked list</h4>
<p>structure</p>
<blockquote>
<p>without head</p>
</blockquote>
<p>$head\rightarrow prior = [a_n]\ a_n\rightarrow next = head$</p>
<blockquote>
<p>empty</p>
</blockquote>
<p>$head\rightarrow prior = head\rightarrow next = head$</p>
<p>Summary</p>
<p>Advantage</p>
<ol>
<li>store items &ldquo;sequentially&rdquo; without restrictions on location</li>
<li>insert new item without shifting</li>
<li>delete existing item without shifting</li>
<li>size can expand/contract throughout use</li>
</ol>
<p>Disadvantage</p>
<ol>
<li>overhead of links: used only internally, pure overhead</li>
<li>no longer have direct access to each element of the list. O(1)
access becomes O(n) access since we must go through first element, and then second, and then third, etc.</li>
</ol>
<h2 id="select-arrayedlist-or-linkedlist">Select ArrayedList or LinkedList?</h2>
<p>Array-Based List:</p>
<ol>
<li>Insertion and deletion are O(n).</li>
<li>Direct access are O(1).</li>
<li>Array must be allocated in advance.</li>
<li>No overhead if all array positions are full.</li>
</ol>
<p>Linked List:</p>
<ol>
<li>Insertion and deletion are O(1).</li>
<li>Direct access are O(n).</li>
<li>Space grows with number of elements.</li>
<li>Every element requires overhead.</li>
</ol>
<p>Contiguous storage is generally preferable:</p>
<ol>
<li>when the entries are individually very small;</li>
<li>when the size of the list is known when the program is written;</li>
<li>when few insertions or deletions need to be made except at the end of the list;</li>
<li>when random access is important.</li>
</ol>
<p>Linked storage proves superior</p>
<ol>
<li>when the entries are large;</li>
<li>when the size of the list is not known in advance</li>
<li>when flexibility is needed in inserting, deleting, and
rearranging the entries.</li>
</ol>
<h3 id="othercursor-implementation-of-linked-list">Other:Cursor Implementation of Linked List</h3>
<blockquote>
<p>implementation in a consecutive storage, and the next is not a pointer but a Rank to search next node</p>
</blockquote>
<ol>
<li>You still need to allocate a large space beforehand;</li>
<li>But in the linear table insert and delete operations do not need to move elements, only need to modify the cursor (pointer), so it still has the main advantages of chain storage structure;</li>
<li>A linked list described by an array is called a static linked list.</li>
</ol>
<p>Application of Linked list:</p>
<p>Example: Polynomials</p>
<p>$P(x) = a_0 + a_1x + a_2x^2 + &hellip; + a_nx^n$</p>
<blockquote>
<p>Array-based implementation:Disadvantage: for sparse polynomials
-&gt;waste memory!</p>
<p>Linked list implementation can solve the problem</p>
</blockquote>
<h3 id="about-homework">About Homework</h3>
<p>you can use Singly linked list like a stack (push and pop)</p>
]]></description>
</item>
<item>
    <title>Algorithms Analysis</title>
    <link>https://Jungle430.github.io/posts/algorithms-analysis/</link>
    <pubDate>Sun, 06 Nov 2022 22:33:52 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/algorithms-analysis/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="algorithms-analysis">Algorithms Analysis</h2>
<h2 id="algorithm">Algorithm</h2>
<p>Define: A finite, clearly specified sequence of instructions
to be followed to solve a problem.(not a program)</p>
<h3 id="five-features">Five features</h3>
<ol>
<li>Finiteness</li>
<li>Definiteness</li>
<li>Effectiveness</li>
<li>Input</li>
<li>Output</li>
</ol>
<h3 id="design-requirements">Design Requirements</h3>
<ol>
<li>Correctness</li>
<li>Readability</li>
<li>Robustness</li>
<li>High efficiency and low memory capacity</li>
</ol>
<h2 id="algorithm-analysis">Algorithm Analysis</h2>
<blockquote>
<p>Computing time and memory space are two important resources.</p>
</blockquote>
<h3 id="running-time-analysis">Running time Analysis</h3>
<blockquote>
<p>The estimation of the running time of algorithms.</p>
<p>The running times of algorithms can be changed because of the platform, the properties of the computer, etc.</p>
</blockquote>
<h3 id="time-complexity">Time complexity</h3>
<p>We use asymptotic notations($O,\Omega,\theta$)</p>
<ol>
<li>compare relative growth</li>
<li>compare only algorithms</li>
</ol>
<p>$f(n) \rightarrow Frequency\ Count$</p>
<p>$Then\ T(n) = O(f(n))$</p>
<p>$if\ T(n) = O(f(n)),then\ T(n) \leq C*f(n), C \in R$</p>
<p>Constants can be ignored!!!</p>
<p>Lower order terms are ignored!!!</p>
<p>Example</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sum</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">+=</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&#34;%d&#34;</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$f(n) = 1 + n + n + 1 = 2n + 2$</p>
<p>$T(n) = O(f(n)) = O(2n + 2) = O(n) \rightarrow Linear\ order$</p>
<p>Time complexity is related with input
Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//The function is to print all the element in array;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">N</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">printArray</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">array</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">array</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">N</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BubbleSort</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">N</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">array</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">     * The reason why we will operate &#34;i--&#34; on the loop
</span></span></span><span class="line"><span class="cl"><span class="cm">     * When a loop finished the max_element in array[0] to array[i - 1] will be in the end of the array by swap
</span></span></span><span class="line"><span class="cl"><span class="cm">     * so when we scan the array next time we needn&#39;t care  the element after array[i - 1]
</span></span></span><span class="line"><span class="cl"><span class="cm">     * so we will operate &#34;i--&#34; to greater the Algorithm effective
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">N</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">,</span> <span class="n">count</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">bool</span> <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">printArray</span><span class="p">(</span><span class="n">array</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$T(n)\ can\ be\ O(n), but\ also\ can\ O(n^2)$</p>
<h4 id="relations">Relations</h4>
<p>$O(1) &lt; O(\log n) &lt; O(n) &lt; O(n\log n) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)$</p>
<p>$if\ T1(n) = O(f(n))\ and\ T2(n) = O(g(n))\ then$</p>
<p>a) $T1(n) + T2(n) = max (O(f(n)), O(g(n)))$</p>
<p>b) $T1(n) * T2(n) = O(f(n)* g(n))$</p>
<h3 id="about-homework">About Homework</h3>
<blockquote>
<p>analysis of the running time</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">j</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">sum</span><span class="o">++;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>analysis code block</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">(</span><span class="n">j</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="n">0</span><span class="o">)</span> <span class="c1">//-&gt;step = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">j</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="c1">//-&gt;step j when j = ki
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">sum</span><span class="o">++;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$so the step = 1 + 1 + 1 + i + 1 + 1 + &hellip; + 2i + 1 + 1 + &hellip; + i * i$
$= i^2 + i(1 + 2 + 3 + &hellip; + i) = i^2 + i^3 = O(i^3)$</p>
<p>so the code became</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl">    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span></span><span class="line"><span class="cl">        <span class="n">O</span><span class="o">(</span><span class="n">i</span><span class="o">^</span><span class="n">3</span><span class="o">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$so\ T(n) = O(n^4)$</p>
<blockquote>
<p>Give an efficient algorithm to determine if there exists an &gt;integer i such that ai = i in an array of integers a1&lt; a2 &lt; &gt;a3&lt; . . . &lt; an. What is the running time of your algorithm?</p>
</blockquote>
<p>Traverse:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">traverse</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vector</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">vector</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">vector</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">i</span><span class="p">)</span> <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$T(n) = O(n)$</p>
<p>Binary Search</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">BinSearch</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">vector</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">vector</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">middle</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">vector</span><span class="p">[</span><span class="n">middle</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">middle</span> <span class="o">?</span> <span class="n">left</span> <span class="o">=</span> <span class="nl">middle</span> <span class="p">:</span> <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">vector</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">==</span> <span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$T(n) = O(\log n)$</p>
]]></description>
</item>
<item>
    <title>Introduction</title>
    <link>https://Jungle430.github.io/posts/introduction/</link>
    <pubDate>Sun, 06 Nov 2022 22:31:52 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/introduction/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="introduction">Introduction</h2>
<h2 id="data">Data</h2>
<blockquote>
<p>Define: The set of all the symbols can be processed or stored by a computer
Example: A data set in a classroom = { desk 1, desk 2,…chair 1, chair2…,stud 1, stud 2,…}</p>
</blockquote>
<h2 id="data-element">Data Element</h2>
<blockquote>
<p>Define: The term data element is an atomic unit
of data that has:</p>
<ol>
<li>An identification such as a data element name</li>
<li>A clear data element definition</li>
</ol>
<p>Example: desk i; chair j; project n…</p>
</blockquote>
<h2 id="data-item">Data item</h2>
<blockquote>
<p>Define: One smallest indivisible data units</p>
<p>!!! One data element consists of one or many data items.</p>
</blockquote>
<h2 id="data-object">Data Object</h2>
<blockquote>
<p>Define: The collection of data elements with same features.</p>
<p>Example:
Data Object 1: ={ desk 1, desk 2,…};</p>
<p>Data Object 2: ={ chair 1, chair 2,…};</p>
<p>Data Object 3: ={ stud 1, stud 2,…};</p>
</blockquote>
<p>On Data Object3, The data of a student is a set of {ID, FirstName, LastName, age}, in a list of student, the list of age = {12, 13, 12, &hellip;}, then -&gt;</p>
<blockquote>
<p>Data Element:age</p>
<p>Data item: 12</p>
</blockquote>
<h2 id="structure">Structure</h2>
<blockquote>
<p>Relationships between data elements</p>
</blockquote>
<h2 id="data-structure-1">Data Structure</h2>
<blockquote>
<p>A set of data elements with structure</p>
</blockquote>
<p>Data Structure can be defined is math</p>
<blockquote>
<p>Data Structure = (D, R)</p>
<p>D: the set of Data elements</p>
<p>R: the Relationships of the data elements</p>
</blockquote>
<p>DS is formed by two sets:</p>
<ol>
<li>Data element set</li>
<li>Relationship set</li>
</ol>
<h2 id="class-of-structure">Class of Structure</h2>
<ol>
<li>logic structure -&gt; {Set, Linear, Tree, Graph}</li>
<li>Physical structure -&gt; Such as a Linear structure use sequence structure or Linked structure ?</li>
</ol>
<h2 id="about-algorithm">About algorithm</h2>
<ol>
<li>Algorithm design depends on logical structure(Like in math)</li>
<li>Algorithm implementation depends on how to store
the DS physical structure</li>
</ol>
<h2 id="data-type">Data Type</h2>
<blockquote>
<p>Define: A data type is a collection of objects and a set of
operations that act on those objects.</p>
</blockquote>
<p>Example:int, double &hellip; and std::vector&lt;&gt;, std::map&lt;&gt; &hellip;</p>
<h2 id="abstract-data-type-adt">Abstract Data Type (ADT)</h2>
<blockquote>
<p>Define:An abstract data type(ADT) is a data type that is
organized in such a way that the specification of the
objects and the operations on the objects is separated
from the representation of the objects and the
implementation of the operations.</p>
</blockquote>
<p>Conclusion: Consider only the mathematical level, not the actual computer structure</p>
<blockquote>
<p>Mathematical definition of ADT：</p>
</blockquote>
<ol>
<li>D：Data object , the set of the data elements</li>
<li>S：the structure on the object D</li>
<li>P：Operations performed on the object</li>
</ol>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">Data Object, Data relation, Operations
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Complex</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span> <span class="c1">//Data Object
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">real</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">image</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Data relation:real part and image part in a complex
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">public</span><span class="o">:</span><span class="c1">//Operations
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Add</span><span class="p">(</span><span class="n">Complex</span> <span class="n">Other</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">GetRead</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//.....
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="kind-of-parameters">Kind of parameters</h2>
<ol>
<li>Value parameter</li>
<li>Reference parameter (in c++ is &amp;)</li>
</ol>
<h2 id="summary">Summary</h2>
<ol>
<li>DS = Data elements + Relationships of data elements</li>
<li>Data structures + Algorithms = Program</li>
<li>ADT = DS + Operations</li>
</ol>
]]></description>
</item>
<item>
    <title>Tree</title>
    <link>https://Jungle430.github.io/posts/tree/</link>
    <pubDate>Sun, 06 Nov 2022 18:28:12 &#43;0800</pubDate><author>SunYingCe@bupt.edu.cn (Jungle)</author><guid>https://Jungle430.github.io/posts/tree/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="tree">Tree</h2>
<h3 id="definition">Definition</h3>
<blockquote>
<p>One natural way to define a tree is recursively.</p>
<p>A tree is a collection of nodes. The collection can be empty;</p>
<p>otherwise, a tree consists of a distinguished node r,called root, and zero or more nonempty (sub)trees
$T_1, T_2, … T_k$, each of whose roots are connected
by a direct edge from r.</p>
</blockquote>
<div class="mermaid" id="id-1"></div>
<div class="mermaid" id="id-2"></div>
<h3 id="terminology">Terminology</h3>
<blockquote>
<p>Parent:Node A is the parent of node B, if B is the &gt;root of one subtree of A.</p>
<p>Child:Node B is the child of node A, if A is the parent of B.</p>
<p>Sibling:Nodes with the same parent are siblings</p>
<p>Leaf:A node is called a leaf if it has no children.</p>
<p>Branch Node(OR internal node):Any node of a tree that has child nodes(the number of child nodes is more than 0)</p>
<p>Ancestor:Node A is an ancestor of node B,if A is either the parent of B or is the parent of some ancestor of B.</p>
<p>Descendant:Node B is the descendant of node A, if A is an ancestor of node B.</p>
<p>Level of a Node:Level of the root of a tree is 1, and the level of any other nodes in the tree is one more than the level of its
parent</p>
<p>Depth of a Tree:The depth of a tree is the maximum level of any leaf in the tree (also called the height of a tree).</p>
<p>Degree of a node:The number of children of a node.</p>
<p>Degree of a tree:The max-degree of the node of a tree.</p>
</blockquote>
<h3 id="adt">ADT</h3>
<p>{</p>
<pre><code>ADT Tree{Data objects :{D = {ai| ai∈ElementSet, (i=1,2,…,n, n≥0)}

Relationships of Data Elements:{ Recursive Definition of a tree }

Basic Operations:
INITTREE（＆T）；
DESTROYTREE（＆T）；
……
</code></pre>
<p>} ADT Tree</p>
<h3 id="operations">Operations</h3>
<p>{</p>
<pre><code>INITTREE(＆T);
DESTROYTREE(＆T);
CREATETREE(＆T，DEFINITION);
CLEARTREE(＆T);

TREEEMPTY(T);
TREEDEPTH(T);
ROOT(T);

ASSIGN(T，CUR_E，VALUE);
PARENT(T，CUR_E);
LEFTCHILD(T，CUR_E);
RIGHTSIBLING(T，CUR_E);

INSERTCHILD(＆T，＆P，i，C)；
DELETECHILD(＆T，＆P，i)；
TRAVERSETREE(T，VISIT())；

......
</code></pre>
<p>}</p>
<p>Emphasis</p>
<p>!!!A binary tree is a tree in which no node can have more
than two children.</p>
<p>Five kinds of forms</p>
<ol>
<li>Empty binary tree</li>
<li>Binary tree with only one node</li>
<li>Binary without any right tree</li>
<li>Binary with left and right trees</li>
<li>Binary tree with no left tree</li>
</ol>
<div class="mermaid" id="id-3"></div>
<h3 id="full-binary-tree">Full Binary Tree</h3>
<p>A full binary tree of depth k is a binary tree of depth k having $2^k-1$ nodes</p>
<h3 id="complete-binary-tree">Complete Binary Tree</h3>
<p>A complete binary tree: a binary tree with n nodes and depth k is complete if its nodes correspond to the nodes numbered from 1 to n in the full binary tree of depth k</p>
<h3 id="skewed-tree">Skewed Tree</h3>
<div class="mermaid" id="id-4"></div>
<h3 id="properties-of-binary-trees">Properties of binary trees</h3>
<h4 id="maximum-number-of-nodes">Maximum number of nodes</h4>
<p>Maximum number of nodes</p>
<ol>
<li>$The\ maximum\ number\ of\ nodes\ on\ level\ i\ of\ a\ binary\ tree\ is\  2^{i-1}, i\geq 1$</li>
<li>$The\ maximum\ number\ of\ nodes\ in\ a\ binary\ tree\ of\ depth\ k\ is\  2^{k-1}, k\geq 1.(\sum^{k-1}_02^k = 2^k - 1)$</li>
</ol>
<p>Relation between number of leaf nodes and degree-2 nodes</p>
<p>For any nonempty binary tree T, if $n_0$ is the number of leaf nodes and $n_2$ is the number of nodes of degree 2,then $n_0 = n_2 + 1(n_0 = 2^{i-1}\ and\ n_2 = 2^{i - 1} - 1)$</p>
<p>!!!The height（depth）of a [complete binary tree] with n nodes is
$\lfloor\log_2n\rfloor + 1$</p>
<p>$2^{k-1}-1 &lt; n \leq 2^k – 1$</p>
<p>$2^{k-1}\leq n &lt; 2^k$</p>
<p>$k-1\leq \log_2n &lt;k$</p>
<p>$k=\lfloor\log_2n\rfloor + 1$</p>
<p>If a complete binary tree with n nodes is represented sequentially, then for any node with index i, $1 \leq i \leq n$,we have</p>
<ol>
<li>parent(i) is at $\lfloor\frac{i}{2}\rfloor$ if $i \not= 1$. If i = 1, i is the root and has no parent.</li>
<li>LeftChild(i) is at $2i$ if $2i \leq n$. If $2i &gt; n$, then i has no left child</li>
<li>RightChild(i) is at $2i+1$ if $2i+1 \leq n$. If $2i +1 &gt; n$, then i has no right child</li>
</ol>
<h3 id="array-implementation-of-stacks">Array implementation of stacks</h3>
<p>Too much memory is wasted!</p>
<h3 id="linked-implement-of-tree">Linked implement of Tree</h3>
<h4 id="linked-implement-of-binary-tree">Linked implement of Binary Tree</h4>
<div class="mermaid" id="id-5"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">BiTNode</span> <span class="p">{</span> <span class="c1">// Node structure
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">TElemType</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">BiTNode</span> <span class="o">*</span><span class="n">lchild</span><span class="p">,</span> <span class="o">*</span><span class="n">rchild</span><span class="p">;</span> <span class="c1">// left, right child pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">BiTNode</span><span class="p">,</span> <span class="o">*</span><span class="n">BiTree</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>CreateBinTree</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">CreateBiTree</span><span class="p">(</span><span class="n">BiTree</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">scanf</span><span class="p">(</span><span class="err">“</span><span class="o">%</span><span class="n">c</span><span class="err">”</span><span class="p">,</span><span class="o">&amp;</span><span class="n">ch</span><span class="p">);</span> <span class="c1">// ABDG###E##C#F##
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">ch</span> <span class="o">==</span> <span class="err">‘#’</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">T</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">T</span> <span class="o">=</span> <span class="p">(</span><span class="n">BiTNode</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">BiTNode</span><span class="p">))))</span> 
</span></span><span class="line"><span class="cl">            <span class="n">exit</span><span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">ch</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">CreateBiTree</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c1">//CreateBiTree
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="triple-linked-list">Triple Linked List</h4>
<div class="mermaid" id="id-6"></div>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">TriTNode</span> <span class="p">{</span> <span class="c1">// Node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">TElemType</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">TriTNode</span> <span class="o">*</span><span class="n">lchild</span><span class="p">,</span> <span class="o">*</span><span class="n">rchild</span><span class="p">;</span> <span class="c1">// Left &amp; Right Children
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">struct</span> <span class="nc">TriTNode</span> <span class="o">*</span><span class="n">parent</span><span class="p">;</span> <span class="c1">//Parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">TriTNode</span><span class="p">,</span> <span class="o">*</span><span class="n">TriTree</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="application-of-binary-trees-expression-trees">Application of Binary Trees: Expression Trees</h4>
<p>$(a+b * c)+((d * e+f) * g)$</p>
<div class="mermaid" id="id-7"></div>
<p>Algorithm to convert postfix expression into expression tree</p>
<p>Read the expression one symbol at a time</p>
<ol>
<li>If symbols are operands, build a single node tree and push it on the stack</li>
<li>If the symbol is an operator, then two trees, T1 and T2, are popped from the stack (T1 is popped first) and a new tree is formed whose root is the operator and whose left and right children are T2 and T1, respectively</li>
<li>And then push the pointer to the tree on the stack</li>
</ol>
<h3 id="preliminaries-traversal-strategy">Preliminaries: Traversal Strategy</h3>
<h4 id="preorder-traversal-strategy">preorder traversal strategy</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">preorderTraverse</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">visit</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">preorderTraverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">,</span> <span class="n">visit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">preorderTraverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">,</span> <span class="n">visit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//no recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">visitAlongVine</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">stack</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">visit</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">preorderTraverse</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">visitAlongVine</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">visit</span><span class="p">,</span> <span class="n">stack</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="inorder-traversal-strategy">Inorder traversal strategy</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">InorderTraverse</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">InorderTraverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">,</span> <span class="n">visit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">visit</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">InorderTraverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">,</span> <span class="n">visit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//no recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">goAlongVine</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">stack</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">InorderTraverse</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">goAlongVine</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">stack</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">visit</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="postorder-traversal-strategy">Postorder traversal strategy</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">PostorderTraverse</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PostorderTraverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">,</span> <span class="n">visit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">PostorderTraverse</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">,</span> <span class="n">visit</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">visit</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//no recursive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">gotoLeftmostLeaf</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="o">&amp;</span><span class="n">stack</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">leftChild</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">rightChild</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinaryTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">PostorderTraverse</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">leftChild</span> <span class="o">!=</span> <span class="n">root</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">rightChild</span> <span class="o">!=</span> <span class="n">root</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">gotoLeftmostLeaf</span><span class="p">(</span><span class="n">stack</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">root</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">visit</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="level-order-traversal-strategy">Level order traversal strategy</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BinTree</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">LevelTraverse</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">root</span><span class="p">,</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">queue</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">visit</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">leftChild</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">leftChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">rightChild</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">x</span><span class="o">-&gt;</span><span class="n">rightChild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="application">Application</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">CountLeaf</span> <span class="p">(</span><span class="n">BiTree</span> <span class="n">T</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">((</span><span class="o">!</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">count</span><span class="o">++</span><span class="p">;</span> <span class="c1">// Count leaf node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">CountLeaf</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">CountLeaf</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="c1">// if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">// CountLeaf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">depth</span><span class="p">(</span><span class="n">BiTree</span> <span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">dep1</span><span class="p">,</span><span class="n">dep2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">T</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">dep1</span> <span class="o">=</span> <span class="n">depth</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">dep2</span> <span class="o">=</span> <span class="n">depth</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">dep1</span> <span class="o">&gt;</span> <span class="n">dep2</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span><span class="n">dep1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="p">(</span><span class="n">dep2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="reduction-tree">Reduction tree</h4>
<p>preorder or postorder + Inorder is OK</p>
<h4 id="threaded-binary-trees">Threaded Binary Trees</h4>
<blockquote>
<p>$n\ nodes\ (Binary\ linked\ list):$</p>
</blockquote>
<p>$number\ of\ pointers=2n$</p>
<p>$one\ node\ have\ it&rsquo;s\ own\ pointer, expect\ root\ node$</p>
<p>$so\ the\ number\ of\ empty\ pointers=2n-(n-1)=n+1$</p>
<p>Definition: Threaded Binary Trees use n+1 null pointer field to store node&rsquo;s precursor and successor information</p>
<p>Example: preorder traverse:$A\ B\ C\ D\ E\ F\ G\ H\ K$
so in Threaded Binary Tree:</p>
<div class="mermaid" id="id-8"></div>
<p>implementation</p>
<p>Add &ldquo;Ltag&rdquo; and &ldquo;Rtag&rdquo; to the binary linked list as two flag fields</p>
<p>$[lchild] [Ltag] [data] [Rtag] [rchild]$</p>
<blockquote>
<p>if has LeftChild</p>
<blockquote>
<p>Ltag = 0</p>
<p>lchild = LeftChild</p>
</blockquote>
<p>else</p>
<blockquote>
<p>Ltag = 1</p>
<p>lchild = preorder</p>
</blockquote>
<p>if has RightChild</p>
<blockquote>
<p>Rtag = 0</p>
<p>rchild = RightChild</p>
</blockquote>
<p>else</p>
<blockquote>
<p>Rtag = 1</p>
<p>rchild = successor</p>
</blockquote>
</blockquote>
<p>Add a head node whose lchild points to the root of the binary tree, Ltag = 0, Rtag = 0</p>
<p>And this node is used as the precursor of the first node traversed and the successor of the last node</p>
<p>Finally, the head pointer is used to point to the node</p>
<p>empty Threaded binary tree</p>
<div class="mermaid" id="id-9"></div>
<p>A binary tree of this structure is also called a binary tree threaded list</p>
<p>A pointer to a precursor or successor is called a thread</p>
<p>A binary tree with a clue is called a threaded binary tree</p>
<p>The process of traversing a binary tree with a rule to turn it into a threaded binary tree is called threading</p>
<h4 id="look-for-successor-in-inorder-threaded-binary-trees">Look for successor in Inorder Threaded Binary Trees</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">BiThrNode</span> <span class="o">*</span><span class="nf">nextnode</span><span class="p">(</span><span class="n">BiThrNode</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">Rtag</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Find the leftmost node in the right subtree    
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">Ltag</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">next</span> <span class="o">=</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="look-for-predecessor-in-inorder-threaded-binary-trees">Look for predecessor in Inorder Threaded Binary Trees</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">BiThrNode</span> <span class="o">*</span><span class="nf">priornode</span><span class="p">(</span><span class="n">BiThrNode</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">Ltag</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Find the rightmost node of the left subtree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">pre</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">pre</span><span class="o">-&gt;</span><span class="n">Rtag</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pre</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="tree-and-forest">Tree and Forest</h3>
<blockquote>
<p>A forest is a set of $n \geq 0$ disjoint trees</p>
</blockquote>
<p>Forest</p>
<div class="mermaid" id="id-10"></div>
<p>Tree</p>
<div class="mermaid" id="id-11"></div>
<h3 id="trees-implementation">Trees Implementation</h3>
<h4 id="parent-pointer-implementation">Parent Pointer Implementation</h4>
<p>have a pointer that points the parent</p>
<blockquote>
<p>Advantage: lookup parent easily</p>
</blockquote>
<h4 id="lists-of-children">Lists of Children</h4>
<p>From1</p>
<p>$[data] [child_1] [child_2] &hellip; [child_d], d\ is\ the\ tree&rsquo;s\ degree$</p>
<p>Problem: Null pointers waste space</p>
<p>From2</p>
<p>$[data] [degree] [child_1] [child_2] &hellip; [child_{degree}], degree\ is\ the\ node&rsquo;s\ degree$</p>
<p>Problem: nodes structure is inconsistent</p>
<p>From3</p>
<div class="mermaid" id="id-12"></div>
<div class="mermaid" id="id-13"></div>
<p>From4</p>
<div class="mermaid" id="id-14"></div>
<div class="mermaid" id="id-15"></div>
<h4 id="leftmost-childright-sibling">Leftmost Child/Right Sibling</h4>
<div class="mermaid" id="id-16"></div>
<h3 id="implementation-of-leftmost-childright-sibling">Implementation of Leftmost Child/Right Sibling</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">TreeNode</span> <span class="o">*</span> <span class="n">PtrToNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">TreeNode</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">ElementType</span> <span class="n">element</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PtrToNode</span> <span class="n">FirstChild</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">PtrToNode</span> <span class="n">NextSibling</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>FirstChild pointer: arrow that points downward</p>
<p>NextSibling pointer: arrow that goes left to right</p>
</blockquote>
<p>Transform a binary tree into forest</p>
<ol>
<li>keep current root node and its left subtree as one of a tree of the forest, the right subtree as the other trees</li>
<li>Repeat step above until the right subtree in the node is empty</li>
</ol>
<h3 id="huffman-tree">Huffman Tree</h3>
<blockquote>
<p>Path Length: The length of path is the number of edges on the path</p>
</blockquote>
<p>Weighted Path Length, WPL</p>
<p>$WPL=\sum_{i=1}^kW_iL_i$</p>
<blockquote>
<p>$w_i$ is the weight of the i-th leaf</p>
<p>$L_i$ is the path length from root to the i-th leaf</p>
</blockquote>
<p>Definition:
Huffman Tree: the binary tree with the minimum weighted Path Length</p>
<h4 id="prefix-code">Prefix code</h4>
<p>No codeword is a prefix of any other codeword</p>
<h4 id="huffmans-algorithm">Huffman’s Algorithm</h4>
<p>Build tree bottom-up, so that the lowest weight leaves are    farthest from the root</p>
<p>Repeatedly:</p>
<ol>
<li>Find two trees of the lowest weight</li>
<li>Merge them to form a new tree whose weight is the sum of their weights</li>
</ol>
<h4 id="determinant-tree">Determinant Tree</h4>
<p>Reduce the number of decisions according to the frequency of the condition</p>
<blockquote>
<p>The number of nodes in the binary tree with degree 0 minus one equals the number of nodes with degree 2</p>
</blockquote>
]]></description>
</item>
</channel>
</rss>
