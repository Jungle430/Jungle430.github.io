<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/posts/</link>
        <description>所有文章 | Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1239946358@qq.com (Jungle)</managingEditor>
            <webMaster>1239946358@qq.com (Jungle)</webMaster><lastBuildDate>Thu, 12 Jan 2023 21:02:20 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Computer Organization and Architecture Computer Evolution and Performance</title>
    <link>https://Jungle430.github.io/posts/computer-organization-and-architecture/computer-organization-and-architecture-computer-evolution-and-performance/</link>
    <pubDate>Thu, 12 Jan 2023 21:02:20 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/computer-organization-and-architecture/computer-organization-and-architecture-computer-evolution-and-performance/</guid>
    <description><![CDATA[<h1 id="computer-organization-and-architecture">Computer Organization and Architecture</h1>
<h2 id="computer-evolution-and-performance">Computer Evolution and Performance</h2>
<h3 id="outline">Outline</h3>
<ul>
<li>
<p>A Brief History of Computers</p>
</li>
<li>
<p>Designing for Performance</p>
</li>
<li>
<p>Performance Assessment</p>
</li>
<li>
<p><code>Intel x86</code> and <code>ARM</code> processor families</p>
</li>
<li>
<p>Computer Types</p>
</li>
</ul>
<h3 id="a-brief-history-of-computers">A Brief History of Computers</h3>
<h4 id="eniac--the-first-computer"><code>ENIAC</code> – the first computer</h4>
<ul>
<li>
<p><code>ENIAC</code>，<strong>Electronic Numerical Integrator And Computer</strong></p>
</li>
<li>
<p>For war purposes, to compute the ballistic trajectory</p>
</li>
<li>
<p>Started in 1943, finished in 1946 (too late for war purpose)</p>
</li>
<li>
<p>In university of Pennsylvania，By Professor <code>John Mauchly</code> and his student <code>John P Eckert</code>，Use Vacuum Tubes</p>
</li>
<li>
<p>Weighted 30 tons, consumes $140kw$ of electric power, 1500 square feet of space, only 5000 addition per second</p>
</li>
<li>
<p><strong>As milestone of science development</strong>, used until 1995</p>
</li>
</ul>
<h5 id="detail-of-eniac">Detail of <code>ENIAC</code></h5>
<ul>
<li>
<p><strong>Decimal，not binary</strong></p>
</li>
<li>
<p>10 vacuum tubes represent each digit, <strong>at any time only one vacuum tube was in the ON state</strong></p>
</li>
<li>
<p>20 accumulators of 10-digit decimal number</p>
</li>
<li>
<p>5000 additions per second</p>
</li>
<li>
<p><strong>Programmed manually by switches</strong></p>
</li>
<li>
<p><strong>No microprocessors</strong></p>
</li>
<li>
<p><strong>No memory</strong></p>
</li>
<li>
<p><strong>Changing the program could take days!</strong></p>
</li>
</ul>
<h5 id="main-shortcoming-of-eniac">Main shortcoming of <code>ENIAC</code></h5>
<ul>
<li>
<p>No memory</p>
</li>
<li>
<p>The task of entering and altering programs was extremely tedious</p>
</li>
</ul>
<h4 id="how-to-overcome-this-problem">How to overcome this problem?</h4>
<ul>
<li>
<p>The <strong>stored-program concept</strong> had been proposed</p>
<ul>
<li>
<p><code>John von Neumann</code> $\rightarrow$ <code>“father of compute” and &quot;father of game theory&quot;,Completed &quot;computer and brain&quot; and &quot;self breeding automata theory&quot;, is the embryonic form of &quot;artificial intelligence&quot; field</code></p>
</li>
<li>
<p><code>Alan Turing</code> $\rightarrow$ <code>“father of artificial intelligence” &amp; &quot;annual Turing prize&quot;</code></p>
</li>
<li>
<p>First publication of the idea was in 1945 proposal by <code>von Neumann</code> for <code>EDVAC</code>（Electronic Discrete Variable Automatic Computer)</p>
</li>
</ul>
</li>
<li>
<p>Our current computer is still called the <code>von Neumann machine</code></p>
</li>
</ul>
<h4 id="characteristics-of-stored-program-concept">Characteristics of Stored Program concept</h4>
<ul>
<li>
<p><strong>A main memory, which stores both data and instructions</strong></p>
</li>
<li>
<p><strong>Binary numbers for both data and instructions</strong></p>
</li>
<li>
<p><strong>An arithmetic-logic unit performs the basic operations</strong></p>
</li>
<li>
<p><strong>The data and instructions are stored in the memory, selected by addresses</strong></p>
</li>
<li>
<p><strong>The proper sequencing of the operation is controlled by a control unit</strong></p>
</li>
</ul>
<h4 id="the-von-neumann-machine">The <code>von Neumann Machine</code></h4>
<ul>
<li>
<p><code>IAS</code>（Institute of Advanced Studies）,started in 1946</p>
</li>
<li>
<p><strong>5 functional units</strong></p>
<ul>
<li><strong>ALU, memory, control unit, input devices, output devices</strong></li>
</ul>
</li>
<li>
<p>NOT Completed until 1952</p>
</li>
<li>
<p><strong>Until now, most computers are still structured based on this concept</strong></p>
</li>
<li>
<p>$CPU(Central\ Processing\ Unit)=ALU(Arithmetic-Logic\ Unit)+CU(Program\ Control\ Unit)\newline$</p>
</li>
<li>
<p>There are connections between main memory and ALU and CU. Through the connection with CU, it receives the control signal from CU and transmits the data to ALU</p>
</li>
<li>
<p>IO device for data input and output</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter2-1.png" title="/img/Computer Organization and Architecture/chapter2-1.png" data-thumbnail="/img/Computer Organization and Architecture/chapter2-1.png" data-sub-html="<h2>Organization(Von Neumann Machine)</h2>">
        
    </a><figcaption class="image-caption">Organization(<code>Von Neumann Machine</code>)</figcaption>
    </figure>
<h5 id="details-of-ias">Details of <code>IAS</code></h5>
<ul>
<li>
<p><code>IAS</code>: Institute for Advanced Studies, Princeton</p>
</li>
<li>
<p><strong>Memory</strong>: $1000 \times 40\ bit\ words$ in binary number</p>
<ul>
<li><strong>Both data and instructions are stored there</strong></li>
</ul>
</li>
<li>
<p>Each number is represented by <strong>a sign bit and a 39-bit value</strong></p>
</li>
</ul>
<hr>
<ul>
<li>
<p>A word may also contain two 20-bit instructions</p>
<ul>
<li>
<p>an 8-bit operation code</p>
</li>
<li>
<p>a 12-bit address</p>
</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter2-2.png" title="/img/Computer Organization and Architecture/chapter2-2.png" data-thumbnail="/img/Computer Organization and Architecture/chapter2-2.png" data-sub-html="<h2>instructions</h2>">
        
    </a><figcaption class="image-caption"><code>instructions</code></figcaption>
    </figure>
<h5 id="registers-of-ias">Registers of <code>IAS</code></h5>
<p><strong>Several registers are set inside the CPU to temporarily save data</strong></p>
<ul>
<li>Memory Buffer Register</li>
<li>Memory Address Register</li>
<li>Instruction Register</li>
<li>Instruction Buffer Register</li>
<li>Program Counter</li>
<li>Accumulator</li>
<li>Multiplier Quotient</li>
</ul>
<h5 id="ias-control-unit"><code>IAS</code> control unit</h5>
<ul>
<li>The control unit operates the <code>IAS</code> by fetching instructions from memory and executing them one at a time</li>
</ul>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter2-3.png" title="/img/Computer Organization and Architecture/chapter2-3.png" data-thumbnail="/img/Computer Organization and Architecture/chapter2-3.png" data-sub-html="<h2>IAS(Control unit)</h2>">
        
    </a><figcaption class="image-caption">IAS(<code>Control unit</code>)</figcaption>
    </figure>
<h5 id="fetch-cycle">Fetch cycle</h5>
<ul>
<li>
<p><strong>If <code>IBR</code> is not empty, directly execute the instruction</strong></p>
</li>
<li>
<p><strong>If <code>IBR</code> is empty, first fetch instruction, then execute instruction</strong></p>
</li>
</ul>
<h5 id="execute-cycle">Execute cycle</h5>
<ul>
<li>
<p>Instruction enters the control circuit to control the execution of the command</p>
</li>
<li>
<p><strong>Address in <code>MAR</code> represents the address of the operand</strong></p>
</li>
</ul>
<h5 id="instruction-types"><strong>Instruction types</strong></h5>
<ul>
<li>
<p>Data transfer</p>
<ul>
<li>
<p>Memory – ALU registers</p>
</li>
<li>
<p>Register – Register</p>
</li>
</ul>
</li>
<li>
<p>Unconditional branch</p>
</li>
<li>
<p>Conditional branch</p>
</li>
<li>
<p>Arithmetic</p>
</li>
<li>
<p>Address modify</p>
</li>
</ul>
<h4 id="development-of-computer">Development of computer</h4>
<ul>
<li>
<p>Von Neumann machine : initial stage of computer</p>
</li>
<li>
<p>Computer architecture they proposed laid a solid foundation for the development of computers in the future</p>
</li>
<li>
<p>Original computers most for special purposes</p>
</li>
<li>
<p>With the development of technology, computers have gradually turned from special purpose to commercial use</p>
</li>
</ul>
<h4 id="commercial-computers">Commercial Computers</h4>
<ul>
<li>
<p><code>Eckert-Mauchly</code> Computer Corporation利计算机公司</p>
<ul>
<li>
<p><code>Mauchly </code>and his student <code>Eckert</code> built the first computer <code>ENIAC</code></p>
</li>
<li>
<p>In 1947,<code>Eckert</code> and <code>Mauchly</code> formed the corporation</p>
</li>
<li>
<p>UNIVAC I: first commercial computer</p>
</li>
<li>
<p>UNIVAC II: <strong>backward compatible</strong></p>
</li>
<li>
<p>As a department of Sperry-Rand Corporation</p>
</li>
</ul>
</li>
</ul>
<h4 id="ibm">IBM</h4>
<ul>
<li>
<p>The major manufacturer of punched-card processing equipment then</p>
</li>
<li>
<p>1953 - the 701</p>
<ul>
<li>
<p>IBM’s first stored program computer</p>
</li>
<li>
<p>Scientific calculations</p>
</li>
</ul>
</li>
<li>
<p>1955 - the 702</p>
<ul>
<li>Business applications</li>
</ul>
</li>
<li>
<p>Lead to 700/7000 series</p>
</li>
<li>
<p><strong>Made IBM the dominant computer manufacturer</strong></p>
</li>
</ul>
<h4 id="summary-of-first-generation">Summary of first generation</h4>
<ul>
<li>
<p><strong>Use electronic tubes as the main components</strong></p>
<ul>
<li>
<p>Electronic tube is composed of wire, metal sheet, glass shell and vacuum tube</p>
</li>
<li>
<p>Large in volume, hot and expensive</p>
</li>
<li>
<p>Restrict the development of computer. use.</p>
</li>
</ul>
</li>
</ul>
<h4 id="second-generation--transistors">Second generation : transistors</h4>
<ul>
<li>
<p>Replaced <strong>vacuum tubes</strong></p>
<ul>
<li>
<p>Invented 1947 at Bell Labs</p>
</li>
<li>
<p>Smaller</p>
</li>
<li>
<p>Cheaper</p>
</li>
<li>
<p>Less heat dissipation</p>
</li>
<li>
<p>Made from <strong>Silicon</strong></p>
</li>
</ul>
</li>
<li>
<p>This results</p>
<ul>
<li>
<p>More complex arithmetic, logic units, control units</p>
</li>
<li>
<p>More powerful, more complex control</p>
</li>
<li>
<p>High-level language, system software</p>
</li>
</ul>
</li>
<li>
<p><strong>Transistors are the hallmark of the second generation of computers</strong></p>
</li>
</ul>
<p><strong>Transistor based computer</strong>(history)</p>
<ul>
<li>
<p>Second generation machines</p>
</li>
<li>
<p>NCR &amp; RCA produced small transistor machines (front-runner of this field, RCA is more successful)</p>
</li>
<li>
<p>IBM 7000 series</p>
<ul>
<li>
<p>1960: 7090</p>
</li>
<li>
<p><strong>1964: 7094，the lase member of the 7000 series</strong></p>
<ul>
<li>
<p><strong>Data Channel</strong></p>
</li>
<li>
<p><strong>Multiplexer</strong></p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>DEC（Digital Equipment Corporation,Alpha chip）- 1957</p>
</li>
<li>
<p>Produced PDP-1</p>
</li>
</ul>
<p><strong>Example of transistor board</strong>(history)</p>
<ul>
<li>
<p><strong>Philco 212 Transistor Boards, 1962</strong></p>
<ul>
<li>
<p>Electronic components are manually welded to the circuit board to form a complex circuit board</p>
</li>
<li>
<p>Heavy workload</p>
</li>
<li>
<p>Easy to fail</p>
</li>
</ul>
</li>
</ul>
<h5 id="ibm-7094"><strong>IBM 7094</strong></h5>
<ul>
<li>
<p>IBM 7094 is a representative of the second generation</p>
<ul>
<li>
<p><strong>It is a central-switched architecture</strong></p>
</li>
<li>
<p><strong>It uses data channels and multiplexor</strong></p>
<ul>
<li>
<p><strong>A data channel is an independent I/O module with its own processor and its own instruction set</strong></p>
</li>
<li>
<p><strong>Multiplexor is the central termination point for data channels, the CPU, and memory</strong></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>Configuration of 7094</strong></p>
<ul>
<li>
<p><strong>Total 4 data channels</strong> are connected to multiple devices, including disks, tapes, printers, etc</p>
</li>
<li>
<p><strong>Four channels, CPU and memory are connected to the multiplexer for scheduling and independent accessfail</strong></p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter2-4.png" title="/img/Computer Organization and Architecture/chapter2-4.png" data-thumbnail="/img/Computer Organization and Architecture/chapter2-4.png" data-sub-html="<h2>Configuration of 7094</h2>">
        
    </a><figcaption class="image-caption"><code>Configuration of 7094</code></figcaption>
    </figure>
<h4 id="shortcoming-of-transistor-and-development">Shortcoming of transistor and development</h4>
<ul>
<li>
<p>Shortcoming of transistor</p>
<ul>
<li>
<p>Discrete components were manufactured separately</p>
</li>
<li>
<p>The entire manufacturing process, from transistor to circuit board, was expensive and cumbersome</p>
</li>
<li>
<p>More than 10000 transistor in computer</p>
</li>
</ul>
</li>
<li>
<p>Development: <strong>Microelectronics</strong></p>
<ul>
<li>
<p>The invention of the integrated circuit in 1958</p>
</li>
<li>
<p>The third generation of computers</p>
</li>
</ul>
</li>
</ul>
<h4 id="microelectronics">Microelectronics</h4>
<ul>
<li>
<p>Two elements <strong>(gates and memory cells)</strong> are necessary for the main functions of computer&ndash;storage, movement, processing, and control</p>
</li>
<li>
<p>From the view of microelectronics , a computer consists of</p>
<ul>
<li>
<p><strong>Gates: processing</strong></p>
</li>
<li>
<p><strong>memory cells : storage</strong></p>
</li>
<li>
<p><strong>interconnections among these elements: movement and control</strong></p>
</li>
</ul>
</li>
<li>
<p>Transistors, resistors, and conductors can be made by semiconductor</p>
</li>
<li>
<p>The whole circuit is mounted on a very small silicon chip instead of an equivalent circuit made of discrete components</p>
</li>
<li>
<p>A silicon wafer is divided into several chips, each chip contains exactly the same circuit</p>
</li>
<li>
<p>After cutting, packaging and adding pins, it becomes a chip</p>
</li>
</ul>
<h4 id="moores-law">Moore’s Law</h4>
<p><strong>Pronounced in 1965 by Gordon Moore- cofounder of Intel</strong></p>
<blockquote>
<p>The number of transistors on a semiconductor chip doubles approximately every 18 month(or increases ten-fold approximately every 5 years) $\rightarrow Moore&rsquo;s\ Law\newline$</p>
</blockquote>
<p>$N=a \times 10^{\frac{1}{5} \times t}\newline$</p>
<blockquote>
<p>Microprocessors get smaller,more compact and faster and faster!</p>
</blockquote>
<hr>
<p>Some facts revealed by <code>Moore‘s Law</code></p>
<ul>
<li>
<p>Cost of a chip has remained almost unchanged: the cost of computer has fallen</p>
</li>
<li>
<p>Higher packing density means shorter electrical paths, giving higher speed</p>
</li>
<li>
<p>Smaller size making it more convenient to place in a variety of environments</p>
</li>
<li>
<p>Reduced power and cooling requirements</p>
</li>
<li>
<p>Fewer interconnections increases reliability</p>
</li>
</ul>
<h4 id="the-computer-family-concept">The computer family concept</h4>
<ul>
<li>
<p>The <strong>characteristics</strong> of a computer family are</p>
<ul>
<li>
<p><strong>Similar or identical instruction set</strong></p>
</li>
<li>
<p><strong>Similar or identical operating system</strong></p>
</li>
<li>
<p>Increasing speed</p>
</li>
<li>
<p>Increasing number of I/O ports</p>
</li>
<li>
<p>Increasing memory size</p>
</li>
<li>
<p>Increasing cost</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>IBM System/360</strong></p>
<ul>
<li>
<p>By 1964, IBM announced System/360 family, this was the industry‘s first planned family of computers.</p>
<ul>
<li>
<p>The family covered a wide range of performance and cost</p>
</li>
<li>
<p>A program written can be executed by all models of the family, with only a difference in the speed</p>
</li>
<li>
<p>The customer can start with lower model and upgrade to the higher when it is needed</p>
</li>
</ul>
</li>
</ul>
<hr>
<p><strong>DEC PDP-8</strong></p>
<ul>
<li>
<p>In the same year(1964), Digital Equipment Corporation (DEC) announced PDP-8</p>
<ul>
<li>Small，desktop</li>
<li>Lower cost，$16k</li>
</ul>
</li>
<li>
<p>These features enabled another manufacturer to purchase a PDP-8 and integrate it into a different system for resale</p>
<ul>
<li>These manufacturers came to be known as original equipment manufacturers<code> (OEMs)</code></li>
</ul>
</li>
</ul>
<hr>
<p><strong>Detail of DEC PDP-8</strong></p>
<ul>
<li>
<p><strong>Later models used the bus structure</strong> consists of 96 signal lines to carry control, address, and data signals</p>
</li>
<li>
<p><strong>The architecture is highly flexible, allowing modules to be plugged into the bus to create various configurations</strong></p>
</li>
<li>
<p><strong>Bus architecture is now widely used</strong></p>
</li>
</ul>
<h4 id="generations-of-computer">Generations of computer</h4>
<ul>
<li>
<p>Vacuum tube :1946-1957</p>
</li>
<li>
<p>Transistor : 1958-1964</p>
</li>
<li>
<p>Small scale integration : 1965 on</p>
<ul>
<li>Up to 100 devices on a chip</li>
</ul>
</li>
<li>
<p>Medium scale integration : to 1971</p>
<ul>
<li>100-3,000 devices on a chip</li>
</ul>
</li>
<li>
<p>Large scale integration : 1971-1977</p>
<ul>
<li>3,000 - 100,000 devices on a chip</li>
</ul>
</li>
<li>
<p>Very large scale integration : 1978 -1991</p>
<ul>
<li>100,000 - 100,000,000 devices on a chip</li>
</ul>
</li>
<li>
<p>Ultra large scale integration : 1991 – now</p>
<ul>
<li>Over 100,000,000 devices on a chip</li>
</ul>
</li>
</ul>
<h4 id="technology-change">Technology Change</h4>
<ul>
<li>
<p>Hardware</p>
<ul>
<li>
<p>Vacuum tubes: Electron emitting devices</p>
</li>
<li>
<p>Transistors: On-off switches controlled by electricity</p>
</li>
<li>
<p>Integrated Circuits( IC/ Chips): Combines thousands of transistors</p>
</li>
<li>
<p>Very Large-Scale Integration( VLSI): Combines millions of transistors</p>
</li>
</ul>
</li>
<li>
<p>Software</p>
<ul>
<li>
<p>Machine language: Zeros and ones</p>
</li>
<li>
<p>Assembly language: Mnemonics</p>
</li>
<li>
<p>High-Level Languages: English-like</p>
</li>
</ul>
</li>
</ul>
<h4 id="core-memory">Core Memory</h4>
<ul>
<li>
<p>In the 1950s and 1960s, most computer memory was constructed from tiny rings of ferromagnetic material, each about a sixteenth of an inch in diameter</p>
</li>
<li>
<p>Core Memory: Cores are rings of ferrite suspended in a grid of wires</p>
</li>
<li>
<p>A charge to a point on the grid magnetizes the ring in a clockwise or counter-clockwise direction, which corresponds to a one or a zero: one bit</p>
</li>
<li>
<p>Able to retain information when the electricity is turned off because it holds its state</p>
</li>
<li>
<p>fast $(1us)$ but expensive, destructive readout</p>
</li>
</ul>
<h4 id="semiconductor-memory">Semiconductor Memory</h4>
<ul>
<li>
<p>1970 – semiconductor memory: higher density (size of a single core, 256 bits），non-destructive，much faster ,more expensive</p>
</li>
<li>
<p>1974 – the price per bit of semiconductor memory dropped below the price per bit of core memory. – since then, the cost continue decreasing, the density continue increasing</p>
</li>
<li>
<p>13 generations.：The capacity of a single chip has changed from $1K, 4K, 16K, 64K, 256K, 1M, 4M, 16M, 64M, 256M, 1G$ and $4G$. Now a single memory can reach $128G$</p>
</li>
</ul>
<hr>
<p><strong>Resulting New Developments – Microprocessors</strong></p>
<ul>
<li>
<p>Just as the density of elements on memory chips has continued to rise, so has the density of elements on processor chips</p>
</li>
<li>
<p>More and more elements placed on chip</p>
</li>
<li>
<p>1971—First microprocessor Intel 4004</p>
</li>
<li>
<p>1972—Next Intel 8008, the first 8-bit microprocessor</p>
</li>
<li>
<p>1974—Intel 8080，first general-purpose microprocessor. Faster, richer instruction sets, and has stronger addressing capabilities</p>
</li>
</ul>
<hr>
<p><strong>Intel Microprocessors</strong></p>
<ul>
<li>
<p>Later, 8086 was released in 1978 and 8088 was released in 1979. These two CPUs have been widely used</p>
</li>
<li>
<p>In the 1980s, Intel released 286，386，486，etc</p>
</li>
<li>
<p>In 1993, Pentium CPU was released, followed by Pentium 2.3</p>
</li>
<li>
<p>In 2006, dual core CPU was released</p>
</li>
<li>
<p>Intel has firmly occupied the processor market of desktop computers</p>
</li>
</ul>
<h3 id="designing-for-performance">Designing for Performance</h3>
<ul>
<li>
<p>Performance and storage capacity of the computer are constantly improving, and the price is constantly decreasing</p>
</li>
<li>
<p>Computers have been applied to all fields of life, and people&rsquo;s requirements for computers are getting higher and higher</p>
</li>
<li>
<p>Today, the applications require the great power of today’s microprocessor based</p>
<ul>
<li>
<p>Image processing</p>
</li>
<li>
<p>Speech recognition</p>
</li>
<li>
<p>Videoconferencing</p>
</li>
<li>
<p>etc……</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>The factors that affect a computer performance directly</strong>
<ul>
<li><strong>Microprocessor speed</strong></li>
<li><strong>Performance balance</strong></li>
<li><strong>Improvements in chip organization and architecture</strong></li>
</ul>
</li>
</ul>
<h4 id="microprocessor-speed">Microprocessor Speed</h4>
<blockquote>
<p>According to Moore&rsquo;s theorem, by integrating more transistors on the chip and reducing the distance between circuits, the performance of microprocessors can be improved by 4-5 times every three years</p>
</blockquote>
<ul>
<li>
<p>The processor designers must come up with ever more elaborate techniques for feeding a constant stream of work to do</p>
</li>
<li>
<p>Branch prediction</p>
</li>
<li>
<p>Data flow analysis</p>
</li>
<li>
<p>Speculative execution</p>
</li>
</ul>
<hr>
<h5 id="performance-gap-of-cpu-and-memory">Performance gap of CPU and memory</h5>
<p><strong>While CPU power has raced ahead at speed, other critical</strong> <strong>components have not kept up</strong></p>
<p><strong>! ! ! Performance of memory will seriously affect the performance of CPU!</strong></p>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter2-5.png" title="/img/Computer Organization and Architecture/chapter2-5.png" data-thumbnail="/img/Computer Organization and Architecture/chapter2-5.png" data-sub-html="<h2>Moore&#39;s Law</h2>">
        
    </a><figcaption class="image-caption"><code>Moore's Law</code></figcaption>
    </figure>
<h5 id="solutions-about-memory">Solutions about Memory</h5>
<ul>
<li>
<p><strong>Increase number of bits retrieved at one time</strong></p>
<ul>
<li>Make DRAM “wider” rather than “deeper”</li>
</ul>
</li>
<li>
<p><strong>Change DRAM interface</strong></p>
<ul>
<li>Cache</li>
</ul>
</li>
<li>
<p><strong>Reduce frequency of memory access</strong></p>
<ul>
<li>More complex cache and cache on chip</li>
</ul>
</li>
<li>
<p><strong>Increase interconnection bandwidth</strong></p>
<ul>
<li>
<p>High speed buses</p>
</li>
<li>
<p>Hierarchy of buses</p>
</li>
</ul>
</li>
</ul>
<h5 id="typical-io-device-data-rates">Typical I/O Device Data Rates</h5>
<ul>
<li>
<p>Same problem in I/O access</p>
</li>
<li>
<p>Lots of I/O device types</p>
</li>
<li>
<p>Large data rate difference</p>
</li>
</ul>
<h5 id="solutions-about-io-devices">Solutions about I/O devices</h5>
<ul>
<li>
<p>Caching</p>
</li>
<li>
<p>Buffering</p>
</li>
<li>
<p>Higher-speed interconnection buses</p>
</li>
<li>
<p>More elaborate bus structures</p>
</li>
<li>
<p>Multiple-processor configurations</p>
</li>
</ul>
<h5 id="key-factor-is-balance">Key factor is balance</h5>
<blockquote>
<p>Key to solving the problem of computer performance is to balance, that is, to find the best combination scheme among various components</p>
</blockquote>
<ul>
<li>
<p>Processor components</p>
</li>
<li>
<p>Main memory</p>
</li>
<li>
<p>I/O devices</p>
</li>
<li>
<p>Interconnection structures</p>
</li>
</ul>
<h4 id="process-speed">Process speed</h4>
<p><strong>Three approaches to achieving increased processor speed</strong></p>
<ul>
<li>
<p><strong>Increase hardware speed of processor</strong></p>
<ul>
<li>Fundamentally due to shrinking logic gate size</li>
</ul>
</li>
<li>
<p><strong>Increase size and speed of caches</strong></p>
<ul>
<li>Dedicating part of processor chip</li>
</ul>
</li>
<li>
<p><strong>Change processor organization and architecture</strong></p>
<ul>
<li>
<p>Increase effective speed of execution</p>
</li>
<li>
<p><strong>Parallelism</strong></p>
</li>
</ul>
</li>
</ul>
<h4 id="problems-with-clock-speed-and-logic-density">Problems with Clock Speed and Logic Density</h4>
<ul>
<li>
<p>Power</p>
<ul>
<li>
<p><strong>Power density increases with density of logic and clock speed</strong></p>
</li>
<li>
<p>Dissipating heat</p>
</li>
</ul>
</li>
<li>
<p>RC delay</p>
<ul>
<li>
<p>Delay increases as RC product increases</p>
</li>
<li>
<p>Wire interconnects thinner, increasing resistance</p>
</li>
<li>
<p>Wires closer together, increasing capacitance</p>
</li>
</ul>
</li>
<li>
<p>Memory latency</p>
<ul>
<li><strong>Memory speeds lag processor speeds</strong></li>
</ul>
</li>
</ul>
<h4 id="increasing-cache-capacity">Increasing cache capacity</h4>
<ul>
<li>
<p>Typically two or three levels of cache between processor and main memory</p>
</li>
<li>
<p>Chip density increased</p>
<ul>
<li>More cache memory on chip</li>
<li>Faster cache access</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>Pentium chip devoted about 10% of chip area to cache</li>
<li>Pentium 4 devotes about 50%</li>
</ul>
</blockquote>
<h4 id="more-complex-execution-logic">More complex execution logic</h4>
<p><strong>Enable parallel execution of instructions</strong></p>
<ul>
<li>
<p>Pipeline works like assembly line</p>
<ul>
<li>Different stages of execution of different instructions at same time along pipeline</li>
</ul>
</li>
<li>
<p>Super-scalar allows multiple pipelines within single processor</p>
<ul>
<li>Instructions that do not depend on one another can be executed in parallel!</li>
</ul>
</li>
</ul>
<a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter2-6.png" title="/img/Computer Organization and Architecture/chapter2-6.png" data-thumbnail="/img/Computer Organization and Architecture/chapter2-6.png">
        
    </a>
<h4 id="diminishing-returns">Diminishing returns</h4>
<ul>
<li>
<p><strong>Internal organization of processors complex</strong></p>
<ul>
<li>
<p>Can get a great deal of parallelism</p>
</li>
<li>
<p>Further significant increases likely to be relatively modest</p>
</li>
</ul>
</li>
<li>
<p><strong>Benefits from cache are reaching limit</strong></p>
</li>
<li>
<p><strong>Increasing clock rate runs into power dissipation problem</strong></p>
<ul>
<li>Some fundamental physical limits are being reached</li>
</ul>
</li>
</ul>
<h4 id="new-approach--multiple-cores">New approach – multiple cores</h4>
<ul>
<li>
<p><strong>Multiple processors on single chip</strong></p>
<ul>
<li><strong>Large shared cache</strong></li>
</ul>
</li>
<li>
<p><strong>Within a processor, increase in performance proportional to square root of increase in complexity</strong></p>
</li>
<li>
<p><strong>If software can use multiple processors, doubling number of processors almost doubles performance</strong></p>
</li>
</ul>
<h4 id="cisc-and-risc"><code>CISC</code> and <code>RISC</code></h4>
<ul>
<li>
<p><strong>The Intel x86 represents the complex instruction set computers<code>(CISC)</code></strong></p>
<ul>
<li>
<p>Personal computer</p>
</li>
<li>
<p>Mainframes</p>
</li>
<li>
<p>Supercomputers</p>
</li>
</ul>
</li>
<li>
<p><strong>The ARM architecture represents the reduced instruction set computers <code>(RISC)</code></strong></p>
<ul>
<li>
<p>SUN SPARC，MIPS</p>
</li>
<li>
<p>Apple Macintosh</p>
</li>
<li>
<p>embedded chip</p>
</li>
<li>
<p>Mobile phone</p>
</li>
</ul>
</li>
</ul>
<h3 id="performance-assessment">Performance Assessment</h3>
<p><strong>About Performance Assessment</strong></p>
<ul>
<li>
<p>Evaluating the performance of different processor is difficult because of different architectures used</p>
<ul>
<li>
<p>One processor is suitable for specific scenario</p>
</li>
<li>
<p>Instruction set, program language, compiler have an impact on the performance of processors</p>
</li>
</ul>
</li>
<li>
<p>How to evaluate the performance of the processor?</p>
</li>
</ul>
<hr>
<h4 id="system-clock">System clock</h4>
<ul>
<li>
<p><strong>System clock speed</strong></p>
<ul>
<li>
<p>Related to execution time of Instruction</p>
</li>
<li>
<p>Generated by the crystal oscillator，after analog-to-digital conversion, forms a digital voltage pulse signal</p>
</li>
</ul>
</li>
<li>
<p><strong>In Hz or multiples of</strong></p>
</li>
<li>
<p><strong>Clock rate, clock cycle, clock tick, cycle time</strong></p>
</li>
</ul>
<h4 id="clock-speed">Clock speed</h4>
<ul>
<li>
<p><strong>Operations need to be synchronized</strong></p>
</li>
<li>
<p>Instruction execution <strong>in discrete steps</strong></p>
<ul>
<li>
<p><strong>Fetch, decode, load and store, arithmetic or logical</strong></p>
</li>
<li>
<p>Usually require multiple clock cycles per instruction</p>
</li>
</ul>
</li>
<li>
<p><strong>Instruction is not fully serial</strong></p>
</li>
<li>
<p><strong>Pipelining gives simultaneous execution of instructions</strong></p>
</li>
<li>
<p>So, clock speed is not the whole story</p>
</li>
</ul>
<h4 id="instruction-execution-rate---">Instruction execution rate ! ! !</h4>
<ul>
<li>
<p><strong>MIPS: Million Instruction per Second</strong></p>
</li>
<li>
<p><strong>CPI，Cycle per Instruction</strong></p>
</li>
<li>
<p><strong>CPU constant frequency $f\newline$</strong></p>
</li>
<li>
<p><strong>constant cycle time $T=\frac{1}{f}\newline$</strong></p>
</li>
<li>
<p><strong>Instruction count $Ic\newline$</strong></p>
</li>
<li>
<p><strong>CPI</strong></p>
</li>
</ul>
<p>$$
CPI=\frac{\sum_{i=1}^n(CPI_i \times I_i)}{I_c}\newline
$$</p>
<p><strong>Parameter in CPI</strong></p>
<ul>
<li>$I_c$: The number of machine instructions executed for that program, not the number of instructions in the object code of the program</li>
<li>$CPI_i$ be the number of cycles required for instruction type i</li>
<li>$I_i$ be the number of executed instructions of type i for a given program</li>
<li>The processor time T needed to execute a given program can be expressed as</li>
</ul>
<p>$$
T=I_c \times CPI \times T\newline
$$</p>
<ul>
<li>A processors driven by a clock with a constant frequency f or,equivalently, a constant cycle time , where</li>
</ul>
<p>$$
T=\frac{1}{f}\newline
$$</p>
<hr>
<ul>
<li><strong>MIPS</strong></li>
</ul>
<p>$$
MIPS_{rate}=\frac{I_c}{T \times 10^6}=\frac{f}{CPI \times 10^6}\newline
$$</p>
<ul>
<li><strong>MFLOPS</strong></li>
</ul>
<p>$$
MFLOPS=\frac{Number\ of\ floating-point\ operations\ in\ the\ program}{Execute\ time \times 10^6}\newline
$$</p>
<ul>
<li>
<p>Millions of floating point instructions per second <code>(MFLOPS)</code></p>
</li>
<li>
<p><strong>Heavily dependent on instruction set, compiler design, processor implementation, cache &amp; memory hierarchy</strong></p>
</li>
</ul>
<hr>
<p><strong>Example 1</strong></p>
<table>
<thead>
<tr>
<th><strong>Type of instruction</strong></th>
<th><strong>number of instructions</strong></th>
<th><strong>The number of clock cycles for the instruction</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>integer arithmetic</strong></td>
<td>50000</td>
<td>1</td>
</tr>
<tr>
<td><strong>floating point arithmetic</strong></td>
<td>20000</td>
<td>3</td>
</tr>
<tr>
<td><strong>data transfer</strong></td>
<td>25000</td>
<td>2</td>
</tr>
<tr>
<td><strong>control instruction</strong></td>
<td>5000</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>$$
CPI=\frac{50000 \times 1 + 20000 \times 3 + 25000 \times 2 + 5000 \times 2}{50000+20000+25000+5000}=1.7\newline
$$</p>
<p><strong>Example 2</strong></p>
<p>A computer with a main frequency of 100 MHz performs a section of the program. The number and cycles of various instructions in the program are shown in the table below. Calculate the CPI of this procedure as well as the MIPS</p>
<table>
<thead>
<tr>
<th><strong>Type of instruction</strong></th>
<th><strong>number of instructions</strong>(M)</th>
<th><strong>The number of clock cycles for the instruction</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>Arithmetic and logical operations</strong></td>
<td>5</td>
<td>1</td>
</tr>
<tr>
<td><strong>data access</strong></td>
<td>8</td>
<td>2</td>
</tr>
<tr>
<td><strong>control instruction</strong></td>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td><strong>other</strong></td>
<td>1</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>$$
\begin{align}
&amp;CPI=\frac{5 \times 1 + 8 \times 2 + 2 \times 4 + 1 \times 3}{5 + 8 + 2 + 1}=2\newline
&amp;MIPS=\frac{f}{CPI \times 10^6}=\frac{100 \times 10 ^6}{2 \times 10^6}=50\newline
\end{align}
$$</p>
<h4 id="benchmarks">Benchmarks</h4>
<p>Benchmarks: Programs designed to test performance</p>
<ul>
<li>
<p><strong>Written in high level language</strong></p>
<ul>
<li><strong>Portable</strong></li>
</ul>
</li>
<li>
<p><strong>Represents style of task</strong></p>
<ul>
<li>Systems, numerical, commercial</li>
</ul>
</li>
<li>
<p>Easily measured</p>
</li>
<li>
<p>Widely distributed</p>
</li>
<li>
<p>System Performance Evaluation Corporation</p>
</li>
<li>
<p>Most famous: SPEC 2006</p>
<ul>
<li>
<p>Suitable for testing applications of computing intensive</p>
</li>
<li>
<p>17 floating-point programs written in C, C++ and FORTRAN</p>
</li>
<li>
<p>12 integer programs written in C and C++</p>
</li>
<li>
<p>total code of more than 3 million lines</p>
</li>
</ul>
</li>
</ul>
<hr>
<h5 id="result-process-and-analysis--">Result process and analysis! ! !</h5>
<ul>
<li>
<p>Run several different test programs, and then arithmetically process the test results to obtain an average measurement</p>
</li>
<li>
<p>Average execution speed</p>
</li>
</ul>
<p>$$
R_A=\frac{1}{m} \sum_{i=1}^m R_i\newline
R_i \rightarrow the\ execution\ speed\ of\ the\ high-level\ language\ instructions\ of\ the\ i^{th}\ benchmark\ program\newline
$$</p>
<ul>
<li>Harmonic mean</li>
</ul>
<p>$$
R_B=\frac{m}{\sum_{i=1}^m \frac{1}{R_i}}\newline
\frac{1}{R_i} \rightarrow Average\ instruction\ execution\ time\ for\ the\ i^{th}\ baseline\ procedure\newline
$$</p>
<h5 id="speed-metric---">Speed Metric ! ! !</h5>
<ul>
<li>
<p><strong>Ability of a computer to complete a single task</strong></p>
</li>
<li>
<p>$r_i=\frac{T_{left}}{T_{suti}}\newline$</p>
</li>
<li>
<p>$T_{left}$: execution time of benchmark program i on the reference system</p>
</li>
<li>
<p>$T_{suti}$: execution time of benchmark program i on the system under test</p>
</li>
<li>
<p>Use geometric mean for more than one benchmark program $\rightarrow r_G=(\prod_{i=1}^n r_i)^{\frac{1}{n}}\newline$</p>
</li>
</ul>
<p><strong>Example 3</strong></p>
<p>According to the following conditions, compare the performance of the two processors by two methods (the average execution speed and the harmonic average) and analyze the significance</p>
<table>
<thead>
<tr>
<th>benchmark</th>
<th>The MIPS for the processor 1</th>
<th>The MIPS for the processor 2</th>
</tr>
</thead>
<tbody>
<tr>
<td>benchmark 1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>benchmark 2</td>
<td>3</td>
<td>4</td>
</tr>
<tr>
<td>benchmark 3</td>
<td>5</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>$$
\begin{align}
&amp;The\ average\ execution\ speed\newline
&amp;benchmark_1=\frac{2+3+5}{3}=\frac{10}{3}\newline
&amp;benchmark_2=\frac{3+4+5}{3}=\frac{10}{3}\newline
&amp;The\ harmonic\ average\newline
&amp;benchmark_1=\frac{3}{\frac{1}{2}+\frac{1}{3}+\frac{1}{5}}=\frac{90}{31}\newline
&amp;benchmark_2=\frac{3}{\frac{1}{3}+\frac{1}{4}+\frac{1}{3}}=\frac{36}{11}\newline
\end{align}
$$</p>
<p><strong>Processor 2 has better performance</strong></p>
<h4 id="amdahls-law---">Amdahl’s Law ! ! !</h4>
<ul>
<li>
<p>First proposed by Gene Amdahl</p>
</li>
<li>
<p>For program running on single processor and multi processors</p>
<ul>
<li>
<p>Fraction <em>f</em> of code infinitely parallelizable with no scheduling overhead</p>
</li>
<li>
<p>Fraction (1-<em>f</em>) of code inherently serial</p>
</li>
<li>
<p>T is total execution time for program on single processor</p>
</li>
<li>
<p>N is number of processors that fully exploit parallel portions of code</p>
</li>
</ul>
</li>
</ul>
<p>$$
Speedup=\frac{time\ to\ execute\ program\ on\ a\ single\ processor}{time\ to\ execute\ program\ on\ N\ parallel\ processors}=\frac{T(1-f)+Tf}{T(1-f)+\frac{Tf}{N}}=\frac{1}{(1-f)+\frac{f}{N}}\newline
$$</p>
<h5 id="conclusions-of-amdahls-law---">Conclusions of Amdahl’s Law ! ! !</h5>
<ul>
<li>
<p><strong>f small, parallel processors has little effect</strong></p>
</li>
<li>
<p>$N \rightarrow \infty$,speedup bound by $\frac{1}{1-f}\newline$</p>
<ul>
<li><em>Diminishing returns for using more processors</em></li>
</ul>
</li>
</ul>
<p>$$
Speedup=\frac{1}{(1-f)+\frac{f}{SU_f}}\newline
$$</p>
<p><strong>Example 5</strong></p>
<ul>
<li>Assuming 20% of the program, what is the ideal speed-up ratio for an 8-core processor?</li>
</ul>
<p>$$
Speedup=\frac{1}{0.2+\frac{0.8}{8}}=3.33\newline
$$</p>
<ul>
<li>A 4-core processor, if you want to accelerate to a ratio of no less than 3, needs at least what proportion of the instructions that can be executed in parallel</li>
</ul>
<p>$$
3=\frac{1}{(1-f)+\frac{f}{N}}\newline
f=\frac{8}{9}\newline
$$</p>
<h4 id="intel-x86-and-arm-processor-families"><code>Intel x86</code> and <code>ARM</code> processor families</h4>
<h5 id="intel"><code>Intel</code></h5>
<ul>
<li>
<p>1971-4004</p>
<ul>
<li>
<p>First microprocessor</p>
</li>
<li>
<p>All CPU components on a single chip</p>
</li>
<li>
<p>4 bit</p>
</li>
</ul>
</li>
<li>
<p>Followed in 1972 by 8008</p>
<ul>
<li>
<p>8 bit</p>
</li>
<li>
<p>Both designed for specific applications</p>
</li>
</ul>
</li>
<li>
<p>1974 - 8080</p>
<ul>
<li>
<p>Intel’s first general purpose microprocessor</p>
</li>
<li>
<p>8 bit data path</p>
</li>
<li>
<p>Used in first personal computer – Altair</p>
</li>
</ul>
</li>
</ul>
<h5 id="intel-x86history"><code>Intel x86</code>(history)</h5>
<ul>
<li>
<p>1978-8086</p>
<ul>
<li>
<p>$5MHz\newline$</p>
</li>
<li>
<p>29000 transistors</p>
</li>
<li>
<p>much more powerful</p>
</li>
<li>
<p>16 bit</p>
</li>
<li>
<p>instruction cache, pre-fetch few instructions</p>
</li>
</ul>
</li>
<li>
<p>1982-80286</p>
<ul>
<li>
<p>16 Mbyte memory addressable</p>
</li>
<li>
<p>up from 1GB</p>
</li>
</ul>
</li>
<li>
<p>1985-80386</p>
<ul>
<li>
<p>32 bit</p>
</li>
<li>
<p>Support for multitasking</p>
</li>
</ul>
</li>
<li>
<p>1989-80486</p>
<ul>
<li>
<p>sophisticated powerful cache and instruction pipelining</p>
</li>
<li>
<p>Built-in maths co-processor</p>
</li>
</ul>
</li>
<li>
<p>1993-Pentium</p>
<ul>
<li>
<p>Superscalar</p>
</li>
<li>
<p>Multiple instructions executed in parallel</p>
</li>
</ul>
</li>
<li>
<p>1995-Pentium Pro</p>
<ul>
<li>
<p>Increased superscalar organization</p>
</li>
<li>
<p>Aggressive register renaming 寄存器重命名</p>
</li>
<li>
<p>branch prediction</p>
</li>
<li>
<p>data flow analysis</p>
</li>
<li>
<p>speculative execution</p>
</li>
</ul>
</li>
<li>
<p>1997-Pentium II</p>
<ul>
<li>
<p><code>MMX</code> technology</p>
</li>
<li>
<p>graphics, video &amp; audio processing</p>
</li>
</ul>
</li>
<li>
<p>1999-Pentium III</p>
<ul>
<li>Additional floating point instructions for 3D graphics</li>
</ul>
</li>
<li>
<p>2000-Pentium 4</p>
<ul>
<li>
<p>42 Million transistors</p>
</li>
<li>
<p>Further floating point and multimedia enhancements</p>
</li>
</ul>
</li>
<li>
<p>2006-Core 2 Duo</p>
<ul>
<li>
<p>First <code>x86</code> with dual core</p>
</li>
<li>
<p>64 bit architecture</p>
</li>
</ul>
</li>
<li>
<p>2008-Core 2 Quad – <code>3GHz</code> – 820 million transistors</p>
<ul>
<li>Four processors on chip</li>
</ul>
</li>
<li>
<p>i7、i5、i3……</p>
</li>
<li>
<p><code>x86</code> architecture dominant outside embedded systems</p>
</li>
<li>
<p>Instruction set architecture evolved with backwards compatibility</p>
</li>
</ul>
<h4 id="what-is-embedded-system">What is embedded system?</h4>
<ul>
<li>
<p>An embedded system is a special-purpose computer system designed to perform one or a few dedicated functions, often with real-time computing constraints</p>
</li>
<li>
<p>It is usually <em>embedded</em> as part of a complete device including hardware and mechanical parts</p>
</li>
<li>
<p>Complexity varies from low, with a single micro-controller chip, to very high with multiple units, peripherals and networks mounted inside a large enclosure</p>
</li>
</ul>
<h5 id="requirements-of-embedded-system">Requirements of embedded system</h5>
<ul>
<li>
<p>Different sizes</p>
<ul>
<li>Different constraints, optimization, reuse</li>
</ul>
</li>
<li>
<p>Different requirements</p>
<ul>
<li>
<p>Safety, reliability, real-time, flexibility, legislation</p>
</li>
<li>
<p>Lifespan</p>
</li>
<li>
<p>Environmental conditions</p>
</li>
<li>
<p>Static or dynamic loads</p>
</li>
<li>
<p>Slow to fast speeds</p>
</li>
<li>
<p>Computation or I/O intensive</p>
</li>
</ul>
</li>
</ul>
<h4 id="possible-organization">Possible organization</h4>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter2-7.png" title="/img/Computer Organization and Architecture/chapter2-7.png" data-thumbnail="/img/Computer Organization and Architecture/chapter2-7.png" data-sub-html="<h2>Possible organization</h2>">
        
    </a><figcaption class="image-caption"><code>Possible organization</code></figcaption>
    </figure>
<h4 id="arm-evolution">ARM Evolution</h4>
<ul>
<li>
<p><strong>ARM: Advanced RISC Machine</strong></p>
</li>
<li>
<p>Designed by ARM Inc., Cambridge, England</p>
</li>
<li>
<p>Licensed to manufacturers</p>
</li>
<li>
<p><strong>High speed, low power consumption</strong></p>
</li>
<li>
<p><strong>PDAs, hand held games, phones PDA</strong></p>
<ul>
<li><strong>E.g. iPad, iPhone</strong></li>
</ul>
</li>
</ul>
<h3 id="computer-types">Computer Types</h3>
<ul>
<li>
<p><strong>Microcomputers</strong></p>
</li>
<li>
<p><strong>Mainframes</strong></p>
</li>
<li>
<p><strong>Supercomputers</strong></p>
</li>
</ul>
<h4 id="microcomputer">Microcomputer</h4>
<ul>
<li>
<p><em>microcomputer</em> is generally synonymous with:</p>
<ul>
<li>
<p>personal computer (PC)</p>
</li>
<li>
<p>A computer that depends on a microprocessor</p>
</li>
</ul>
</li>
<li>
<p>Designed to be used by individuals:</p>
<ul>
<li>
<p>PCs</p>
</li>
<li>
<p>Workstations</p>
</li>
<li>
<p>Notebook computers</p>
</li>
</ul>
</li>
</ul>
<h4 id="workstation">Workstation</h4>
<ul>
<li>
<p>A workstation is a high-end microcomputer designed for technical or scientific applications</p>
</li>
<li>
<p>The term <em>workstation</em> has also been used to <strong>refer to a mainframe computer terminal or a PC connected up to a network</strong></p>
</li>
<li>
<p>Historically, workstations had offered higher performance than personal computers, especially with respect to graphics and CPU power, memory capacity and multitasking ability</p>
</li>
</ul>
<h4 id="mainframe">Mainframe</h4>
<blockquote>
<p>The chief difference between a supercomputer and a mainframe is that a supercomputer channels all its power into executing a few programs as fast as possible, whereas a mainframe uses its power to execute many programs concurrently</p>
</blockquote>
<h3 id="important-terminology---">Important terminology ! ! !</h3>
<ul>
<li>
<p>Bit: a binary digit that can have value 0 or 1</p>
</li>
<li>
<p>Byte: defined as 8 bits</p>
</li>
<li>
<p>Word: a set of bits constituting the smallest unit of addressable memory</p>
</li>
<li>
<p>KB:  $2^{10}$ bytes (1024 bytes)</p>
</li>
<li>
<p>MB: $2^{20}$ bytes</p>
</li>
<li>
<p>GB:  $2^{30}$ bytes</p>
</li>
</ul>
]]></description>
</item>
<item>
    <title>Computer Organization and Architecture Introduction</title>
    <link>https://Jungle430.github.io/posts/computer-organization-and-architecture/computer-organization-and-architecture-introduction/</link>
    <pubDate>Tue, 10 Jan 2023 22:17:58 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/computer-organization-and-architecture/computer-organization-and-architecture-introduction/</guid>
    <description><![CDATA[<h1 id="computer-organization-and-architecture">Computer Organization and Architecture</h1>
<h2 id="introduction">Introduction</h2>
<h3 id="content">content</h3>
<p>It includes two parts: <strong>computer composition principle</strong> and <strong>computer architecture</strong></p>
<ul>
<li>
<p>The principle of composition mainly discusses the various components of computer systems and their working mechanisms</p>
</li>
<li>
<p>Architecture studies computer instruction sets, I/O mechanisms, addressing techniques, and more</p>
</li>
</ul>
<h3 id="preface">Preface</h3>
<p><strong>The characteristics of this course:</strong></p>
<ul>
<li>
<p>core basic course of computer major</p>
</li>
<li>
<p>Fundamental</p>
</li>
<li>
<p>Abstractness</p>
</li>
<li>
<p>Modularization</p>
</li>
<li>
<p>Relevance</p>
</li>
<li>
<p>Hierarchy</p>
</li>
<li>
<p>One of the required subjects for postgraduate entrance examination</p>
</li>
</ul>
<h3 id="outline">Outline</h3>
<ul>
<li>
<p>Introduction of Computer and this course</p>
</li>
<li>
<p>Why Study Computer Organization and Architecture?</p>
</li>
<li>
<p>Organization and Architecture</p>
</li>
<li>
<p>Structure and Function</p>
</li>
</ul>
<h3 id="introduction-of-computer-and-this-course">Introduction of Computer and this course</h3>
<h4 id="main-parts-of-the-computer">Main parts of the computer</h4>
<ul>
<li>
<p>Network card</p>
</li>
<li>
<p>sound card</p>
</li>
<li>
<p>GPU</p>
</li>
<li>
<p>memory</p>
</li>
<li>
<p>CPU</p>
</li>
<li>
<p>air fan</p>
</li>
<li>
<p>mainboard (motherboard)</p>
</li>
<li>
<p>Data line</p>
</li>
<li>
<p>Optical Disk Driver</p>
</li>
<li>
<p>Hard disk</p>
</li>
<li>
<p>floppy disk drive</p>
</li>
</ul>
<h4 id="computing-devices-then">Computing devices then</h4>
<h5 id="edsac">EDSAC</h5>
<p>$EDSAC$: <strong>Electronic Delay Storage Automatic Calculator</strong>,University of Cambridge, UK, 1949</p>
<ul>
<li>
<p><strong>First stored program</strong></p>
</li>
<li>
<p>About 3000 vacuum tubes ，arranged on 12 cabinets, covering an area of 5 × 4 meters</p>
</li>
<li>
<p>Power consumption 12 kW</p>
</li>
<li>
<p><strong>Consists of five parts: arithmetic unit (ALU), controller, memory, input and output</strong></p>
</li>
<li>
<p>About 650 instructions per second</p>
</li>
</ul>
<h4 id="rapid-change-of-underlying-technology">Rapid Change of Underlying Technology</h4>
<blockquote>
<p>With the continuous improvement of the integration of <strong>integrated circuits</strong>, more components can be packed into chips of the same size</p>
</blockquote>
<p>Computers becomes</p>
<ul>
<li>
<p>Performance ：faster</p>
</li>
<li>
<p>Memory capacity ：larger</p>
</li>
<li>
<p>Volume ：smaller</p>
</li>
</ul>
<p>Computer technology</p>
<ul>
<li>
<p>Integrated circuit technology</p>
</li>
<li>
<p>Parallel organization</p>
</li>
<li>
<p>……</p>
</li>
</ul>
<h4 id="development-trend-of-computer">Development trend of computer</h4>
<p>$Gordon\ Moore, Electronics, 1965\newline$</p>
<p>$\downarrow \downarrow \downarrow \downarrow\newline$</p>
<ul>
<li>
<p>Number of <em>transistor on the chip</em> <strong>doubles every certain time</strong></p>
</li>
<li>
<p>Processor performance is getting <strong>stronger and smaller</strong></p>
</li>
</ul>
<h4 id="content-of-this-course">Content of this course</h4>
<div class="mermaid" id="id-1"></div>
<h4 id="how-does-computer-work">How does computer work?</h4>
<ul>
<li>How does a basic instruction execute in CPU?</li>
</ul>
<p>Example $\rightarrow$​ <strong>Add R1, R2</strong> (add content of <code>R1</code> and content of <code>R2</code>, place result in <code>R1</code>)</p>
<h5 id="execution-steps-of-add-r1r2">Execution steps of Add R1,R2</h5>
<p>The “possible” micro-execution steps are:</p>
<ol>
<li>
<p>$ALU_1 \leftarrow\ [R1]$				{content of R1 is moved to ALU1 }</p>
</li>
<li>
<p>$ALU_2 \leftarrow [R2]$                 {content of R2 is moved to ALU2 }</p>
</li>
<li>
<p>$ADD$                                 {content of ALU1 + ALU2 = ALU3 }</p>
</li>
<li>
<p>$R1 \leftarrow [ALU_3]$                 {Result of addition is moved to R1}</p>
</li>
</ol>
<p>If, each micro-step is executed in “one” clock-cycle, then  this Add instruction <strong>needs 4 clock-cycles</strong></p>
<h5 id="how-to-reduce-execution-time">How to reduce execution time?</h5>
<ul>
<li>
<p>Need 4 clock-cycles</p>
</li>
<li>
<p>Data transfer takes 75% of the time (1, 2, 4)</p>
</li>
<li>
<p>With single bus, it is slow, since in each “clock” only one transfer could be executed</p>
</li>
</ul>
<hr>
<ul>
<li>Is there any other way to “improve” the speed?
<ul>
<li>Dual bus processor may be faster</li>
<li>Additional processor cost</li>
</ul>
</li>
</ul>
<h6 id="dual-bus-processor">Dual bus processor</h6>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter1-1.png" title="/img/Computer Organization and Architecture/chapter1-1.png" data-thumbnail="/img/Computer Organization and Architecture/chapter1-1.png" data-sub-html="<h2>Solve(Dual bus processor)</h2>">
        
    </a><figcaption class="image-caption">Solve(<code>Dual bus processor</code>)</figcaption>
    </figure>
<h5 id="how-about-cpu-memory-connection"><strong>How about CPU-Memory Connection?</strong></h5>
<p><strong>Problem:</strong></p>
<ul>
<li>
<p>CPU can transfer 16/32/64 bit data or instruction (from one CPU unit to another) in <strong>less than one nanosecond</strong>$ (for\ CPU\ with &gt; 1\ Ghz\ clock) \newline$</p>
</li>
<li>
<p>Memory unit/system, transfers 16/32/64 bit data or instruction in 40 to 60 nanoseconds (for memory w/40-60 nanosecond cycle time)</p>
</li>
</ul>
<p><strong>CPU has to wait more than 50 CPU clocks</strong>, waiting for data/instruction from memory to be available</p>
<hr>
<p><strong>Solve the problem:</strong></p>
<ul>
<li>We can overcome (partly) the CPU-Memory bottleneck by inserting cache memory between CPU and Main Memory</li>
</ul>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter1-2.png" title="/img/Computer Organization and Architecture/chapter1-2.png" data-thumbnail="/img/Computer Organization and Architecture/chapter1-2.png" data-sub-html="<h2>Solve(Cache)</h2>">
        
    </a><figcaption class="image-caption">Solve(<code>Cache</code>)</figcaption>
    </figure>
<p><strong>Other way to improve speed</strong></p>
<ul>
<li>
<p>Is there any other way to improve instruction execution speed (increasing performance)? <strong>Pipelining</strong></p>
</li>
<li>
<p>Are these improvements need extra cost? $(cost\ vs\ performance\ issue)\newline$</p>
</li>
<li>
<p>Balance</p>
</li>
</ul>
<h4 id="main-content-of-this-course">Main content of this course</h4>
<ul>
<li>
<p>PART ONE: OVERVIEW</p>
</li>
<li>
<p>PART TWO: THE COMPUTER SYSTEM</p>
</li>
<li>
<p>PART THREE: THE CENTRAL PROCESSING UNIT</p>
</li>
<li>
<p>PART FOUR: THE CONTROL UNIT</p>
</li>
<li>
<p>PART FIVE: PARALLEL ORGANIZATION</p>
</li>
</ul>
<h3 id="why-study-computer-organization-and-architecture">Why Study Computer Organization and Architecture?</h3>
<h4 id="in-this-course-we-will-learn">In this course, we will learn</h4>
<ul>
<li>
<p>What parts does the computer consist of?</p>
</li>
<li>
<p>How does each part work?</p>
</li>
<li>
<p>How are these parts connected?</p>
</li>
<li>
<p>What are the key factors affecting computer performance?</p>
</li>
<li>
<p>What methods are used to improve the performance of the computer?</p>
</li>
</ul>
<p><strong>Example:</strong></p>
<ul>
<li>
<p>Balance</p>
<ul>
<li>
<p>Inserting cache memory</p>
</li>
<li>
<p>Selection of the number of registers: not only enough, but also not too many</p>
</li>
<li>
<p>cost vs performance</p>
</li>
</ul>
</li>
<li>
<p>Parallel</p>
<ul>
<li>
<p>Internal of CPU: pipeline, superscalar</p>
</li>
<li>
<p>On chip: multicore</p>
</li>
<li>
<p>Internal of machine: SMP,NUMA</p>
</li>
<li>
<p>Multi-machine: cluster</p>
</li>
</ul>
</li>
</ul>
<h4 id="after-this-course-we-will-know">After this course, we will know</h4>
<ul>
<li>
<p>We are able to analyze the inter relation among design of instructions, its implementation in a processor and the performance issues</p>
</li>
<li>
<p>Learn about the computer design and organization issues, namely hardware of a computer</p>
</li>
</ul>
<h4 id="what-is-the-context-of-this-course">What is the context of this course?</h4>
<p>$UML\newline$</p>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter1-3.png" title="/img/Computer Organization and Architecture/chapter1-3.png" data-thumbnail="/img/Computer Organization and Architecture/chapter1-3.png" data-sub-html="<h2>course(UML)</h2>">
        
    </a><figcaption class="image-caption">course(<code>UML</code>)</figcaption>
    </figure>
<h4 id="significance-of-this-course">Significance of this course</h4>
<ul>
<li>
<p>The computer lies at the heart of computing. Without it most of the computing disciplines today would be a branch of theoretical mathematics</p>
</li>
<li>
<p>To be a professional in any field of computing today, one should not regard the computer as just a black box that executes programs by magic</p>
</li>
<li>
<p>All students of computing should acquire some understanding and appreciation of a computer system’s functional components, their characteristics, their performance, and their interactions. There are practical implications as well</p>
</li>
</ul>
<hr>
<ul>
<li>
<p>We need to understand computer architecture in order to structure a program so that it runs more efficiently on a real machine</p>
</li>
<li>
<p>In selecting a system to use, we should to able to understand the tradeoff among various components, such as CPU clock speed vs. memory size</p>
</li>
</ul>
<h4 id="role-of-the-computer-architect">Role of the computer architect</h4>
<ul>
<li>
<p>Look backward : examine old code</p>
</li>
<li>
<p>Look forward : Listen to the dreamers</p>
</li>
<li>
<p>Look Up : Nature of the problems</p>
</li>
<li>
<p>Look down : predict the future of the technology</p>
</li>
</ul>
<h3 id="organization-and-architecture">Organization and Architecture</h3>
<h4 id="architecture">Architecture</h4>
<ul>
<li>
<p><strong>Architecture is those attributes visible to the programmer</strong></p>
<ul>
<li>
<p><strong>Instruction set , number of bits used for data representation, I/O mechanisms, addressing techniques</strong></p>
</li>
<li>
<p>e.g. Is there a multiply instruction?</p>
</li>
<li>
<p>How best is memory handled by the OS?</p>
</li>
</ul>
</li>
</ul>
<h4 id="organization">Organization</h4>
<ul>
<li>
<p><strong>Organization is how features are implemented</strong></p>
</li>
<li>
<p><strong>Control signals, interfaces, memory technology</strong></p>
</li>
<li>
<p>e.g. Is there a hardware multiply unit or is it done by repeated addition?</p>
</li>
<li>
<p>What type of non-volatile memory is used to store the BIOS?</p>
</li>
</ul>
<h4 id="importance-of-the-distinction">Importance of the distinction</h4>
<ul>
<li>
<p><strong>A family of computer models: All with the same architecture but with differences in organization</strong></p>
<ul>
<li>
<p>The different models in the family have different price and performance characteristics</p>
</li>
<li>
<p>The organization of a particular architecture changing with changing technology</p>
</li>
</ul>
</li>
</ul>
<p><strong>Example</strong></p>
<ul>
<li>
<p>All Intel x86 family share the same basic architecture</p>
</li>
<li>
<p>The IBM System/370 family share the same basic architecture</p>
</li>
<li>
<p>This gives code compatibility at least backwards</p>
</li>
<li>
<p>Organization differs between different versions</p>
</li>
</ul>
<h4 id="definition-of-architecture">Definition of architecture</h4>
<h5 id="traditional-definitionisa-only">Traditional definition——ISA-only</h5>
<blockquote>
<p>The term <strong>architecture</strong> is used here to describe the attributes of a system as seen by the programmer, i.e., the conceptual structure and functional behavior as distinct from the organization of the dataflow and controls, the logic design, and the physical implementation	<em>——Gene Amdahl</em>, IBM Journal of R&amp;D, April 1964</p>
</blockquote>
<h5 id="isa--implementation">ISA + implementation</h5>
<blockquote>
<p>The science and art of designing, selecting, and interconnecting hardware components and designing the hardware/software interface to create a computing system that meets functional, performance, energy consumption, cost, and other specific goals</p>
</blockquote>
<h4 id="organization-and-hardware">Organization and Hardware</h4>
<ul>
<li>
<p>Operation units and their interconnection to realize structural specifications</p>
<ul>
<li>
<p>Internal CPU,including Arithmetic, logic, branch, data transfer are implemented</p>
</li>
<li>
<p>Memory system</p>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>
<p>Hardware used to refer to specific of a machine</p>
<ul>
<li>
<p>Detailed logic design</p>
</li>
<li>
<p>Packaging technology of machine</p>
</li>
</ul>
</li>
</ul>
<h3 id="structure-and-function">Structure and Function</h3>
<h4 id="hierarchical-thought">Hierarchical thought</h4>
<ul>
<li>
<p>The modern computer uses the hierarchical to design, and the hierarchical characteristics are the basis of designing and describing them</p>
</li>
<li>
<p>In each layer, the system consists of a set of components and their interrelations</p>
</li>
<li>
<p>The behavior of each layer only depends on the simpler abstract features of the next layer of the system</p>
</li>
<li>
<p>Designers care about the structure and function of each layer</p>
</li>
</ul>
<h4 id="hierarchical-method---bottom-up">Hierarchical method - Bottom up</h4>
<blockquote>
<p>Bottom up: build a complete description from the bottom up. It starts from the most basic part of the system implementation, from simple to complex, build up layer by layer, until finally get the required system</p>
</blockquote>
<h4 id="hierarchical-method--top-down">Hierarchical method – Top down</h4>
<blockquote>
<p>Top down: starting from the top level, decompose the system into several sub parts. The essence is to decompose complex big problems into relatively simple small problems, find out the key and key points of each problem, and then describe the problem qualitatively and quantitatively with accurate thinking. Its core essence is &ldquo;decomposition&rdquo;</p>
</blockquote>
<p><strong>Top-down approach is the clearest and most effective.</strong></p>
<h4 id="structure--function">Structure &amp; Function</h4>
<ul>
<li>
<p>Structure is the way in which components relate to each other</p>
</li>
<li>
<p>Function is the operation of individual components as part of the structure</p>
</li>
</ul>
<h5 id="function">Function</h5>
<p>All computer functions are</p>
<ul>
<li>
<p>Data processing</p>
</li>
<li>
<p>Data storage</p>
</li>
<li>
<p>Data movement</p>
</li>
<li>
<p>Control</p>
</li>
</ul>
<h6 id="function-view">Function View</h6>
<div class="mermaid" id="id-2"></div>
<p><strong>Operation type 1 — data movement</strong></p>
<div class="mermaid" id="id-3"></div>
<p><strong>Operation type 2 — storage</strong></p>
<div class="mermaid" id="id-4"></div>
<p><strong>Operation type 3 — processing from/to storage</strong></p>
<div class="mermaid" id="id-5"></div>
<p><strong>Operation type 4 — processing from storage to I/O</strong></p>
<div class="mermaid" id="id-6"></div>
<h4 id="structure---top-level">Structure - Top level</h4>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter1-4.png" title="/img/Computer Organization and Architecture/chapter1-4.png" data-thumbnail="/img/Computer Organization and Architecture/chapter1-4.png" data-sub-html="<h2>Structure(Top Level)</h2>">
        
    </a><figcaption class="image-caption">Structure(<code>Top Level</code>)</figcaption>
    </figure>
<h4 id="structure---cpu">Structure - CPU</h4>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter1-5.png" title="/img/Computer Organization and Architecture/chapter1-5.png" data-thumbnail="/img/Computer Organization and Architecture/chapter1-5.png" data-sub-html="<h2>Structure(CPU)</h2>">
        
    </a><figcaption class="image-caption">Structure(<code>CPU</code>)</figcaption>
    </figure>
<h4 id="structure--control-unit">Structure – Control Unit</h4>
<figure><a class="lightgallery" href="/img/Computer%20Organization%20and%20Architecture/chapter1-6.png" title="/img/Computer Organization and Architecture/chapter1-6.png" data-thumbnail="/img/Computer Organization and Architecture/chapter1-6.png" data-sub-html="<h2>Structure(Control)</h2>">
        
    </a><figcaption class="image-caption">Structure(<code>Control</code>)</figcaption>
    </figure>
<h3 id="key-terms">Key terms</h3>
<table>
<thead>
<tr>
<th>Computer</th>
<th style="text-align:left">Computer Organization</th>
<th>Computer Architecture</th>
<th>Family of Computer models</th>
</tr>
</thead>
<tbody>
<tr>
<td>Hierarchical System</td>
<td style="text-align:left">Structure</td>
<td>Function</td>
<td>Peripheral</td>
</tr>
<tr>
<td>Data Processing</td>
<td style="text-align:left">Data Storage</td>
<td>Data Movement</td>
<td>Control</td>
</tr>
<tr>
<td>Central Processing Unit</td>
<td style="text-align:left">Main Memory</td>
<td>I/O</td>
<td>System Interconnection</td>
</tr>
<tr>
<td>Control Unit</td>
<td style="text-align:left">Arithmetic and Logic Unit</td>
<td>Registers</td>
<td>CPU Interconnection</td>
</tr>
</tbody>
</table>
<h3 id="summarize">summarize</h3>
<ul>
<li>
<p><strong>Organization and Architecture</strong></p>
<ul>
<li>
<p><strong>Architecture is those attributes visible to the programmer</strong></p>
<ul>
<li><strong>Instruction set , number of bits used for data representation, I/O mechanisms, addressing techniques</strong></li>
</ul>
</li>
<li>
<p><strong>Organization is how features are implemented</strong></p>
<ul>
<li><strong>Control signals, interfaces, memory technology</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Structure &amp; Function</strong></p>
<ul>
<li>
<p>Structure is the way in which components relate to each other</p>
</li>
<li>
<p>Function is the operation of individual components as part of the structure</p>
</li>
</ul>
</li>
<li>
<p>The top level functions of a computer include data processing, data storage, data movement, and control.</p>
</li>
<li>
<p>The components of a computer include: CPU, memory, I/O, interconnect bus.</p>
</li>
</ul>
]]></description>
</item>
<item>
    <title>OpenCV Chapter7</title>
    <link>https://Jungle430.github.io/posts/opencv/opencv-chapter7/</link>
    <pubDate>Mon, 09 Jan 2023 14:20:53 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/opencv/opencv-chapter7/</guid>
    <description><![CDATA[<h1 id="opencv">OpenCV</h1>
<h2 id="背景建模">背景建模</h2>
<h3 id="帧差法">帧差法</h3>
<p>由于场景中的目标在运动，目标的影像在不同图像帧中的位置不同，该类算法对时间上连续的两帧图像进行差分运算，不同帧对应的像素点相减，判断灰度差的绝对值，当绝对值超过一定阈值时，即可判断为运动目标，从而实现目标的检测功能
$$
\begin{align}
&amp;D_n=|f_n(x,y)-f_{n-1}(x,y)|\newline
&amp;R_n(x,y)=\begin{cases}
&amp;255,D_n(x,y) &gt; T\newline
&amp;0,else\newline
\end{cases}
\end{align}
$$
帧差法非常简单，但是会引入<strong>噪音和空洞(只能判断外部)问题</strong></p>
<h3 id="混合高斯模型">混合高斯模型</h3>
<p>在进行前景检测前，先对背景进行训练，对图像中每个背景采用一个混合高斯模型进行模拟，每个背景的混合高斯模型的个数可以自适应，然后在测试阶段，对新来的像素进行$GMM$匹配，如果该像素能够匹配其中一个高斯，则认为时背景，否则认为是前景。由于整个过程$GMM$模型在不断更新学习中，所以对动态背景有一定的鲁棒性。最后通过对一个有树枝摇摆的动态背景进行前景检测，取得很好的效果</p>
<p>在视频中对于像素点的变化情况应当是符合高斯分布</p>
<p>背景的实际分布应当是和多个高斯分布混合在一起，每个高斯模型也可以带有权重</p>
<h3 id="混合高斯模型学习方法">混合高斯模型学习方法</h3>
<ul>
<li>首先初始化每个高斯模型矩阵参数</li>
<li>取视频中的$T$帧数据图像用来训练高斯混合模型，来了第一个像素之后用它来当做第一个高斯分布</li>
<li>当后面来的像素值时，与前面已有的高斯均值比较，如果该像素点的值与其模型的均值差在3倍的方差内，则属于该分布，并对其进行参数更新</li>
<li>如果下一次来的像素不满足当前高斯分布，<strong>用它来创建一个新的高斯分布</strong></li>
</ul>
<p>最后会生成多个高斯分布，但是最后只会保留3-5个</p>
<h3 id="混合高斯模型测试方法">混合高斯模型测试方法</h3>
<p>在测试阶段，对新来像素点的值与混合高斯模型中的每一个均值进行比较，如果其差值在2倍的方差之间的话，则认为是背景，否则认为是前景。将前景赋值为255，背景赋值为0。这样就形成了一幅前景二值图。</p>
<h3 id="代码">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">video</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="s2">&#34;video path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 形态学操作需要使用</span>
</span></span><span class="line"><span class="cl"><span class="n">kernel</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_ELLIPSE</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建混合高斯模型用于背景建模</span>
</span></span><span class="line"><span class="cl"><span class="n">fgbg</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">createBackgroundSubtractorMOG2</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">video</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">frame</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="n">fgmask</span> <span class="o">=</span> <span class="n">fgbg</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>  <span class="c1"># 混合高斯模型应用</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 形态学开运算去噪点</span>
</span></span><span class="line"><span class="cl">    <span class="n">fgmask</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">fgmask</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_OPEN</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 寻找视频中的轮廓</span>
</span></span><span class="line"><span class="cl">    <span class="n">contours</span><span class="p">,</span> <span class="n">hierachy</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">fgmask</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">RETR_EXTERNAL</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CHAIN_APPROX_SIMPLE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">contours</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">perimeter</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">contourArea</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">perimeter</span> <span class="o">&gt;</span> <span class="mi">3000</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 找到一个直矩形</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">boundingRect</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 画出矩形</span>
</span></span><span class="line"><span class="cl">            <span class="n">cv2</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">w</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">h</span><span class="p">),</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;frame&#39;</span><span class="p">,</span> <span class="n">frame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;fgmask&#39;</span><span class="p">,</span> <span class="n">fgmask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">27</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">video</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="光流估计">光流估计</h2>
<p>光流是空间运动物体在观测成像平面上的像素运动的“瞬时速度”，根据各个像素点的速度矢量特征，可以对图像进行动态分析，例如目标跟踪</p>
<ul>
<li>亮度恒定：同一点随着时间的变化，其亮度不会发生改变</li>
<li>小运动：随着时间的变化不会引起位置的剧烈变化，只有小运动的情况下才能用前后帧之间单位位置变化引起的灰度变化去近似灰度对位置的偏导数</li>
<li>空间一致：一个场景上邻近的店投影到图像上也是邻近点，且邻近点速度一致。因为光流法基本方程约束只有一个，而要求x,y方向的速度，有两个未知变量，所以需要联立n多个方程求解</li>
</ul>
<h3 id="lucas-kanade算法">$Lucas-Kanade$算法</h3>
<p>约束方程
$$
\begin{align}
I(x,y,t)&amp;=I(x+dx,y+dy,t+dt)\newline
&amp;=I(x,y,t)+\frac{\partial I}{\partial x}dx+\frac{\partial I}{\partial y}dy+\frac{\partial I}{\partial t}dt\newline
\end{align}
$$</p>
<p>$$
I_xdx+I_ydy+I_tdt=0\newline
I_x\frac{dx}{dt}+I_y\frac{dy}{dt}=-I_t\newline
\frac{dx}{dt}=u\ and\ \frac{dy}{dt}=v\newline
I_xu+I_yv=-I_t\newline
\rightarrow \begin{bmatrix}I_x\ I_y\end{bmatrix}
\begin{bmatrix}u\newline v\end{bmatrix}=-I_t\newline
$$</p>
<p>如何求解方程组呢？一个像素点不够，物体移动过程中还有那些特性？</p>
<p>空间一致$\rightarrow$周围点速度一致，可以增加方程组的数量</p>
<p>将一个$kernel$之中的所有点用来列方程组
$$
\begin{bmatrix}
&amp;I_{x1}\ I_{y1}\newline
&amp;I_{x2}\ I_{y2}\newline
&amp;\vdots
\end{bmatrix}
\begin{bmatrix}
u\newline
v\newline
\end{bmatrix}=
-\begin{bmatrix}
&amp;I_{t1}\newline
&amp;I_{t2}\newline
&amp;\vdots
\end{bmatrix}
$$
最小二乘法（机器学习线性回归）
$$
A\vec u=b\newline
\downarrow\newline
A^TA\vec u=A^Tb\newline
\downarrow\newline
\vec u=(A^TA)^{-1}A^Tb\newline
A^{T}A=
\begin{bmatrix}
&amp;\sum I_x^2\ &amp;\sum I_xI_y\newline
&amp;\sum I_xI_y\ &amp;\sum I_y^2\newline
\end{bmatrix}
$$
$A^TA$可逆条件,设两个特征值为$\lambda_1,\lambda_2$,两个值<strong>都比较大</strong>的时候可逆**（角点也是这个判定条件）**，所以最后关注的点大部分都是角点</p>
<h3 id="代码-1">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">calcOpticalFlowPyrLK</span><span class="p">(</span><span class="n">prevImg</span><span class="p">,</span> <span class="n">nextImg</span><span class="p">,</span> <span class="n">prevPts</span><span class="p">,</span> <span class="n">nextPts</span><span class="p">,</span> <span class="n">status</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">err</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">winSize</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">maxLevel</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">criteria</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">minEigThreshold</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参数</p>
<ul>
<li>
<p>prevImage：前一帧图像</p>
</li>
<li>
<p>nextImage：当前帧图像</p>
</li>
<li>
<p>prevPts：待跟踪的特征点向量</p>
</li>
<li>
<p>winSize：搜索窗口的大小</p>
</li>
<li>
<p>maxLevel：最大的金字塔层数</p>
</li>
</ul>
<p>返回</p>
<ul>
<li>nextPts：输出跟踪特征点向量</li>
<li>status：特征点是否找到，找到状态为1，未找到状态为0</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">video</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="s2">&#34;video path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 角点检测所需参数</span>
</span></span><span class="line"><span class="cl"><span class="n">feature_params</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">maxCorners</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">qualityLevel</span><span class="o">=</span><span class="mf">0.3</span><span class="p">,</span> <span class="n">minDistance</span><span class="o">=</span><span class="mi">7</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># lucas_kanade参数</span>
</span></span><span class="line"><span class="cl"><span class="n">lk_params</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">winSize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">maxLevel</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 随机颜色条</span>
</span></span><span class="line"><span class="cl"><span class="n">color</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 拿到第一帧图像</span>
</span></span><span class="line"><span class="cl"><span class="n">old_ret</span><span class="p">,</span> <span class="n">old_frame</span> <span class="o">=</span> <span class="n">video</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">old_gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">old_frame</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 返回所有检测特征点，需要输入图像，角点最大数量（效率），品质因子（特征值越大的越好，来筛选）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 距离相当于这区间有比这个角点强的，就不要这个弱的了</span>
</span></span><span class="line"><span class="cl"><span class="n">p0</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">goodFeaturesToTrack</span><span class="p">(</span><span class="n">old_gray</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">**</span><span class="n">feature_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建一个mask</span>
</span></span><span class="line"><span class="cl"><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">old_frame</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">video</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">frame</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="n">frame_gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 需要传入前一帧和当前图像以及前一帧检测到的角点</span>
</span></span><span class="line"><span class="cl">    <span class="n">p1</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">calcOpticalFlowPyrLK</span><span class="p">(</span><span class="n">old_gray</span><span class="p">,</span> <span class="n">frame_gray</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="o">**</span><span class="n">lk_params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># st = 1表示</span>
</span></span><span class="line"><span class="cl">    <span class="n">good_new</span> <span class="o">=</span> <span class="n">p1</span><span class="p">[</span><span class="n">st</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">good_old</span> <span class="o">=</span> <span class="n">p0</span><span class="p">[</span><span class="n">st</span> <span class="o">==</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 绘制轨迹</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">new</span><span class="p">,</span> <span class="n">old</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">good_new</span><span class="p">,</span> <span class="n">good_old</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">new</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">old</span><span class="o">.</span><span class="n">ravel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)),</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">c</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">d</span><span class="p">)),</span> <span class="n">color</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">frame</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)),</span> <span class="mi">5</span><span class="p">,</span> <span class="n">color</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">tolist</span><span class="p">(),</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;frame&#39;</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">k</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">27</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Update</span>
</span></span><span class="line"><span class="cl">    <span class="n">old_gray</span> <span class="o">=</span> <span class="n">frame_gray</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">p0</span> <span class="o">=</span> <span class="n">good_new</span><span class="o">.</span><span class="n">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">video</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>OpenCV Chapter6</title>
    <link>https://Jungle430.github.io/posts/opencv/opencv-chapter6/</link>
    <pubDate>Sat, 07 Jan 2023 13:43:02 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/opencv/opencv-chapter6/</guid>
    <description><![CDATA[<h1 id="opencv">OpenCV</h1>
<h2 id="图像特征-harris角点检测">图像特征-harris角点检测</h2>
<h3 id="角点定义">角点定义</h3>
<p>角点检测又称为特征点检测，是图像处理和计算机视觉中用来获取局部特征点的一类方法，广泛应用于运动检测、图像匹配、视频跟踪等领域。角点可以简单地定义为轮廓之间的交点，严格地定义是在两个主方向上的特征点，即在两个方向上灰度变化剧烈。通常具有以下特征：</p>
<ul>
<li>角点附近的像素点不论在梯度方向上还是梯度幅值上都存在着较大的变化</li>
<li>对于某一场景，当视角发生变化时，其任具备稳定性质的特征</li>
</ul>
<h3 id="算法原理">算法原理</h3>
<p>角点检测的基本思想就是用固定窗口在图像上沿各个方向进行滑动，比较滑动前后窗口中像素点的灰度变化，如果在任意方向上滑动窗口内都存在较大的灰度变化，则认为该窗口中存在角点；如果任何方向上都不变化，则是均匀区域；如果灰度只在一个方向上变化，则可能是图像边缘。</p>
<p>对于图像$I(x, y)$（主要指的是卷积核部分的区域）,当在点$(x, y)$处平移$(\Delta x,\Delta y)$后的相似性:</p>
<p>$c(x, y;\Delta x, \Delta y) = \sum_{(u, v) \in W(x, y)}W(u, v)(I(u, v)-I(u + \Delta x, v + \Delta y))^2\newline$</p>
<p>基于泰勒展开，对图像$I(x, y)$在平移$(\Delta x, \Delta y)$后进行一阶近似</p>
<p>$I(u+\Delta x, v + \Delta y)=I(u, v)+I_x(u, v)\Delta x+I_y(u, v)\Delta y + O(\Delta x^2, \Delta y^2) \approx I(u, v)+I_x(u, v)\Delta x+I_y(u, v)\Delta y\newline$</p>
<p>其中$I_x, I_y$是$I(x, y)$的偏导数</p>
<p>近似可得:</p>
<p>$c(x, y;\Delta x, \Delta y)\approx \sum_w(I_x(u, v)\Delta x+I_y(u, v)\Delta y)^2=[\Delta x, \Delta y]M(x, y)\begin{bmatrix}\Delta x\newline\Delta y\end{bmatrix}\newline$</p>
<p>其中$M$</p>
<p>$$
M(x, y)=\sum_w\begin{bmatrix}I_x(x, y)^2\ \  I_x(x, y)I_y(x, y)\newline I_x(x, y)I_y(x, y)\ \ I_y(x, y)^2\end{bmatrix}=\begin{bmatrix}\sum_w I_x(x, y)^2\ \ \sum_w I_x(x, y)I_y(x, y)\newline \sum_w I_x(x, y)I_y(x, y)\ \ \sum_w I_y(x, y)^2\end{bmatrix}=\begin{bmatrix}A\ \ C\newline C\ \ B\end{bmatrix}\newline
$$</p>
<p>化简可得$c(x, y;\Delta x, \Delta y)\approx A\Delta x^2+2C\Delta x\Delta y+B\Delta y^2\newline$</p>
<p>其中$A=\sum_w I_x^2, B=\sum_wI_y^2, C=\sum_wI_xI_y\newline$</p>
<p>二次项函数本质上就是一个椭圆函数，椭圆方程为：$[\Delta x, \Delta y]M(x, y)\begin{bmatrix}\Delta x\newline\Delta y\end{bmatrix}=1\newline$</p>
<p>$W(x, y)$是以点$(x, y)$为中心的窗口，既可以是函数，也可以是高斯加权函数</p>
<ul>
<li>平坦区域：在各方向移动，窗口内像素值均没有太大变化</li>
<li>边缘特征，如果沿着水平方向移动(梯度方向)，像素值会发生跳变；如果沿着边缘移动(平行于边缘) ，像素值不会发生变化</li>
<li>角：不管你把它朝哪个方向移动，像素值都会发生很大变化</li>
</ul>
<h3 id="算法流程">算法流程</h3>
<ol>
<li>滤波、平滑，避免出现阶跃函数。</li>
<li>计算图像梯度。</li>
<li>计算每个像素位置的Harris矩阵M。</li>
<li>计算每个像素位置的角点响应函数R。</li>
<li>设置门限R，寻找响应函数的局部最大值(非最大抑制)</li>
</ol>
<h3 id="代码">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">cornerHarris</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">blockSize</span><span class="p">,</span> <span class="n">ksize</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="n">borderType</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参数说明：
src： 输入图像，须为float32型的单通道8位图像
blockSize： 邻域大小，即滑动窗口的尺寸
ksize： Sobel求导中使用的窗口大小，注意必须为奇数
k： Harris角点检测方程中的自由参数,推荐范围为[0.04, 0.06]，基本0.04</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;img shape = </span><span class="si">{</span><span class="n">img</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># (512, 512, 3)</span>
</span></span><span class="line"><span class="cl"><span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>  <span class="c1"># 转化成灰度图</span>
</span></span><span class="line"><span class="cl"><span class="n">gray</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cornerHarris</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mf">0.04</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;dst shape = </span><span class="si">{</span><span class="n">dst</span><span class="o">.</span><span class="n">shape</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span> <span class="c1"># (512, 512)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span><span class="p">[</span><span class="n">dst</span> <span class="o">&gt;</span> <span class="mf">0.01</span> <span class="o">*</span> <span class="n">dst</span><span class="o">.</span><span class="n">max</span><span class="p">()]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">]</span>  <span class="c1"># 筛选出来符合值</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;dst&#39;</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter6-1.png" title="/img/Opencv/chapter6-1.png" data-thumbnail="/img/Opencv/chapter6-1.png" data-sub-html="<h2>OpenCV(角点检测)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>角点检测</code>)</figcaption>
    </figure>
<p><strong>以上转载部分来自于CSDN幼儿园刘大壮的文章<a href="https://blog.csdn.net/qq_53751944/article/details/125993416" target="_blank" rel="noopener noreffer">《图像特征-Harris角点检测》</a>，侵删</strong></p>
<h2 id="scale-invariant-feature-transformsift">Scale Invariant Feature Transform(SIFT)</h2>
<h3 id="图像尺度空间">图像尺度空间</h3>
<p>在一定的范围内，无论物体是大还是小，人眼都可以分辨出来，然而计算机要有相同的能力却很难，所以要让机器能够对物体在不同尺度下有一个统一的认知，就需要考虑图像在不同尺度下都存在的特点</p>
<p>尺度空间的获取通常使用<strong>高斯模糊</strong>来实现</p>
<p>$I(x, y)$是一个图像
$$
\begin{align}
&amp;L(x, y, \sigma)=G(x, y, \sigma) * I(x, y)\newline
&amp;G(x, y, \sigma)=\frac {1}{2\pi \sigma^2}e^{-\frac{x^2+y^2}{2\sigma^2}}\newline
\end{align}
$$
$\sigma$控制模糊的程度,越大模糊效果越强</p>
<h3 id="高斯差分金字塔difference-of-gaussian">高斯差分金字塔（Difference of Gaussian)</h3>
<ul>
<li>首先先对图像进行差分</li>
</ul>
<figure><a class="lightgallery" href="/img/Opencv/chapter6-2.png" title="/img/Opencv/chapter6-2.png" data-thumbnail="/img/Opencv/chapter6-2.png" data-sub-html="<h2>OpenCV(图像差分)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>图像差分</code>)</figcaption>
    </figure>
<p>$DOG$定义公式</p>
<p>$$
D(x, y, \sigma)=[G(x, y, k\sigma)-G(x, y, \sigma)] * I(x, y)=L(x, y, k\sigma)-L(x, y, \sigma)\newline
$$</p>
<h3 id="dog空间极值检测">DOG空间极值检测</h3>
<p>为了寻找尺度空间的极值点，每个像素点要和其图像域（同一尺度空间）和尺度域（相邻的尺度空间）的所有相邻点进行比较，当其大于（或者小于）所有相邻点时，该点就是极值点。比如如果核的大小是$3\times 3$,中间的检测点就要和所在图像的$3\times 3$领域8个像素点，以及其相邻的上下两层的$3\times 3$领域18个像素点，共26个像素点进行比较</p>
<h3 id="关键点的精确定位">关键点的精确定位</h3>
<p>这些候选关键点是$DOG$空间的局部极值点，而且这些极值点均为离散的点，精确定位极值点的一种方法是，对尺度空间$DOG$函数进行曲线拟合，计算其极值点，从而实现关键点的精确定位</p>
<p>可以用泰勒级数进行展开,离散的导数用差分代替微分计算
$$
f(x)\approx f(0)+f^`(0)x+\frac{f^{``}(0)}{2}x^2\newline
$$</p>
<h3 id="消除边界响应">消除边界响应</h3>
<p>$$
Hessian\ matrix\rightarrow H(x, y)=\begin{bmatrix}&amp;D_{xx}(x, y)\ D_{xy}(x, y)\newline&amp;D_{xy}(x, y)\ D_{yy}(x, y)\newline\end{bmatrix}\newline
$$</p>
<p>令$\alpha=\lambda_{max}$为最大的特征值，$\beta=\lambda_{min}$为最小的特征值
$$
\begin{align}
&amp;T_r(H)=D_{xx}+D_{yy}=\alpha+\beta\newline
&amp;Det(H)=D_{xx}D_{yy}-(D_{xy})^2=\alpha\beta\newline
&amp;\frac {T_r(H)^2}{Det(H)}=\frac {(\alpha+\beta)^2}{\alpha\beta}=\frac {(\gamma + 1)^2}{\gamma}\newline
\end{align}
$$
$Lowe$在论文中给出了$\gamma=10$，也就是说对于主曲率比值大于10的特征点将会被删除</p>
<h3 id="特征点的主方向">特征点的主方向</h3>
<p>每个点$L(x, y)$的梯度的模$m(x, y)$以及方向$\theta(x, y)$
$$
\begin{align}
&amp;m(x, y)=\sqrt{[L(x+1, y)-L(x-1, y)]^2+[L(x, y+1)-L(x,, y-1)]^2}\newline
&amp;\theta(x, y)=\arctan(\frac {L(x, y+1)-L(x,, y-1)}{L(x+1, y)-L(x-1, y)})\newline
\end{align}
$$
每个特征点可以得到三个信息$((x, y), \sigma, \theta)$,即位置，尺度和方向，具有多个方向的关键点可以被复制成多份，然后将方向值分别赋给复制后的特征点，一个特征点产生了多个坐标，尺度相等，但是方向不同的特征点</p>
<h3 id="生成特征描述">生成特征描述</h3>
<p>在完成关键点的梯度计算后，使用直方图统计邻域内像素和梯度的方向</p>
<p>为了保证特征矢量的旋转不变性，要以特征点为中心，在附近邻域内将坐标旋转$\theta$角度，即将坐标轴旋转为特征点的主方向</p>
<p>$$
\begin{bmatrix}
&amp;x^&rsquo;\newline
&amp;y^&rsquo;\newline
\end{bmatrix}=\begin{bmatrix}
&amp;\cos \theta\ -\sin \theta\newline
&amp;\sin \theta\ \cos \theta\newline
\end{bmatrix}\begin{bmatrix}
&amp;x\newline
&amp;y\newline
\end{bmatrix}
$$</p>
<p>旋转之后的主方向为中心取$8\times 8$的窗口，求每个像素的梯度值和方向，箭头方向代表梯度方向，长度代表梯度幅值，然后利用高斯窗口对其进行加权运算，最后在每个$4\times 4$的小块上绘制8个方向的梯度直方图，计算每个梯度方向的累加值，即可形成一个种子点，即每个特征由四个种子点组成，每个种子点会有8个方向的向量信息</p>
<p>论文中建议对每个关键点使用$4\times 4$共16个种子点来描述，这样一个关键点就会产生128$[4(h),4(w),8(number\ of\ the\ vector)]$维的$SIFT$特征向量</p>
<h3 id="opencv中的sift函数">OpenCV中的SIFT函数</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">__version__</span><span class="p">)</span>  <span class="c1"># 4.6.0 not use the xfeatures2d.SIFT_create()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -&gt;(The patent has expired and the function has been deprecated), use the SIFT_create()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>  <span class="c1"># 转化成灰度图</span>
</span></span><span class="line"><span class="cl"><span class="n">sift</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">SIFT_create</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">kp</span> <span class="o">=</span> <span class="n">sift</span><span class="o">.</span><span class="n">detect</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>  <span class="c1"># 关键点</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">drawKeypoints</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="n">kp</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;drawKeyPoints&#39;</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter6-3.png" title="/img/Opencv/chapter6-3.png" data-thumbnail="/img/Opencv/chapter6-3.png" data-sub-html="<h2>OpenCV(SIFT)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>SIFT</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 计算特征</span>
</span></span><span class="line"><span class="cl"><span class="n">kp</span><span class="p">,</span> <span class="n">des</span> <span class="o">=</span> <span class="n">sift</span><span class="o">.</span><span class="n">compute</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="n">kp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">kp</span><span class="p">)</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">des</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">des</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">output
</span></span></span><span class="line"><span class="cl"><span class="s1">(789,)
</span></span></span><span class="line"><span class="cl"><span class="s1">(789, 128)
</span></span></span><span class="line"><span class="cl"><span class="s1">[ 47.  55.   9.  35. 117.  37.   0.   0. 143. 143.   2.   2.   2.   1.
</span></span></span><span class="line"><span class="cl"><span class="s1">   0.   0.  23.  23.   0.   0.   0.   0.   0.   0.   0.   0.   0.   0.
</span></span></span><span class="line"><span class="cl"><span class="s1">   0.   0.   0.   0.  36.  38.  64. 143.  40.   7.   1.   5. 143. 143.
</span></span></span><span class="line"><span class="cl"><span class="s1">  11.   8.   2.   0.   0.   9. 118.  23.   0.   0.   0.   0.   0.   1.
</span></span></span><span class="line"><span class="cl"><span class="s1">   1.   0.   0.   0.   0.   0.   0.   0.  36.   3.   9.  23.   7.  28.
</span></span></span><span class="line"><span class="cl"><span class="s1">  45.  68. 143.   8.   1.   0.   0.   0.   5. 143. 124.   1.   0.   0.
</span></span></span><span class="line"><span class="cl"><span class="s1">   0.   0.   0.  25.   1.   0.   0.   0.   0.   0.   0.   0.  52.   3.
</span></span></span><span class="line"><span class="cl"><span class="s1">   0.   0.   0.   4.  23. 119.  91.   0.   0.   0.   0.   0.   3. 143.
</span></span></span><span class="line"><span class="cl"><span class="s1">  26.   0.   0.   0.   0.   0.   1.  30.   0.   0.   0.   0.   0.   0.
</span></span></span><span class="line"><span class="cl"><span class="s1">   0.   0.]
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="特征匹配">特征匹配</h2>
<h3 id="brute-force蛮力匹配">Brute-Force蛮力匹配</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img1 path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img2 path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sift</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">SIFT_create</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kp1</span><span class="p">,</span> <span class="n">des1</span> <span class="o">=</span> <span class="n">sift</span><span class="o">.</span><span class="n">detectAndCompute</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>  <span class="c1"># function -&gt; 特征点，特征向量</span>
</span></span><span class="line"><span class="cl"><span class="n">kp2</span><span class="p">,</span> <span class="n">des2</span> <span class="o">=</span> <span class="n">sift</span><span class="o">.</span><span class="n">detectAndCompute</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">crossCheck表示两个特征点要互相匹配，例如A中的第i个特征点与B中第j个特征点最近的
</span></span></span><span class="line"><span class="cl"><span class="s1">并且B中的第j个特征点到A中的第i个特征点也是(1对1)
</span></span></span><span class="line"><span class="cl"><span class="s1">此时计算方法为归一化数组(欧几里得距离) -&gt; 默认参数:NORM_L2
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bf</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">BFMatcher_create</span><span class="p">(</span><span class="n">crossCheck</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 一对一的匹配</span>
</span></span><span class="line"><span class="cl"><span class="n">matches</span> <span class="o">=</span> <span class="n">bf</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">des1</span><span class="p">,</span> <span class="n">des2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">matches</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">matches</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">distance</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">drawMatches</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">kp1</span><span class="p">,</span> <span class="n">img2</span><span class="p">,</span> <span class="n">kp2</span><span class="p">,</span> <span class="n">matches</span><span class="p">[:</span><span class="mi">50</span><span class="p">],</span> <span class="kc">None</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter6-4.png" title="/img/Opencv/chapter6-4.png" data-thumbnail="/img/Opencv/chapter6-4.png" data-sub-html="<h2>蛮力匹配(一对一)</h2>">
        
    </a><figcaption class="image-caption">蛮力匹配(<code>一对一</code>)</figcaption>
    </figure>
<h3 id="k对最佳匹配">K对最佳匹配</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img1 path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img2 path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sift</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">SIFT_create</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kp1</span><span class="p">,</span> <span class="n">des1</span> <span class="o">=</span> <span class="n">sift</span><span class="o">.</span><span class="n">detectAndCompute</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>  <span class="c1"># function -&gt; 特征点，特征向量</span>
</span></span><span class="line"><span class="cl"><span class="n">kp2</span><span class="p">,</span> <span class="n">des2</span> <span class="o">=</span> <span class="n">sift</span><span class="o">.</span><span class="n">detectAndCompute</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bf</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">BFMatcher_create</span><span class="p">(</span><span class="n">crossCheck</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># k对匹配，注意上面的crossCheck要修正为False,否则1对1与下面k对匹配不符</span>
</span></span><span class="line"><span class="cl"><span class="n">matches</span> <span class="o">=</span> <span class="n">bf</span><span class="o">.</span><span class="n">knnMatch</span><span class="p">(</span><span class="n">des1</span><span class="p">,</span> <span class="n">des2</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">good</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">distance</span> <span class="o">&lt;</span> <span class="mf">0.75</span> <span class="o">*</span> <span class="n">n</span><span class="o">.</span><span class="n">distance</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">good</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">m</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">drawMatchesKnn</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">kp1</span><span class="p">,</span> <span class="n">img2</span><span class="p">,</span> <span class="n">kp2</span><span class="p">,</span> <span class="n">good</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s2">&#34;result&#34;</span><span class="p">,</span> <span class="n">img3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果希望在数据结构方面优化，可以使用cv2.FlannBasedMatcher</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter6-5.png" title="/img/Opencv/chapter6-5.png" data-thumbnail="/img/Opencv/chapter6-5.png" data-sub-html="<h2>蛮力匹配K对)</h2>">
        
    </a><figcaption class="image-caption">蛮力匹配<code>K对</code>)</figcaption>
    </figure>
<p>缺点：会出现一些匹配错误的点</p>
<h3 id="随机抽样一致算法random-sample-consensusransac">随机抽样一致算法($Random\ sample\ consensus,RANSAC$)</h3>
<p>数据拟合</p>
<ul>
<li>最小二乘法$\rightarrow$尽可能多的满足所有的数据点，部分异常数据（放在识别上就是异常点）会影响线的走向</li>
<li>$RANSAC\rightarrow$能够减少异常点的干扰，得到的拟合线更符合实际</li>
</ul>
<h4 id="原理">原理</h4>
<ul>
<li>选择初始样本点进行拟合，给定一个容忍范围，不断进行迭代</li>
<li>每一次拟合后，容差范围内都由对应的数据点数，找出数据点个数最多的情况，就是最终的拟合效果</li>
</ul>
<h3 id="单应性矩阵">单应性矩阵</h3>
<p>$$
H=\begin{bmatrix}
&amp;h_{11}\ h_{12}\ h_{13}\newline
&amp;h_{21}\ h_{22}\ h_{23}\newline
&amp;h_{31}\ h_{32}\ 1\newline
\end{bmatrix}
$$</p>
<p>$$
\begin{bmatrix}
&amp;x^&rsquo;\newline
&amp;y^&rsquo;\newline
&amp;1
\end{bmatrix}=\begin{bmatrix}
&amp;h_{11}\ h_{12}\ h_{13}\newline
&amp;h_{21}\ h_{22}\ h_{23}\newline
&amp;h_{31}\ h_{32}\ 1\newline
\end{bmatrix}\begin{bmatrix}
&amp;x\newline
&amp;y\newline
&amp;1\newline
\end{bmatrix}
$$</p>
<p>由线性代数知识可得，至少需要4对$(x^&rsquo;,y^&rsquo;)$的数据才能解该方程，为了防止误差点的干扰，筛选这些点需要使用$RANSAC$算法</p>
]]></description>
</item>
<item>
    <title>OpenCV Chapter5</title>
    <link>https://Jungle430.github.io/posts/opencv/opencv-chapter5/</link>
    <pubDate>Wed, 04 Jan 2023 18:54:56 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/opencv/opencv-chapter5/</guid>
    <description><![CDATA[<h1 id="opencv">OpenCV</h1>
<h2 id="直方图">直方图</h2>
<p>统计每一个像素值出现的次数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">calcHist</span><span class="p">(</span><span class="n">images</span><span class="p">,</span> <span class="n">channels</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">histSize</span><span class="p">,</span> <span class="n">ranges</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>images：原图像图像格式为uint8或float32.当传入函数时应用中括号[]括起来，例如[img]，通常使用二值图</p>
</li>
<li>
<p>channels：同样用中括号，如果图像是灰度图则传入[0]，如果是彩色图，则可以传入$[0]\ or\ [1]\ or\ [2]$，它们分别对应着$BGR\newline$</p>
</li>
<li>
<p>mask：掩模图像。统计整幅图像的直方图就将其设为None。但是如果想要统计图像的某一分的直方图你就制作一个掩模图像并且使用它</p>
</li>
<li>
<p>histSize：BIN数目，也应该用中括号括来(横轴取值范围，通常用[0,256])</p>
</li>
<li>
<p>ranges：像素值范围为[0,256]</p>
</li>
</ul>
<p>二值图</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">hist</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">calcHist</span><span class="p">([</span><span class="n">img</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="kc">None</span><span class="p">,</span> <span class="p">[</span><span class="mi">256</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">hist</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># -&gt; [256, 1]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">ravel</span><span class="p">(),</span> <span class="mi">256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-1.png" title="/img/Opencv/chapter5-1.png" data-thumbnail="/img/Opencv/chapter5-1.png" data-sub-html="<h2>OpenCV(直方图)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>直方图</code>)</figcaption>
    </figure>
<p>三通道</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">color</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;g&#39;</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">color</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">hist</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">calcHist</span><span class="p">([</span><span class="n">img</span><span class="p">],</span> <span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="kc">None</span><span class="p">,</span> <span class="p">[</span><span class="mi">256</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">hist</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">col</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-2.png" title="/img/Opencv/chapter5-2.png" data-thumbnail="/img/Opencv/chapter5-2.png" data-sub-html="<h2>OpenCV(直方图)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>直方图</code>)</figcaption>
    </figure>
<h3 id="mask操作">mask操作</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 创建mask</span>
</span></span><span class="line"><span class="cl"><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">2</span><span class="p">],</span> <span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mask</span><span class="p">[</span><span class="mi">100</span><span class="p">:</span><span class="mi">300</span><span class="p">,</span> <span class="mi">100</span><span class="p">:</span><span class="mi">400</span><span class="p">]</span> <span class="o">=</span> <span class="mi">255</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">masked_img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">bitwise_and</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">img</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">masked_img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">hist_full</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">calcHist</span><span class="p">([</span><span class="n">img</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="kc">None</span><span class="p">,</span> <span class="p">[</span><span class="mi">256</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">hist_mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">calcHist</span><span class="p">([</span><span class="n">img</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">mask</span><span class="p">,</span> <span class="p">[</span><span class="mi">256</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">221</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">222</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">223</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">masked_img</span><span class="p">,</span> <span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">224</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">hist_full</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">hist_mask</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-3.png" title="/img/Opencv/chapter5-3.png" data-thumbnail="/img/Opencv/chapter5-3.png" data-sub-html="<h2>OpenCV(mask操作)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>mask操作</code>)</figcaption>
    </figure>
<h2 id="均衡化原理">均衡化原理</h2>
<h3 id="直方图均衡化">直方图均衡化</h3>
<p>将概率转化为累积概率</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">211</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">ravel</span><span class="p">(),</span> <span class="mi">256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">212</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">equ</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">equalizeHist</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">hist</span><span class="p">(</span><span class="n">equ</span><span class="o">.</span><span class="n">ravel</span><span class="p">(),</span> <span class="mi">256</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-4.png" title="/img/Opencv/chapter5-4.png" data-thumbnail="/img/Opencv/chapter5-4.png" data-sub-html="<h2>OpenCV(直方图均值化)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>直方图均值化</code>)</figcaption>
    </figure>
<p>如果均衡化效果更好$\rightarrow$分块均衡，但是此时要注意局部噪音点的影响</p>
<h3 id="自适应直方图均值化">自适应直方图均值化</h3>
<p>OpenCV在分块进行均值化操作的时候会对各模块边界进行一些线性插值处理，防止均值化之后各模块边界过于明显</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">createCLAHE</span><span class="p">([,</span> <span class="n">clipLimit</span><span class="p">[,</span> <span class="n">tileGridSize</span><span class="p">]])</span> <span class="err">→</span> <span class="n">retval</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>clipLimit：颜色对比度的阈值，可选项，默认值 8</li>
<li>titleGridSize：局部直方图均衡化的模板（邻域）大小，可选项，默认值 (8,8)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">clahe</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">createCLAHE</span><span class="p">(</span><span class="n">clipLimit</span><span class="o">=</span><span class="mf">2.0</span><span class="p">,</span> <span class="n">tileGridSize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">res_clahe</span> <span class="o">=</span> <span class="n">clahe</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">img</span><span class="p">,</span> <span class="n">res_clahe</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-5.png" title="/img/Opencv/chapter5-5.png" data-thumbnail="/img/Opencv/chapter5-5.png" data-sub-html="<h2>OpenCV(自适应直方图均值化)</h2>">
        
    </a><figcaption class="image-caption">OpenCV(<code>自适应直方图均值化</code>)</figcaption>
    </figure>
<h2 id="傅里叶变换">傅里叶变换</h2>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/19763358" target="_blank" rel="noopener noreffer">傅里叶分析之掐死教程（完整版）更新于2014.06.06</a>（引用<code>Heinrich</code>的知乎文章，侵删）</p>
</blockquote>
<h3 id="傅里叶变换的作用">傅里叶变换的作用</h3>
<ul>
<li>高频：变化剧烈的灰度分量，例如边界</li>
<li>低频：变化缓慢的灰度分量，例如一片大海</li>
</ul>
<h3 id="滤波">滤波</h3>
<ul>
<li>低通滤波器：只保留低频，会使得图像模糊</li>
<li>高通滤波器：只保留高频，会使得图像细节增强</li>
</ul>
<h3 id="代码">代码</h3>
<h4 id="低通滤波器">低通滤波器</h4>
<ul>
<li>
<p>opencv中主要就是$\rightarrow (执行傅里叶变换)$cv2.dft()和$\rightarrow (执行傅里叶逆变换)$cv2.idft()，<strong>输入图像需要先转换成np.float32格式</strong></p>
</li>
<li>
<p>得到的结果中得频率为0得部分会在左上角，<strong>通常要转换到中心位置，可以通过shift变换来实现</strong></p>
</li>
<li>
<p>cv2.dft()返回的结果是双通道的（实部，虚部），通常还需要转换成图像格式才能展示(0, 255)</p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img_float32</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>  <span class="c1"># 格式转换</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dft</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">dft</span><span class="p">(</span><span class="n">img_float32</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">DFT_COMPLEX_OUTPUT</span><span class="p">)</span>  <span class="c1"># 执行傅里叶变换</span>
</span></span><span class="line"><span class="cl"><span class="n">dft_shift</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fftshift</span><span class="p">(</span><span class="n">dft</span><span class="p">)</span>  <span class="c1"># 进行shift变换</span>
</span></span><span class="line"><span class="cl"><span class="n">magnitude_spectrum</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="n">np</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">magnitude</span><span class="p">(</span><span class="n">dft_shift</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">dft_shift</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">1</span><span class="p">]))</span>  <span class="c1"># 得到灰度图能表示的形式</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 由于结果非常小，所以需要借助 20 * np.log进行映射</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">121</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Input Image&#39;</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([]),</span> <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">122</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">magnitude_spectrum</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s1">&#39;Magnitude Spectrum&#39;</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([]),</span> <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-6.png" title="/img/Opencv/chapter5-6.png" data-thumbnail="/img/Opencv/chapter5-6.png" data-sub-html="<h2>傅里叶变换(前后对比)</h2>">
        
    </a><figcaption class="image-caption">傅里叶变换(<code>前后对比</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img_float32</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>  <span class="c1"># 格式转换</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dft</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">dft</span><span class="p">(</span><span class="n">img_float32</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">DFT_COMPLEX_OUTPUT</span><span class="p">)</span>  <span class="c1"># 执行傅里叶变换</span>
</span></span><span class="line"><span class="cl"><span class="n">dft_shift</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fftshift</span><span class="p">(</span><span class="n">dft</span><span class="p">)</span>  <span class="c1"># 进行shift变换</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">shape</span>
</span></span><span class="line"><span class="cl"><span class="n">crow</span><span class="p">,</span> <span class="n">ccol</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">rows</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># 中心位置</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 低通滤波</span>
</span></span><span class="line"><span class="cl"><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mask</span><span class="p">[</span><span class="n">crow</span> <span class="o">-</span> <span class="mi">30</span><span class="p">:</span><span class="n">crow</span> <span class="o">+</span> <span class="mi">30</span><span class="p">,</span> <span class="n">ccol</span> <span class="o">-</span> <span class="mi">30</span><span class="p">:</span><span class="n">ccol</span> <span class="o">+</span> <span class="mi">30</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># 掩码，只保留中间周围</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># IDFT(逆变换)</span>
</span></span><span class="line"><span class="cl"><span class="n">fshift</span> <span class="o">=</span> <span class="n">dft_shift</span> <span class="o">*</span> <span class="n">mask</span>  <span class="c1"># 是1的保留下来，其余归零</span>
</span></span><span class="line"><span class="cl"><span class="n">f_ishift</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifftshift</span><span class="p">(</span><span class="n">fshift</span><span class="p">)</span>  <span class="c1"># ishift(shift变换的逆运算）</span>
</span></span><span class="line"><span class="cl"><span class="n">img_back</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">idft</span><span class="p">(</span><span class="n">f_ishift</span><span class="p">)</span>  <span class="c1"># 还原</span>
</span></span><span class="line"><span class="cl"><span class="n">img_back</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">magnitude</span><span class="p">(</span><span class="n">img_back</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">img_back</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">1</span><span class="p">])</span>  <span class="c1"># 对实部和虚部进行处理，使得其可视化</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">121</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;Input Image&#34;</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([]),</span> <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">122</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img_back</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;Result&#34;</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([]),</span> <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-7.png" title="/img/Opencv/chapter5-7.png" data-thumbnail="/img/Opencv/chapter5-7.png" data-sub-html="<h2>傅里叶变换(低通滤波器)</h2>">
        
    </a><figcaption class="image-caption">傅里叶变换(<code>低通滤波器</code>)</figcaption>
    </figure>
<h4 id="高通滤波器">高通滤波器</h4>
<p>将原来的mask0部分改为1，1部分改为0即可</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img_float32</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">float32</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>  <span class="c1"># 格式转换</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dft</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">dft</span><span class="p">(</span><span class="n">img_float32</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">DFT_COMPLEX_OUTPUT</span><span class="p">)</span>  <span class="c1"># 执行傅里叶变换</span>
</span></span><span class="line"><span class="cl"><span class="n">dft_shift</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">fftshift</span><span class="p">(</span><span class="n">dft</span><span class="p">)</span>  <span class="c1"># 进行shift变换</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">shape</span>
</span></span><span class="line"><span class="cl"><span class="n">crow</span><span class="p">,</span> <span class="n">ccol</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">rows</span> <span class="o">/</span> <span class="mi">2</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">cols</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># 中心位置</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 低通滤波</span>
</span></span><span class="line"><span class="cl"><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">mask</span><span class="p">[</span><span class="n">crow</span> <span class="o">-</span> <span class="mi">30</span><span class="p">:</span><span class="n">crow</span> <span class="o">+</span> <span class="mi">30</span><span class="p">,</span> <span class="n">ccol</span> <span class="o">-</span> <span class="mi">30</span><span class="p">:</span><span class="n">ccol</span> <span class="o">+</span> <span class="mi">30</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 掩码，去除保留中间周围，保留四周</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># IDFT(逆变换)</span>
</span></span><span class="line"><span class="cl"><span class="n">fshift</span> <span class="o">=</span> <span class="n">dft_shift</span> <span class="o">*</span> <span class="n">mask</span>  <span class="c1"># 是1的保留下来，其余归零</span>
</span></span><span class="line"><span class="cl"><span class="n">f_ishift</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">fft</span><span class="o">.</span><span class="n">ifftshift</span><span class="p">(</span><span class="n">fshift</span><span class="p">)</span>  <span class="c1"># ishift(shift变换的逆运算）</span>
</span></span><span class="line"><span class="cl"><span class="n">img_back</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">idft</span><span class="p">(</span><span class="n">f_ishift</span><span class="p">)</span>  <span class="c1"># 还原</span>
</span></span><span class="line"><span class="cl"><span class="n">img_back</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">magnitude</span><span class="p">(</span><span class="n">img_back</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">],</span> <span class="n">img_back</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">1</span><span class="p">])</span>  <span class="c1"># 对实部和虚部进行处理，使得其可视化</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">121</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;Input Image&#34;</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([]),</span> <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">122</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img_back</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s1">&#39;gray&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s2">&#34;Result&#34;</span><span class="p">),</span> <span class="n">plt</span><span class="o">.</span><span class="n">xticks</span><span class="p">([]),</span> <span class="n">plt</span><span class="o">.</span><span class="n">yticks</span><span class="p">([])</span>
</span></span><span class="line"><span class="cl"><span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter5-8.png" title="/img/Opencv/chapter5-8.png" data-thumbnail="/img/Opencv/chapter5-8.png" data-sub-html="<h2>傅里叶变换(高通滤波器)</h2>">
        
    </a><figcaption class="image-caption">傅里叶变换(<code>高通滤波器</code>)</figcaption>
    </figure>
]]></description>
</item>
<item>
    <title>OpenCV Chapter4</title>
    <link>https://Jungle430.github.io/posts/opencv/opencv-chapter4/</link>
    <pubDate>Tue, 03 Jan 2023 20:33:51 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/opencv/opencv-chapter4/</guid>
    <description><![CDATA[<h1 id="opencv">OpenCV</h1>
<h2 id="图像金字塔">图像金字塔</h2>
<p>通过不停的变换让图像越来越小</p>
<p>应用：图像特征提取</p>
<h3 id="高斯金字塔">高斯金字塔</h3>
<h4 id="向下采样方法缩小">向下采样方法（缩小）</h4>
<p>从金字塔底部往上走</p>
<p>方法
$G_i与高斯内核卷积\newline$
$$
\frac {1}{16}\begin{bmatrix}
&amp;1\ 4\ 6\ 4\ 1\newline
&amp;4\ 16\ 24\ 16\ 4\newline
&amp;6\ 24\ 36\ 24\ 6\newline
&amp;4\ 16\ 24\ 16\ 4\newline
&amp;1\ 4\ 6\ 4\ 1\newline
\end{bmatrix}
$$</p>
<p>$将所有偶数行和列去掉\newline$</p>
<p>经过此方法长度和宽度都变成原来的一半，大小变成原来的四分之一</p>
<h4 id="向上采样方法放大">向上采样方法（放大）</h4>
<ol>
<li>将每个图像在每个方向扩大为原来的两倍，新增的行和列以0填充</li>
</ol>
<p>$$
\begin{bmatrix}
&amp;10\ 30\newline
&amp;56\ 96\newline
\end{bmatrix}\rightarrow\begin{bmatrix}
&amp;10\ 0\ 30\ 0\newline
&amp;0\ 0\ 0\ 0\newline
&amp;56\ 0\ 96\ 0\newline
&amp;0\ 0\ 0\ 0\newline
\end{bmatrix}
$$</p>
<ol start="2">
<li>使用先前同样的内核（乘以4）与放大后的图像卷积，获得近似值（将像素点“均匀摊开”）</li>
</ol>
<h4 id="代码">代码</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img1</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (512, 512, 3)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">up</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">pyrUp</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">up</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (1024, 1024, 3)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">up</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">down</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">pyrDown</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">down</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (256, 256, 3)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">down</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="拉普拉斯金字塔">拉普拉斯金字塔</h3>
<p>$$
L_i=G_i-PyrUp(PyrDown(G_i))=G_i-PyrUp(G_{i+1})
$$</p>
<ol>
<li>低通滤波</li>
<li>缩小尺寸</li>
<li>放大尺寸</li>
<li>图像相减</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">down</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">pyrDown</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">down_up</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">pyrUp</span><span class="p">(</span><span class="n">down</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">img1</span> <span class="o">-</span> <span class="n">down_up</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="图像轮廓">图像轮廓</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">method</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>轮廓和边缘不一样的地方：边缘可以是零零散散的线段，<strong>轮廓是一个整体</strong></p>
<p>mode:轮廓检索模式</p>
<ul>
<li>RETR_EXTERNAL：只检索最外面的轮廓</li>
<li>RETR_LIST：检索所有的轮廓，并将其保存到一条链表当中</li>
<li>RETR_CCOMP：检索所有的轮廓，并将他们组织成两层。顶层是各部分的外部边界，第二层是空洞的边界</li>
<li>RETR_TREE：检索所有的轮廓，并重构嵌套轮廓的整个层次（最常用）</li>
</ul>
<p>method:轮廓逼近方法</p>
<ul>
<li>CHAIN_APPROX_NONE：以Freeman链码的方式输出轮廓，所有其他方法输出多边形（顶点的序列）</li>
<li>CHAIN_APPROX_SIMPLE：压缩水平的，垂直的和斜的部分，也就是，函数只保留他们的终点部分</li>
</ul>
<p>notice：为了更高的准确率，使用二值图像</p>
<h3 id="绘制轮廓">绘制轮廓</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>  <span class="c1"># 转为灰度图</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ret</span><span class="p">,</span> <span class="n">thresh</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_BINARY</span><span class="p">)</span>  <span class="c1"># 阈值处理</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">thresh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">contours</span><span class="p">,</span> <span class="n">hierarchy</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">thresh</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">RETR_TREE</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CHAIN_APPROX_NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 绘制轮廓</span>
</span></span><span class="line"><span class="cl"><span class="n">draw_img</span> <span class="o">=</span> <span class="n">img1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>  <span class="c1"># drawContours会改变原有图像，所以这里需要copy一下</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">draw_img</span><span class="p">,</span> <span class="n">contours</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -&gt; 绘图图像，轮廓，第几个轮廓， -1说明绘制所有轮廓，(R, G, B)说明绘制轮廓使用的颜色,最后一个是线条的宽度</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Opencv/chapter4-1.png" title="/img/Opencv/chapter4-1.png" data-thumbnail="/img/Opencv/chapter4-1.png" data-sub-html="<h2>绘制轮廓(原图)</h2>">
        
    </a><figcaption class="image-caption">绘制轮廓(<code>原图</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Opencv/chapter4-2.png" title="/img/Opencv/chapter4-2.png" data-thumbnail="/img/Opencv/chapter4-2.png" data-sub-html="<h2>绘制轮廓(处理后图像)</h2>">
        
    </a><figcaption class="image-caption">绘制轮廓(<code>处理后图像</code>)</figcaption>
    </figure>
<h3 id="轮廓特征">轮廓特征</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>  <span class="c1"># 转为灰度图</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ret</span><span class="p">,</span> <span class="n">thresh</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_BINARY</span><span class="p">)</span>  <span class="c1"># 阈值处理</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">thresh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">contours</span><span class="p">,</span> <span class="n">hierarchy</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">thresh</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">RETR_TREE</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CHAIN_APPROX_NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cnt</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">cnt</span><span class="p">))</span>  <span class="c1"># numpy.ndarray</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">contourArea</span><span class="p">(</span><span class="n">cnt</span><span class="p">))</span>  <span class="c1"># 面积</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">arcLength</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span> <span class="kc">True</span><span class="p">))</span>  <span class="c1"># 周长，True表示闭合</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="轮廓近似">轮廓近似</h3>
<p>“以直带曲”</p>
<p>寻找曲线上面距离直线距离最大的点，比较该距离与阈值的大小，如果小于阈值就可以用直线近似，反之则连接该点与曲线的两端，出现两条新的直线，重复上面的操作，直到符合条件</p>
<p>比较值越小，轮廓程度变化程度越小</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>  <span class="c1"># 转为灰度图</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ret</span><span class="p">,</span> <span class="n">thresh</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_BINARY</span><span class="p">)</span>  <span class="c1"># 阈值处理</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">thresh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">contours</span><span class="p">,</span> <span class="n">hierarchy</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">thresh</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">RETR_TREE</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CHAIN_APPROX_NONE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">img1</span><span class="o">.</span><span class="n">copy</span><span class="p">(),</span> <span class="n">contours</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="n">cnt</span> <span class="o">=</span> <span class="n">contours</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">epsilon</span> <span class="o">=</span> <span class="mf">0.3</span> <span class="o">*</span> <span class="n">cv2</span><span class="o">.</span><span class="n">arcLength</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">approx</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">approxPolyDP</span><span class="p">(</span><span class="n">cnt</span><span class="p">,</span> <span class="n">epsilon</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>  <span class="c1"># -&gt; 轮廓， 比较值（通常是周长的百分比）</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">img1</span><span class="o">.</span><span class="n">copy</span><span class="p">(),</span> <span class="n">cnt</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">img1</span><span class="o">.</span><span class="n">copy</span><span class="p">(),</span> <span class="n">approx</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过轮廓和相应的函数也能画边界矩形和外接圆</p>
<h2 id="模板匹配">模板匹配</h2>
<h3 id="原理">原理</h3>
<p>模板匹配和卷积的原理很像，模板在原图像上从原点开始滑动，计算模板与（图像被模板覆盖的地方）的差别程度，然后将每次计算的结果放入一个矩阵里，作为结果输出。原图像大小$A\times B$，模板大小$a\times b$,输出结果的矩阵大小$(A-a+1)\times (B-b+1)\newline$</p>
<h3 id="方法">方法</h3>
<figure><a class="lightgallery" href="/img/Opencv/chapter4-3.png" title="/img/Opencv/chapter4-3.png" data-thumbnail="/img/Opencv/chapter4-3.png" data-sub-html="<h2>模板匹配(相关方法)</h2>">
        
    </a><figcaption class="image-caption">模板匹配(<code>相关方法</code>)</figcaption>
    </figure>
<ul>
<li>
<p>TM_SQDIFF：计算平方不同，计算出来的值越小，越相关</p>
</li>
<li>
<p>TM_CCORR：计算相关性，计算出来的值越大，越相关</p>
</li>
<li>
<p>TM_CCOEFF：计算相关系数，计算出来的值越大，越相关</p>
</li>
<li>
<p>TM_SQDIEF_NORMED：计算归一化平方不同，计算出来的值越接近0，越相关</p>
</li>
<li>
<p>TM_CCORR_NORMED：计算归一化相关性，计算出来的值越接近1，越相关</p>
</li>
<li>
<p>TM_CCOEFF_NORMED：计算归一化相关系数，计算出来的值越接近1，越相关</p>
</li>
</ul>
<p>注：归一化的效果通常更好</p>
<h3 id="使用">使用</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">300</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">matchTemplate</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">img2</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">TM_CCOEFF_NORMED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img1</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">img2</span><span class="o">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">res</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (512, 512, 3) (300, 300, 3) (213, 213)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">min_val</span><span class="p">,</span> <span class="n">max_val</span><span class="p">,</span> <span class="n">min_loc</span><span class="p">,</span> <span class="n">max_loc</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">minMaxLoc</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>  <span class="c1"># 最小/最大值 + 坐标位置</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;min_val=</span><span class="si">{</span><span class="n">min_val</span><span class="si">}</span><span class="s2">, max_val=</span><span class="si">{</span><span class="n">max_val</span><span class="si">}</span><span class="s2">, min_loc=</span><span class="si">{</span><span class="n">min_loc</span><span class="si">}</span><span class="s2">,max_loc=</span><span class="si">{</span><span class="n">max_loc</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过最大/最小（与方法有关），可以定位到最匹配的区域（因为shape已知）</p>
<h3 id="匹配多个对象">匹配多个对象</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img_gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">template</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">300</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">h</span><span class="p">,</span> <span class="n">w</span> <span class="o">=</span> <span class="n">template</span><span class="o">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">matchTemplate</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">TM_CCOEFF_NORMED</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">threshold</span> <span class="o">=</span> <span class="mf">0.4</span>  <span class="c1"># 取匹配程度大于40%的坐标</span>
</span></span><span class="line"><span class="cl"><span class="n">loc</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">res</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">pt</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">loc</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]):</span>
</span></span><span class="line"><span class="cl">    <span class="n">bottom_right</span> <span class="o">=</span> <span class="p">(</span><span class="n">pt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">,</span> <span class="n">pt</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">h</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">pt</span><span class="p">,</span> <span class="n">bottom_right</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>OpenCV Chapter3</title>
    <link>https://Jungle430.github.io/posts/opencv/opencv-chapter3/</link>
    <pubDate>Mon, 02 Jan 2023 23:22:32 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/opencv/opencv-chapter3/</guid>
    <description><![CDATA[<h1 id="opencv">OpenCV</h1>
<h2 id="图像梯度">图像梯度</h2>
<h3 id="sobel算子">Sobel算子</h3>
<p>主要目的：找出图像中有梯度的地方</p>
<p>主要思路 $\rightarrow$ 计算左右/上下数据</p>
<p>最终落实在卷积核上面（注意此时权重仍然与位置有关，类似高斯滤波）(对应位置相加后求和)
$$
Kernel_x=\begin{bmatrix}
&amp;-1\ 0\ +1\newline
&amp;-2\ 0\ +2\newline
&amp;-1\ 0\ +1\newline
\end{bmatrix}\newline
G_x = \sum_{1 \leq i \leq size, 1 \leq j \leq size} Kernel_x[i][j] \times image[i][j]\newline
$$</p>
<p>$$
Kernel_y=\begin{bmatrix}
&amp;-1\ -2\ -1\newline
&amp;0\ 0\ 0\newline
&amp;+1\ +2\ +1\newline
\end{bmatrix}\newline
G_y = \sum_{1 \leq i \leq size, 1 \leq j \leq size} Kernel_y[i][j] \times image[i][j]\newline
$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">Sobel</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">ddepth</span><span class="p">,</span> <span class="n">dx</span><span class="p">,</span> <span class="n">dy</span><span class="p">,</span> <span class="n">ksize</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>ddepth:图像的深度，通常为-1</p>
</li>
<li>
<p>dx和dy分别表示水平和竖直方向</p>
</li>
<li>
<p>ksize是Sobel算子的大小(一般为3x3或者5x5)</p>
</li>
</ul>
<p>计算出来的数值如果越界会截断，只取范围内的最小或最大值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Sobel</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_64F</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ksize</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># 使用cv2.CV_64F,会取负值，如果是-1则做截断处理</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>将负数转换为绝对值（否则在显示的时候会按照截断处理），防止因为计算方向带来的误差</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Sobel</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_64F</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ksize</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># 使用cv2.CV_64F,会对负值取绝对值，如果是-1则做截断处理</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">[[ 0.  0.  0. ...  0.  0.  0.]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [ 0.  1.  0. ...  0. -2.  0.]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [ 0. -1. -1. ...  0.  1.  0.]
</span></span></span><span class="line"><span class="cl"><span class="s1"> ...
</span></span></span><span class="line"><span class="cl"><span class="s1"> [ 0. -1.  2. ...  2. -2.  0.]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [ 0.  0. -1. ... -1. -2.  0.]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [ 0.  0.  0. ...  0.  0.  0.]]
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">img3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">[[0 0 0 ... 0 0 0]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [0 1 0 ... 0 2 0]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [0 1 1 ... 0 1 0]
</span></span></span><span class="line"><span class="cl"><span class="s1"> ...
</span></span></span><span class="line"><span class="cl"><span class="s1"> [0 1 2 ... 2 2 0]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [0 0 1 ... 1 2 0]
</span></span></span><span class="line"><span class="cl"><span class="s1"> [0 0 0 ... 0 0 0]]
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果</p>
<p>原二值图</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter3-1.png" title="/img/Opencv/chapter3-1.png" data-thumbnail="/img/Opencv/chapter3-1.png" data-sub-html="<h2>Sobel(原图)</h2>">
        
    </a><figcaption class="image-caption">Sobel(<code>原图</code>)</figcaption>
    </figure>
<p>第一次使用Sobel算子</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter3-2.png" title="/img/Opencv/chapter3-2.png" data-thumbnail="/img/Opencv/chapter3-2.png" data-sub-html="<h2>Sobel(第一次使用Sobel算子)</h2>">
        
    </a><figcaption class="image-caption">Sobel(<code>第一次使用Sobel算子</code>)</figcaption>
    </figure>
<p>取绝对值</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter3-3.png" title="/img/Opencv/chapter3-3.png" data-thumbnail="/img/Opencv/chapter3-3.png" data-sub-html="<h2>Sobel(取绝对值)</h2>">
        
    </a><figcaption class="image-caption">Sobel(<code>取绝对值</code>)</figcaption>
    </figure>
<p>使用不同的方式求和</p>
<p>分别给0.5的权重</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Sobel</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_64F</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ksize</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># 使用cv2.CV_64F,会对负值取绝对值，如果是-1则做截断处理</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img4</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Sobel</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_64F</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ksize</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img5</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">img4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img6</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">addWeighted</span><span class="p">(</span><span class="n">img3</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">img5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># 最后一个参数是初值 -&gt; a1*x+b*y+c(最后一个参数)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img6</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为什么不同时设置$dx=1,dy=1$一起直接计算呢 $\rightarrow$ 直接计算效果不好（主要是融合效果不好），而且融合的时不如分开计算的自由度高</p>
<h3 id="scharr算子">Scharr算子</h3>
<p>权重与距离中心点的距离相关性更大，相比于<code>Sobel</code>算子来说更加准确敏感，可以看成是<code>Sobel</code>的改进
$$
Kernel_x=\begin{bmatrix}
&amp;-3\ 0\ +3\newline
&amp;-10\ 0\ +10\newline
&amp;-3\ 0\ +3\newline
\end{bmatrix}\newline
G_x = \sum_{1 \leq i \leq size, 1 \leq j \leq size} Kernel_x[i][j] \times image[i][j]\newline
$$</p>
<p>$$
Kernel_y=\begin{bmatrix}
&amp;-3\ -10\ -3\newline
&amp;0\ 0\ 0\newline
&amp;+3\ +10\ +3\newline
\end{bmatrix}\newline
G_y = \sum_{1 \leq i \leq size, 1 \leq j \leq size} Kernel_y[i][j] \times image[i][j]\newline
$$
使用</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Scharr</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_64F</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="laplace算子">Laplace算子</h3>
<p>原理：二阶导数，对噪音点比较敏感,一般需要和其他方法配合使用
$$
Kernel=\begin{bmatrix}
&amp;0\ 1\ 0\newline
&amp;1\ -4\ 1\newline
&amp;0\ 1\ 0\newline
\end{bmatrix}\newline
G=\sum_{1 \leq i \leq size, 1 \leq j \leq size}Kernel_{i, j} \times image_{i, j}\newline
$$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Laplacian</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">CV_64F</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">convertScaleAbs</span><span class="p">(</span><span class="n">img2</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="canny边缘检测">Canny边缘检测</h2>
<h3 id="流程">流程</h3>
<ol>
<li>使用高斯滤波器，以平滑图像，滤除噪声</li>
<li>计算图像中每个像素点的梯度强度和方向</li>
<li>应用非极大值(<code>Non-Maximum Suppression</code>)抑制，以消除边缘检测带来的杂散响应</li>
<li>应用双阈值(<code>Double-Threshold</code>)检测来确定真实的和潜在的边缘</li>
<li>通过抑制孤立的弱边缘最终完成检测</li>
</ol>
<h3 id="高斯滤波器">高斯滤波器</h3>
<p>$$
G(x, y)=\frac{1}{2\pi \sigma^2}e^{-\frac {x^2+y^2}{2\sigma^2}}\newline
$$</p>
<p>$$
H=\begin{bmatrix}
&amp;0.0924\ 0.1192\ 0.0924\newline
&amp;0.1192\ 0.1538\ 0.1192\newline
&amp;0.0924\ 0.1192\ 0.0924\newline
\end{bmatrix}\newline
$$</p>
<p>$$
e=H * A = \begin{bmatrix}
&amp;h_{11}\ h_{12}\ h_{13}\newline
&amp;h_{21}\ h_{22}\ h_{23}\newline
&amp;h_{31}\ h_{32}\ h_{33}\newline
\end{bmatrix} * \begin{bmatrix}
&amp;a\ b\ c\newline
&amp;d\ e\ f\newline
&amp;g\ h\ i\newline
\end{bmatrix}=\sum_{1 \leq i \leq size, 1 \leq j \leq size}^{i, j} \begin{bmatrix}
&amp;a\times h_{11}\ b\times h_{12}\ c\times h_{13}\newline
&amp;d\times h_{21}\ e\times h_{22}\ f\times h_{23}\newline
&amp;g\times h_{31}\ h\times h_{32}\ i\times h_{33}\newline
\end{bmatrix}
$$</p>
<h3 id="梯度和方向">梯度和方向</h3>
<p>使用<code>Sobel</code>算子</p>
<p>$$
Kernel_x=\begin{bmatrix}
&amp;-1\ 0\ +1\newline
&amp;-2\ 0\ +2\newline
&amp;-1\ 0\ +1\newline
\end{bmatrix}\newline
G_x = \sum_{1 \leq i \leq size, 1 \leq j \leq size} Kernel_x[i][j] \times image[i][j]\newline
$$</p>
<p>$$
Kernel_y=\begin{bmatrix}
&amp;-1\ -2\ -1\newline
&amp;0\ 0\ 0\newline
&amp;+1\ +2\ +1\newline
\end{bmatrix}\newline
G_y = \sum_{1 \leq i \leq size, 1 \leq j \leq size} Kernel_y[i][j] \times image[i][j]\newline
$$</p>
<p>$$
\begin{align}
&amp;G=\sqrt{G_x^2+G_y^2}\newline
&amp;\theta=arctan(\frac {G_y}{G_x})\newline
\end{align}\newline
$$</p>
<h3 id="非极大值抑制">非极大值抑制</h3>
<p>在所有框里面选出相关性最大的，同时还会比较该框和周围框的相关性</p>
<p>算法：遍历图像中的所有像素点，判断当前像素点是否是周围像素点中具有相同方向（此时会给$\theta$ 划分区间，同区间视为相同就行）梯度的最大值。如果是梯度最大的像素点，就保留，否则就抑制</p>
<p>这一步可以将模糊的边界变得清晰</p>
<h3 id="双阈值检测">双阈值检测</h3>
<p>$$
\begin{align}
\begin{cases}
梯度值&gt;maxVal:处理为边界\newline
minVal&lt;梯度值&lt;maxVal:如果该点可以通过线连到边界点（即大于阈值的点）则保留，否则舍弃\newline
梯度值&lt;minVal:舍弃\newline
\end{cases}
\end{align}
$$</p>
<p><code>minVal</code>越小，条件越松，越多的边界会被检测到，反之则要求变高，检测的到边缘越少</p>
<p><code>maxVal</code>越大，条件越高，反之越松</p>
<h3 id="代码">代码</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Canny</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">150</span><span class="p">)</span> <span class="c1"># -&gt; src, minVal, maxVal</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">Canny</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img3</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>原图|(80, 150)|(50, 100)对比</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter3-4.png" title="/img/Opencv/chapter3-4.png" data-thumbnail="/img/Opencv/chapter3-4.png" data-sub-html="<h2>Canny(不同阈值下的效果（第一张是原图,第二张为（80， 150），第三张为（50， 100）)</h2>">
        
    </a><figcaption class="image-caption">Canny(<code>不同阈值下的效果（第一张是原图,第二张为（80， 150），第三张为（50， 100）</code>)</figcaption>
    </figure>
]]></description>
</item>
<item>
    <title>OpenCV Chapter2</title>
    <link>https://Jungle430.github.io/posts/opencv/opencv-chapter2/</link>
    <pubDate>Mon, 02 Jan 2023 15:42:13 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/opencv/opencv-chapter2/</guid>
    <description><![CDATA[<h1 id="opencv">OpenCV</h1>
<h2 id="图像平滑处理">图像平滑处理</h2>
<h3 id="前导知识卷积convolution">前导知识：卷积$(convolution)$</h3>
<h4 id="离散卷积">离散卷积</h4>
<p>主要应用：数字图像处理</p>
<p>先导：如何计算两个骰子分别向外投掷一次不同和数的概率</p>
<p>怎么计算两个和数？</p>
<p>转置数组，从左向右移动，依次对齐计算</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-1.png" title="/img/Opencv/chapter2-1.png" data-thumbnail="/img/Opencv/chapter2-1.png" data-sub-html="<h2>image(卷积计算方法)</h2>">
        
    </a><figcaption class="image-caption">image(<code>卷积计算方法</code>)</figcaption>
    </figure>
<p>但是如果每一面的概率不一样，而不是像之前那样都是$\frac{1}{6}\newline$了呢？</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-2.png" title="/img/Opencv/chapter2-2.png" data-thumbnail="/img/Opencv/chapter2-2.png" data-sub-html="<h2>卷积(概率非均匀分布)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>概率非均匀分布</code>)</figcaption>
    </figure>
<p>求概率的时候不再是$\frac {情况数}{组合总数}$了，而是使用纯概率计算</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-3.png" title="/img/Opencv/chapter2-3.png" data-thumbnail="/img/Opencv/chapter2-3.png" data-sub-html="<h2>卷积(公式化纯概率计算)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>公式化纯概率计算</code>)</figcaption>
    </figure>
<p>公式化</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-4.png" title="/img/Opencv/chapter2-4.png" data-thumbnail="/img/Opencv/chapter2-4.png" data-sub-html="<h2>卷积(公式化计算)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>公式化计算</code>)</figcaption>
    </figure>
<p>表格化，将每一条对角线上面的数求和，就得到了新的一组数（与上面一个原理，不过变成了可视化表格）</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-5.png" title="/img/Opencv/chapter2-5.png" data-thumbnail="/img/Opencv/chapter2-5.png" data-sub-html="<h2>卷积(转化为表格计算)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>转化为表格计算</code>)</figcaption>
    </figure>
<p>$$
\begin{align}
&amp;(a * b)\ is\ a\ new\ array\newline
&amp;and\ (a * b)[n]=\sum_{i, j, i + j = n}a_i\ b_j\newline
\end{align}
$$</p>
<p>$Example:\newline$</p>
<p>$$
\begin{align}
&amp;(1,2,3) * (4, 5, 6)\newline
&amp;=(1 * 4, 1 * 5 + 2 * 4, 1 * 6 + 2 * 5 + 3 * 4, 2 * 6 + 3 * 5,3 * 6)\newline
&amp;=(4, 13, 28, 27, 18)\newline
\end{align}
$$</p>
<h5 id="python科学计算库numpy中的使用">python科学计算库numpy中的使用</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]),</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">convolve</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-latex" data-lang="latex"><span class="line"><span class="cl">[ 4 13 28 27 18]
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个长的<code>data list</code>和一个短的概率<code>array</code>组合（权重可以不同，但是求和要等于1），概率数组从左往右滑动，同时求和 $\rightarrow$ 在求小窗口数据里面的平均值</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-6.png" title="/img/Opencv/chapter2-6.png" data-thumbnail="/img/Opencv/chapter2-6.png" data-sub-html="<h2>卷积(短数组与长数组)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>短数组与长数组</code>)</figcaption>
    </figure>
<p>应用与图像处理</p>
<p>(3X3)的矩阵扫描，用来求该矩阵下的加权平均值（RGB三个通道都是），实现了对图像的模糊化</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-7.png" title="/img/Opencv/chapter2-7.png" data-thumbnail="/img/Opencv/chapter2-7.png" data-sub-html="<h2>卷积(RGB三个通道分别计算)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>RGB三个通道分别计算</code>)</figcaption>
    </figure>
<p>形象描述</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-8.png" title="/img/Opencv/chapter2-8.png" data-thumbnail="/img/Opencv/chapter2-8.png" data-sub-html="<h2>卷积(图像模糊)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>图像模糊</code>)</figcaption>
    </figure>
<h4 id="高斯分布">高斯分布</h4>
<p>通过控制权重使得模糊的时候，权重从中心到两边逐渐变小，这样模糊出来的图像视觉效果更好</p>
<p>维基百科</p>
<blockquote>
<p><strong>正态分布</strong>（中国大陆作<strong>正态分布</strong>，香港作<strong>正态分布</strong>，台湾作<strong>常态分布</strong>，英语：Normal distribution），又名<strong>高斯分布</strong>（英语：Gaussian distribution）、<strong>正规分布</strong>，是一个非常常见的<a href="https://zh.wikipedia.org/wiki/%e6%a6%82%e7%8e%87%e5%88%86%e5%b8%83" target="_blank" rel="noopener noreffer">连续概率分布</a>。正态分布在<a href="https://zh.wikipedia.org/wiki/%e7%bb%9f%e8%ae%a1%e5%ad%a6" target="_blank" rel="noopener noreffer">统计学</a>上十分重要，经常用在<a href="https://zh.wikipedia.org/wiki/%e8%87%aa%e7%84%b6%e7%a7%91%e5%ad%a6" target="_blank" rel="noopener noreffer">自然</a>和<a href="https://zh.wikipedia.org/wiki/%e7%a4%be%e4%bc%9a%e7%a7%91%e5%ad%a6" target="_blank" rel="noopener noreffer">社会科学</a>来代表一个不明的随机变量。</p>
<p>若<a href="https://zh.wikipedia.org/wiki/%e9%9a%a8%e6%a9%9f%e8%ae%8a%e6%95%b8" target="_blank" rel="noopener noreffer">随机变量</a>服从一个位置参数为、尺度参数为的正态分布，记为：</p>
<p>$X \sim N(\mu, \sigma^2)\newline$</p>
<p>则其<a href="https://zh.wikipedia.org/wiki/%e6%a9%9f%e7%8e%87%e5%af%86%e5%ba%a6%e5%87%bd%e6%95%b8" target="_blank" rel="noopener noreffer">概率密度函数</a>为 $f(x)=\frac {1}{\sigma \sqrt{2\pi}}e^{-\frac {(x-\mu)^2}{2\sigma^2}}\newline$</p>
<p>正态分布的<a href="https://zh.wikipedia.org/wiki/%e6%95%b0%e5%ad%a6%e6%9c%9f%e6%9c%9b" target="_blank" rel="noopener noreffer">数学期望</a>值或<a href="https://zh.wikipedia.org/wiki/%e6%9c%9f%e6%9c%9b%e5%80%bc" target="_blank" rel="noopener noreffer">期望值</a>等于位置参数，决定了分布的位置；其<a href="https://zh.wikipedia.org/wiki/%e6%96%b9%e5%b7%ae" target="_blank" rel="noopener noreffer">方差</a>$\sigma^2$的开平方或<a href="https://zh.wikipedia.org/wiki/%e6%a8%99%e6%ba%96%e5%b7%ae" target="_blank" rel="noopener noreffer">标准差</a>$\sigma$等于尺度参数，决定了分布的幅度。</p>
<p><a href="https://zh.wikipedia.org/wiki/%e4%b8%ad%e5%bf%83%e6%9e%81%e9%99%90%e5%ae%9a%e7%90%86" target="_blank" rel="noopener noreffer">中心极限定理</a>指出，在特定条件下，一个具有有限<a href="https://zh.wikipedia.org/wiki/%e5%9d%87%e5%80%bc" target="_blank" rel="noopener noreffer">均值</a>和<a href="https://zh.wikipedia.org/wiki/%e6%96%b9%e5%b7%ae" target="_blank" rel="noopener noreffer">方差</a>的<a href="https://zh.wikipedia.org/wiki/%e9%9a%8f%e6%9c%ba%e5%8f%98%e9%87%8f" target="_blank" rel="noopener noreffer">随机变量</a>的多个<a href="https://zh.wikipedia.org/wiki/%e6%a0%b7%e6%9c%ac" target="_blank" rel="noopener noreffer">样本</a>(观察值)的平均值本身就是一个随机变量，其分布随着样本数量的增加而<a href="https://zh.wikipedia.org/wiki/%e6%94%b6%e6%95%9b" target="_blank" rel="noopener noreffer">收敛</a>于正态分布。因此，许多与独立过程总和有关的物理量，例如测量误差，通常可被近似为正态分布。</p>
<p>正态分布的概率密度函数曲线呈钟形，因此人们又经常称之为<strong>钟形曲线</strong>（类似于寺庙里的<a href="https://zh.wikipedia.org/wiki/%e5%a4%a7%e9%92%9f" target="_blank" rel="noopener noreffer">大钟</a>，因此得名）。我们通常所说的<strong>标准正态分布</strong>是位置参数，尺度参数$\displaystyle \sigma ^{2}=1$的正态分布</p>
</blockquote>
<p>权值和不为1，且有负权重存在的情况</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-9.png" title="/img/Opencv/chapter2-9.png" data-thumbnail="/img/Opencv/chapter2-9.png" data-sub-html="<h2>卷积(不同的卷积核效果不同)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>不同的卷积核效果不同</code>)</figcaption>
    </figure>
<p>判别图像中所有竖向的边界</p>
<p>通过不同的卷积核($Kernel$)(即矩阵)，就可以对图像做不同的处理</p>
<p>卷积神经网络 $\rightarrow$ 用数据来算出应该选取什么样的核（取决于检测目标）</p>
<p>notice:因为在纯数理论下算出来的卷积实际上总是要比原数组长的，所以在计算机科学中一般会把多余的值截掉</p>
<h4 id="算法优化">算法优化</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">arr1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">arr2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">arr3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">convolve</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">arr2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>  <span class="c1"># 10.330177783966064</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scipy.signal</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">scipy</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">arr1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">arr2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">(</span><span class="mi">100000</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">arr3</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">convolve</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">arr2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>  <span class="c1"># 10.330177783966064</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">arr4</span> <span class="o">=</span> <span class="n">scipy</span><span class="o">.</span><span class="n">signal</span><span class="o">.</span><span class="n">fftconvolve</span><span class="p">(</span><span class="n">arr1</span><span class="p">,</span> <span class="n">arr2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">end</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">9.904504299163818
</span></span></span><span class="line"><span class="cl"><span class="s1">0.009002208709716797
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>计算速度飙升！</strong></p>
<h5 id="什么是fftconvolve">什么是<code>fftconvolve</code>?</h5>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-10.png" title="/img/Opencv/chapter2-10.png" data-thumbnail="/img/Opencv/chapter2-10.png" data-sub-html="<h2>卷积(fftclovolve)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>fftclovolve</code>)</figcaption>
    </figure>
<p><strong>先建立一个表格存储计算完成的组合乘积</strong>，然后沿着对角线求和，把原来老算法里面需要重复计算组合乘积的弊病给解决了</p>
<p>其他应用 $\rightarrow$ 多项式乘积</p>
<figure><a class="lightgallery" href="/img/Opencv/chapter2-11.png" title="/img/Opencv/chapter2-11.png" data-thumbnail="/img/Opencv/chapter2-11.png" data-sub-html="<h2>卷积(多项式乘积)</h2>">
        
    </a><figcaption class="image-caption">卷积(<code>多项式乘积</code>)</figcaption>
    </figure>
<h4 id="代码部分">代码部分</h4>
<h5 id="均值滤波与方框滤波">均值滤波与方框滤波</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 均值滤波</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 简单的平均卷积操作，第二个元组参数指定卷积核的大小，维度通常用奇数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">blur</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方框滤波</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 基本和均值一样，可以选择归一化，第二个参数是目标图像深度，一般使用-1（表示与原始图像深度相同）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 第三个参数表示卷积核大小</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">boxFilter</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">normalize</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 只要越界，就变成255</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img4</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">boxFilter</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">normalize</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img4</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>有关$normalize$:(<code>K</code>为卷积核)</p>
<p>$$
\begin{align}
&amp;K=\alpha
\begin{bmatrix}
&amp;1, 1, 1, \dots, 1, 1, 1\newline
&amp;1, 1, 1, \dots, 1, 1, 1\newline
&amp;\dots \dots\newline
&amp;1, 1, 1, \dots, 1, 1, 1\newline
\end{bmatrix}
\end{align}
$$</p>
<p>$$
\alpha=\begin{cases}
&amp;\frac {1}{ksize.width * ksize.height}\ when\ normalize=True, is\ equal\ to\ the\ K\ of\ blur\newline
&amp;1\ otherwise
\end{cases}
$$</p>
<h5 id="高斯滤波">高斯滤波</h5>
<p>维基百科</p>
<blockquote>
<p>Mathematically, applying a Gaussian blur to an image is the same as <a href="https://en.wikipedia.org/wiki/Convolution" target="_blank" rel="noopener noreffer">convolving</a> the image with a <a href="https://en.wikipedia.org/wiki/Gaussian_function" target="_blank" rel="noopener noreffer">Gaussian function</a>. This is also known as a two-dimensional <a href="https://en.wikipedia.org/wiki/Weierstrass_transform" target="_blank" rel="noopener noreffer">Weierstrass transform</a>. By contrast, convolving by a circle (i.e., a circular <a href="https://en.wikipedia.org/wiki/Box_blur" target="_blank" rel="noopener noreffer">box blur</a>) would more accurately reproduce the <a href="https://en.wikipedia.org/wiki/Bokeh" target="_blank" rel="noopener noreffer">bokeh</a> effect.</p>
<p>Since the <a href="https://en.wikipedia.org/wiki/Fourier_transform" target="_blank" rel="noopener noreffer">Fourier transform</a> of a Gaussian is another Gaussian, applying a Gaussian blur has the effect of reducing the image&rsquo;s high-frequency components; a Gaussian blur is thus a <a href="https://en.wikipedia.org/wiki/Low-pass_filter" target="_blank" rel="noopener noreffer">low-pass filter</a>.</p>
<p>The Gaussian blur is a type of image-blurring filter that uses a Gaussian function (which also expresses the <a href="https://en.wikipedia.org/wiki/Normal_distribution" target="_blank" rel="noopener noreffer">normal distribution</a> in statistics) for calculating the <a href="https://en.wikipedia.org/wiki/Transformation_%28mathematics%29" target="_blank" rel="noopener noreffer">transformation</a> to apply to each <a href="https://en.wikipedia.org/wiki/Pixel" target="_blank" rel="noopener noreffer">pixel</a> in the image. The formula of a Gaussian function in one dimension is</p>
<p>$G(x)=\frac {1}{\sqrt {2\pi \sigma^2}}e^{-\frac {x^2}{2\sigma^2}}\newline$</p>
<p>In two dimensions, it is the product of two such Gaussian functions, one in each dimension:</p>
<p>$G(x, y)=\frac {1}{2\pi \sigma^2}e^{-\frac {x^2+y^2}{2\sigma^2}}\newline$</p>
<p>where <em>x</em> is the distance from the origin in the horizontal axis, <em>y</em> is the distance from the origin in the vertical axis, and <em>σ</em> is the <a href="https://en.wikipedia.org/wiki/Standard_deviation" target="_blank" rel="noopener noreffer">standard deviation</a> of the Gaussian distribution. It is important to note that the origin on these axes are at the center (0, 0). When applied in two dimensions, this formula produces a surface whose <a href="https://en.wiktionary.org/wiki/contour" target="_blank" rel="noopener noreffer">contours</a> are <a href="https://en.wikipedia.org/wiki/Concentric_circles" target="_blank" rel="noopener noreffer">concentric circles</a> with a Gaussian distribution from the center point.</p>
<p>Values from this distribution are used to build a <a href="https://en.wikipedia.org/wiki/Convolution" target="_blank" rel="noopener noreffer">convolution</a> matrix which is applied to the original image. This convolution process is illustrated visually in the figure on the right. Each pixel&rsquo;s new value is set to a <a href="https://en.wikipedia.org/wiki/Weighted_average" target="_blank" rel="noopener noreffer">weighted average</a> of that pixel&rsquo;s neighborhood. The original pixel&rsquo;s value receives the heaviest weight (having the highest Gaussian value) and neighboring pixels receive smaller weights as their distance to the original pixel increases. This results in a blur that preserves boundaries and edges better than other, more uniform blurring filters; see also <a href="https://en.wikipedia.org/wiki/Scale_space_implementation" target="_blank" rel="noopener noreffer">scale space implementation</a>.</p>
</blockquote>
<p><strong>“离中心点越近权重越大，反之则越小”</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># -&gt; src, Ksize, and sigma</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参数说明</p>
<p>Parameters</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">ksize</span><span class="p">,</span> <span class="n">sigmaX</span><span class="p">,</span> <span class="n">sigmaY</span><span class="p">,</span> <span class="n">borderType</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><table>
<thead>
<tr>
<th>src</th>
<th>input image; the image can have any number of channels, which are processed independently, but the depth should be CV_8U, CV_16U, CV_16S, CV_32F or CV_64F.</th>
</tr>
</thead>
<tbody>
<tr>
<td>dst</td>
<td>output image of the same size and type as src.</td>
</tr>
<tr>
<td>ksize</td>
<td>Gaussian kernel size. ksize.width and ksize.height can differ but they both must be positive and odd. Or, they can be zero&rsquo;s and then they are computed from sigma.</td>
</tr>
<tr>
<td>sigmaX</td>
<td>Gaussian kernel standard deviation in X direction.</td>
</tr>
<tr>
<td>sigmaY</td>
<td>Gaussian kernel standard deviation in Y direction; if sigmaY is zero, it is set to be equal to sigmaX, if both sigmas are zeros, they are computed from ksize.width and ksize.height, respectively (see <a href="https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#gac05a120c1ae92a6060dd0db190a61afa" target="_blank" rel="noopener noreffer">getGaussianKernel</a> for details); to fully control the result regardless of possible future modifications of all this semantics, it is recommended to specify all of ksize, sigmaX, and sigmaY.</td>
</tr>
<tr>
<td>borderType</td>
<td>pixel extrapolation method, see <a href="https://docs.opencv.org/4.x/d2/de8/group__core__array.html#ga209f2f4869e304c82d07739337eae7c5" target="_blank" rel="noopener noreffer">BorderTypes</a>. <a href="https://docs.opencv.org/4.x/d2/de8/group__core__array.html#gga209f2f4869e304c82d07739337eae7c5a697c1b011884a7c2bdc0e5caf7955661" target="_blank" rel="noopener noreffer">BORDER_WRAP</a> is not supported.</td>
</tr>
</tbody>
</table>
<h5 id="中值滤波">中值滤波</h5>
<p>对卷积核内部的像素进行排序，取中值作为新的像素点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意第二个参数发生了变化</p>
<blockquote>
<p>@param ksize aperture linear size; it must be odd and greater than 1, for example: 3, 5, 7 &hellip;</p>
</blockquote>
<p>去噪效果最好，但是也有相应的损失</p>
<h5 id="连接图像">连接图像</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl"><span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">img1</span><span class="p">,</span> <span class="n">img2</span><span class="p">,</span> <span class="n">img3</span><span class="p">,</span> <span class="o">...</span><span class="p">))</span> <span class="c1"># 横向拼接</span>
</span></span><span class="line"><span class="cl"><span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">img1</span><span class="p">,</span> <span class="n">img2</span><span class="p">,</span> <span class="n">img3</span><span class="p">,</span> <span class="o">...</span><span class="p">))</span> <span class="c1"># 纵向拼接</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>示例代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">res1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">hstack</span><span class="p">((</span><span class="n">img1</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="n">res2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">img1</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">res1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">res2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="腐蚀与膨胀">腐蚀与膨胀</h2>
<p>腐蚀和膨胀为经典的两个数字形态学处理算法，一般用于二值图像，本质也是对于核的卷积</p>
<h3 id="腐蚀">腐蚀</h3>
<p>腐蚀操作也是用卷积核扫描图像，只不过<strong>腐蚀操作的卷积核一般都是1</strong>，如果卷积核内部所有像素点都是白色，那么中心点即为白色，否则为黑色，腐蚀效果强弱和卷积核的大小成正相关</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">erode</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">np</span><span class="o">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">uint8</span><span class="p">),</span> <span class="n">iterations</span><span class="o">=</span><span class="n">i</span><span class="p">)</span> <span class="c1"># -&gt; 图像，卷积核，迭代次数</span>
</span></span><span class="line"><span class="cl">    <span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>获取核结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">getStructuringElement</span><span class="p">(</span><span class="n">shape</span><span class="p">,</span> <span class="n">ksize</span><span class="p">,</span> <span class="n">anchor</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>shape:</p>
<ul>
<li>MORPH_RECT ：矩形元素</li>
<li>MORPH_CROSS ：十字形元素</li>
<li>MORPH_ELLIPSE：椭圆形元素</li>
</ul>
<p>ksize:矩阵大小</p>
<h3 id="膨胀">膨胀</h3>
<p>膨胀是腐蚀的相反操作，基本原理是<strong>只要保证卷积核的中心点是非零值</strong>，周边无论是零还是非零值，都会变成非零值</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">k</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_CROSS</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">dilate</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="n">i</span><span class="p">)</span> <span class="c1"># -&gt; 图像，卷积核，迭代次数</span>
</span></span><span class="line"><span class="cl">    <span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="开闭运算">开闭运算</h2>
<h3 id="开运算">开运算</h3>
<p>先腐蚀，后膨胀</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kernel</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_RECT</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_OPEN</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span> <span class="c1"># -&gt; 通过选定参数来执行开运算</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="闭运算">闭运算</h3>
<p>先膨胀，后腐蚀</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kernel</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_RECT</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_CLOSE</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span> <span class="c1"># -&gt; 通过选定参数来执行闭运算</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="梯度运算">梯度运算</h2>
<p>原理：<code>膨胀</code> — <code>腐蚀</code> = <code>边界信息</code></p>
<p>使用例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kernel</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_RECT</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_GRADIENT</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span> <span class="c1"># -&gt; cv2.MORPH_GRADIENT</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="礼帽与黑帽">礼帽与黑帽</h2>
<p>原理：</p>
<ul>
<li><code>礼帽</code>  = <code>原始输入</code> - <code>开运算结果</code> $\rightarrow$ <code>腐蚀掉的部分</code></li>
<li><code>黑帽</code> = <code>闭运算</code>-<code>原始输入</code>$\rightarrow$ <code>更强的的应该被腐蚀掉的部分（因为闭运算中先膨胀就无法腐蚀掉了），相减后没有了，得到的其实是原来图像的轮廓</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">kernel</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">getStructuringElement</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_RECT</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 礼帽</span>
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_TOPHAT</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># hei&#39;mao</span>
</span></span><span class="line"><span class="cl"><span class="n">img3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">MORPH_BLACKHAT</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">img3</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Operating System Chapter3</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter3/</link>
    <pubDate>Sun, 01 Jan 2023 19:59:41 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter3/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="多处理器编程从入门到放弃">多处理器编程：从入门到放弃</h2>
<h3 id="overview">Overview</h3>
<p>复习</p>
<ul>
<li>程序 (源代码<code>S</code>、二进制代码<code>C</code>) = 状态机
<ul>
<li>编译器 $C = \textrm{compile}(S)\newline$</li>
</ul>
</li>
<li>应用视角的操作系统 = syscall 指令</li>
</ul>
<hr>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 在多处理器时代，上面的理解应该作出怎样的变化？</li>
</ul>
<hr>
<p>本次课主要内容</p>
<ul>
<li>并发程序的状态机模型</li>
<li>线程库 <code>thread.h</code></li>
<li>多线程带来的麻烦</li>
</ul>
<h3 id="入门">入门</h3>
<h4 id="three-easy-pieces-并发">Three Easy Pieces: 并发</h4>
<blockquote>
<p>Concurrent: existing, happening, or done <em>at the same time</em>.</p>
<p>In computer science, concurrency refers to the ability of different parts or units of a program, algorithm, or problem to be executed out-of-order or in partial order, without affecting the final outcome. (Wikipedia)</p>
</blockquote>
<p>为什么在这门课 (先) 讲并发？</p>
<ul>
<li>讲并发
<ul>
<li><strong>操作系统是最早的并发程序之一</strong></li>
<li>今天遍地都是多处理器系统 (为什么？)</li>
</ul>
</li>
<li>先讲并发
<ul>
<li>实验是 bottom-up 的 (L1: 多处理器上的 <code>malloc</code>/<code>free</code>)</li>
</ul>
</li>
</ul>
<h4 id="并发的基本单位线程">并发的基本单位：线程</h4>
<p>共享内存的多个执行流</p>
<ul>
<li>执行流拥有独立的堆栈/寄存器</li>
<li>共享全部的内存 (指针可以互相引用)</li>
</ul>
<hr>
<p>用状态机的视角就很容易理解了！</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-1.jpg" title="/img/Operating System/chapter3-1.jpg" data-thumbnail="/img/Operating System/chapter3-1.jpg" data-sub-html="<h2>手写(状态机,stack frame与共享内存)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>状态机,stack frame与共享内存</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-2.jpg" title="/img/Operating System/chapter3-2.jpg" data-thumbnail="/img/Operating System/chapter3-2.jpg" data-sub-html="<h2>手写(线程)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>线程</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-3.jpg" title="/img/Operating System/chapter3-3.jpg" data-thumbnail="/img/Operating System/chapter3-3.jpg" data-sub-html="<h2>手写(并发编程的不确定性)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>并发编程的不确定性</code>)</figcaption>
    </figure>
<h4 id="入门threadh-简化的线程-api">入门：<code>thread.h</code> 简化的线程 API</h4>
<p>我们为大家封装了超级好用的线程 API (<a href="https://jyywiki.cn/pages/OS/2022/demos/thread.h" target="_blank" rel="noopener noreffer"><code>thread.h</code></a>)</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">create</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>创建一个入口函数是<code>fn</code>的线程，并立即开始执行（状态机理解创建 $\rightarrow$ 在状态机里加入一个新的栈帧的列表，并且每次可以选到每一个链表来执行）</p>
<ul>
<li>
<p>void fn(int tid) { &hellip; }</p>
</li>
<li>
<p>参数 <code>tid</code> 从 1 开始编号</p>
</li>
</ul>
</li>
<li>
<p>语义：在状态中新增 stack frame 列表并初始化为 <code>fn(tid)</code></p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">join</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>等待所有运行线程的 <code>fn</code> 返回</li>
<li>在 <code>main</code> 返回时会自动等待所有线程结束</li>
<li><strong>语义：在有其他线程未执行完时死循环，否则返回</strong>（用状态机空转的角度来理解）</li>
</ul>
</li>
<li>
<p>编译时需要增加 <code>-lpthread</code></p>
</li>
</ul>
<p><code>thread.h</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdatomic.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;assert.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define NTHREAD 64
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">enum</span> <span class="p">{</span> <span class="n">T_FREE</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">T_LIVE</span><span class="p">,</span> <span class="n">T_DEAD</span><span class="p">,</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kr">thread</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">status</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_t</span> <span class="kr">thread</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">entry</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="kr">thread</span> <span class="n">tpool</span><span class="p">[</span><span class="n">NTHREAD</span><span class="p">],</span> <span class="o">*</span><span class="n">tptr</span> <span class="o">=</span> <span class="n">tpool</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="o">*</span><span class="nf">wrapper</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="kr">thread</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kr">thread</span><span class="o">-&gt;</span><span class="n">entry</span><span class="p">(</span><span class="kr">thread</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">create</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">fn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">assert</span><span class="p">(</span><span class="n">tptr</span> <span class="o">-</span> <span class="n">tpool</span> <span class="o">&lt;</span> <span class="n">NTHREAD</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">*</span><span class="n">tptr</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="kr">thread</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">id</span> <span class="o">=</span> <span class="n">tptr</span> <span class="o">-</span> <span class="n">tpool</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">status</span> <span class="o">=</span> <span class="n">T_LIVE</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">.</span><span class="n">entry</span> <span class="o">=</span> <span class="n">fn</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">tptr</span><span class="o">-&gt;</span><span class="kr">thread</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">wrapper</span><span class="p">,</span> <span class="n">tptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="o">++</span><span class="n">tptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">join</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NTHREAD</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="kr">thread</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">tpool</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="n">status</span> <span class="o">==</span> <span class="n">T_LIVE</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">pthread_join</span><span class="p">(</span><span class="n">t</span><span class="o">-&gt;</span><span class="kr">thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">t</span><span class="o">-&gt;</span><span class="n">status</span> <span class="o">=</span> <span class="n">T_DEAD</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">cleanup</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="入门-contd">入门 (cont&rsquo;d)</h4>
<p>Hello, Multi-threaded World!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Ta</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;a&#34;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tb</span><span class="p">()</span> <span class="p">{</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;b&#34;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Ta</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译（注意使用<code>-lpthread</code>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc the.c -lpthread 
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行 $\rightarrow$ 交替输出</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-4.png" title="/img/Operating System/chapter3-4.png" data-thumbnail="/img/Operating System/chapter3-4.png" data-sub-html="<h2>Linux(输出结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>输出结果</code>)</figcaption>
    </figure>
<p>利用 <code>thread.h</code> 就可以写出利用多处理器的程序！</p>
<ul>
<li>操作系统会自动把线程放置在不同的处理器上</li>
<li>在后台运行，可以看到 CPU 使用率超过了 100%（2个接近200， 4个接近400）$\rightarrow$ 使用了多个CPU</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-5.png" title="/img/Operating System/chapter3-5.png" data-thumbnail="/img/Operating System/chapter3-5.png" data-sub-html="<h2>top(查看CPU使用率)</h2>">
        
    </a><figcaption class="image-caption">top(<code>查看CPU使用率</code>)</figcaption>
    </figure>
<blockquote>
<p>会编程，你就拥有全世界！</p>
</blockquote>
<p>如何证明线程确实共享内存？</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/shm-test.c" target="_blank" rel="noopener noreffer">shm-test.c</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Thello</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">usleep</span><span class="p">(</span><span class="n">id</span> <span class="o">*</span> <span class="mi">100000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello from thread #%c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="s">&#34;123456789ABCDEF&#34;</span><span class="p">[</span><span class="n">x</span><span class="o">++</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Thello</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-6.png" title="/img/Operating System/chapter3-6.png" data-thumbnail="/img/Operating System/chapter3-6.png" data-sub-html="<h2>Linux(shm-test.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>shm-test.c运行结果</code>)</figcaption>
    </figure>
<hr>
<p>如何证明线程具有独立堆栈 (以及确定它们的范围)？</p>
<ul>
<li><a href="https://jyywiki.cn/pages/OS/2022/demos/stack-probe.c" target="_blank" rel="noopener noreffer">stack-probe.c</a> (输出有点乱？我们还有 <code>sort</code>!)</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__thread</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span> <span class="c1">// thread-local variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__thread</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// objdump to see how thread-local variables are implemented
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">set_cur</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">char</span> <span class="o">*</span><span class="n">get_cur</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="n">cur</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">stackoverflow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">set_cur</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">1024</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">base</span> <span class="o">-</span> <span class="n">get_cur</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Stack size of T%d &gt;= %d KB</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">sz</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tprobe</span><span class="p">(</span><span class="kt">int</span> <span class="n">tid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tprobe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-7.png" title="/img/Operating System/chapter3-7.png" data-thumbnail="/img/Operating System/chapter3-7.png" data-sub-html="<h2>Linux(stack-probe.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>stack-probe.c运行结果</code>)</figcaption>
    </figure>
<p>进行排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc stack-probe.c -lpthread <span class="o">&amp;&amp;</span> ./a.out <span class="p">|</span> sort -nk <span class="m">6</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果：</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-8.png" title="/img/Operating System/chapter3-8.png" data-thumbnail="/img/Operating System/chapter3-8.png" data-sub-html="<h2>stack-probe.c(排序后)</h2>">
        
    </a><figcaption class="image-caption">stack-probe.c(<code>排序后</code>)</figcaption>
    </figure>
<p>$size\ of\ stack=8192KB\newline$</p>
<hr>
<p>更多的习题</p>
<ul>
<li>创建线程使用的是哪个系统调用？</li>
<li>能不能用 gdb 调试？</li>
<li>基本原则：有需求，就能做到 (<a href="https://sourceware.org/gdb/onlinedocs/gdb/Threads.html" target="_blank" rel="noopener noreffer">RTFM</a>)</li>
</ul>
<h4 id="threadh-背后posix-threads"><code>thread.h</code> 背后：POSIX Threads</h4>
<p>想进一步配置线程？</p>
<ul>
<li>设置更大的线程栈</li>
<li>设置 detach 运行 (不在进程结束后被杀死，也不能 join)</li>
<li>……</li>
</ul>
<hr>
<p>POSIX 为我们提供了线程库 (pthreads)</p>
<ul>
<li>
<p><code>man 7 pthreads</code></p>
</li>
<li>
<p>练习：改写 thread.h，使得线程拥有更大的栈</p>
<ul>
<li>可以用 <a href="https://jyywiki.cn/pages/OS/2022/demos/stack-probe.c" target="_blank" rel="noopener noreffer">stack-probe.c</a> 验证</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__thread</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span> <span class="c1">// thread-local variables
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__thread</span> <span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// objdump to see how thread-local variables are implemented
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">void</span> <span class="n">set_cur</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span> <span class="kt">char</span> <span class="o">*</span><span class="n">get_cur</span><span class="p">()</span>         <span class="p">{</span> <span class="k">return</span> <span class="n">cur</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">stackoverflow</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">set_cur</span><span class="p">(</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">1024</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">base</span> <span class="o">-</span> <span class="n">get_cur</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Stack size of T%d &gt;= %d KB</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">id</span><span class="p">,</span> <span class="n">sz</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tprobe</span><span class="p">(</span><span class="kt">int</span> <span class="n">tid</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">id</span> <span class="o">=</span> <span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">stackoverflow</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">create</span><span class="p">(</span><span class="n">Tprobe</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然而，可怕的事情正在悄悄逼近……</p>
<ul>
<li>
<p>多处理器系统中线程的代码可能同时执行</p>
<ul>
<li>两个线程同时执行 <code>x++</code>，结果会是什么呢？</li>
</ul>
</li>
</ul>
<h3 id="放弃1原子性">放弃（1）：原子性</h3>
<h4 id="例子山寨多线程支付宝">例子：山寨多线程支付宝</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">SUCCESS</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">FAIL</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>两个线程并发支付 ¥100 会发生什么？<a href="https://jyywiki.cn/pages/OS/2022/demos/alipay.c" target="_blank" rel="noopener noreffer">alipay.c</a></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-10.jpg" title="/img/Operating System/chapter3-10.jpg" data-thumbnail="/img/Operating System/chapter3-10.jpg" data-sub-html="<h2>手写(山寨支付宝状态机)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>山寨支付宝状态机</code>)</figcaption>
    </figure>
<ul>
<li>账户里会多出用不完的钱！</li>
<li>Bug/漏洞不跟你开玩笑：Mt. Gox Hack 损失650,000
<ul>
<li>今天价值 $28,000,000,000</li>
</ul>
</li>
</ul>
<p><code>alipay.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Alipay_withdraw</span><span class="p">(</span><span class="kt">int</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">balance</span> <span class="o">&gt;=</span> <span class="n">amt</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// unexpected delays
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">balance</span> <span class="o">-=</span> <span class="n">amt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Talipay</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Alipay_withdraw</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Talipay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;balance = %lu</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">balance</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter3-9.png" title="/img/Operating System/chapter3-9.png" data-thumbnail="/img/Operating System/chapter3-9.png" data-sub-html="<h2>Linux(alipay.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>alipay.c运行结果</code>)</figcaption>
    </figure>
<h4 id="例子求和">例子：求和</h4>
<p>分两个线程，计算 $1+1+1+\ldots+1+1+1+1+…+1$ (共计 2n 个 1)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> 运行结果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-11.png" title="/img/Operating System/chapter3-11.png" data-thumbnail="/img/Operating System/chapter3-11.png" data-sub-html="<h2>Linux(sum.c运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>sum.c运行结果</code>)</figcaption>
    </figure>
<ul>
<li>
<p>119790390, 99872322 (结果可以比 <code>N</code> 还要小), &hellip;</p>
</li>
<li>
<p>Inline assembly 也不行</p>
</li>
</ul>
<p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;lock add $1, %0&#34;</span><span class="o">:</span> <span class="s">&#34;+m&#34;</span><span class="p">(</span><span class="n">sum</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-12.png" title="/img/Operating System/chapter3-12.png" data-thumbnail="/img/Operating System/chapter3-12.png" data-sub-html="<h2>Linux(sum.c修改后运行结果)</h2>">
        
    </a><figcaption class="image-caption">Linux(<code>sum.c修改后运行结果</code>)</figcaption>
    </figure>
<p>结果正确，但是运行性能显著下降</p>
<h4 id="原子性的丧失">原子性的丧失</h4>
<blockquote>
<p>“程序 (甚至是一条指令) 独占处理器执行” 的基本假设在现代多处理器系统上不再成立。</p>
</blockquote>
<p>原子性：一段代码执行 (例如 <code>pay()</code>) 独占整个计算机系统</p>
<ul>
<li>单处理器多线程
<ul>
<li>线程在运行时可能被中断，切换到另一个线程执行</li>
</ul>
</li>
<li>多处理器多线程
<ul>
<li>线程根本就是并行执行的</li>
</ul>
</li>
</ul>
<hr>
<p>(历史) 1960s，大家争先在共享内存上实现原子性 (互斥)</p>
<ul>
<li>但几乎所有的实现都是错的，直到 <a href="https://en.wikipedia.org/wiki/Dekker%27s_algorithm" target="_blank" rel="noopener noreffer">Dekker&rsquo;s Algorithm</a>，还只能保证两个线程的互斥</li>
</ul>
<h4 id="原子性的丧失有没有感到后怕">原子性的丧失：有没有感到后怕？</h4>
<p><code>printf</code> 还能在多线程程序里调用吗？</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">void thread1() { while (1) { printf(&#34;a&#34;); } }
</span></span><span class="line"><span class="cl">void thread2() { while (1) { printf(&#34;b&#34;); } }
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们都知道 printf 是有缓冲区的 (为什么？)</p>
<ul>
<li>如果执行 <code>buf[pos++] = ch</code> (<code>pos</code> 共享) 不就💥了吗？</li>
</ul>
<hr>
<p>RTFM!</p>
<p>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ man <span class="m">3</span> <span class="nb">printf</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ATTRIBUTES
</span></span><span class="line"><span class="cl">       For an explanation of the terms used in this section, see attributes<span class="o">(</span>7<span class="o">)</span>.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">       ┌────────────────────────┬───────────────┬────────────────┐
</span></span><span class="line"><span class="cl">       │Interface               │ Attribute     │ Value          │
</span></span><span class="line"><span class="cl">       ├────────────────────────┼───────────────┼────────────────┤
</span></span><span class="line"><span class="cl">       │printf<span class="o">()</span>, fprintf<span class="o">()</span>,    │ Thread safety │ MT-Safe locale │
</span></span><span class="line"><span class="cl">       │sprintf<span class="o">()</span>, snprintf<span class="o">()</span>,  │               │                │
</span></span><span class="line"><span class="cl">       │vprintf<span class="o">()</span>, vfprintf<span class="o">()</span>,  │               │                │
</span></span><span class="line"><span class="cl">       │vsprintf<span class="o">()</span>, vsnprintf<span class="o">()</span> │               │                │
</span></span><span class="line"><span class="cl">       └────────────────────────┴───────────────┴────────────────┘
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>进程安全！</strong></p>
<h4 id="实现原子性">实现原子性</h4>
<p>互斥和原子性是本学期的重要主题</p>
<ul>
<li>
<p><code>lock(&amp;lk)</code></p>
</li>
<li>
<p><code>unlock(&amp;lk)</code></p>
<ul>
<li>实现临界区 (critical section) 之间的绝对串行化</li>
<li>程序的其他部分依然可以并行执行</li>
</ul>
</li>
</ul>
<hr>
<p>99% 的并发问题都可以用一个队列解决</p>
<ul>
<li>
<p>把大任务切分成可以并行的小任务</p>
</li>
<li>
<p>worker thread 去锁保护的队列里取任务</p>
</li>
<li>
<p>除去不可并行的部分，剩下的部分可以获得线性的加速</p>
<ul>
<li>$Thm.\ T_n&lt;T_{\infty}+\frac {T_1}{n}$(<a href="https://web.mit.edu/dimitrib/www/pdc.html" target="_blank" rel="noopener noreffer">PDC</a>, Chap. 1)</li>
</ul>
</li>
</ul>
<h3 id="放弃2顺序">放弃（2）：顺序</h3>
<h4 id="例子求和-再次出现">例子：求和 (再次出现)</h4>
<p>分两个线程，计算 $1+1+1+\ldots+1+1+1+1+…+1$ (共计 2n 个 1)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define N 100000000
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">long</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Tsum</span><span class="p">()</span> <span class="p">{</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">sum</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">join</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;sum = %ld</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">sum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们好像忘记给 <a href="https://jyywiki.cn/pages/OS/2022/demos/sum.c" target="_blank" rel="noopener noreffer">sum.c</a> 添加编译优化了？</p>
<ul>
<li><code>-O1</code>: 100000000 😱😱</li>
<li><code>-O2</code>: 200000000 😱😱😱</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -O1 sum.c -lpthread <span class="o">&amp;&amp;</span> ./a.out 
</span></span><span class="line"><span class="cl"><span class="nv">sum</span> <span class="o">=</span> <span class="m">100000000</span>
</span></span><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -O2 sum.c -lpthread <span class="o">&amp;&amp;</span> ./a.out 
</span></span><span class="line"><span class="cl"><span class="nv">sum</span> <span class="o">=</span> <span class="m">200000000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="顺序的丧失">顺序的丧失</h4>
<blockquote>
<p>编译器对内存访问 “eventually consistent” 的处理导致共享内存作为线程同步工具的失效。</p>
</blockquote>
<p>刚才的例子</p>
<ul>
<li><code>-O1</code>: <code>R[eax] = sum; R[eax] += N; sum = R[eax]</code></li>
<li><code>-O2</code>: <code>sum += N;</code></li>
<li>(你的编译器也许是不同的结果)</li>
</ul>
<p>另一个例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// would be optimized to
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span> <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -c -O1 sum.c <span class="o">&amp;&amp;</span> objdump -d sum.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sum.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;wrapper&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">48</span> <span class="m">83</span> ec <span class="m">08</span>          	sub    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">   8:	<span class="m">48</span> <span class="m">89</span> f8             	mov    %rdi,%rax
</span></span><span class="line"><span class="cl">   b:	8b 3f                	mov    <span class="o">(</span>%rdi<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl">   d:	ff <span class="m">50</span> <span class="m">10</span>             	call   *0x10<span class="o">(</span>%rax<span class="o">)</span>
</span></span><span class="line"><span class="cl">  10:	b8 <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span>       	mov    <span class="nv">$0</span>x0,%eax
</span></span><span class="line"><span class="cl">  15:	<span class="m">48</span> <span class="m">83</span> c4 <span class="m">08</span>          	add    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">  19:	c3                   	ret    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">000000000000001a &lt;Tsum&gt;:
</span></span><span class="line"><span class="cl">  1a:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">  1e:	<span class="m">48</span> 8b <span class="m">15</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	mov    0x0<span class="o">(</span>%rip<span class="o">)</span>,%rdx        <span class="c1"># 25 &lt;Tsum+0xb&gt; -&gt; R[eax] = sum</span>
</span></span><span class="line"><span class="cl">  25:	<span class="m">48</span> 8d <span class="m">42</span> <span class="m">01</span>          	lea    0x1<span class="o">(</span>%rdx<span class="o">)</span>,%rax		 <span class="c1"># -&gt; R[eax] += N, sum = R[eax]</span>
</span></span><span class="line"><span class="cl">  29:	<span class="m">48</span> <span class="m">81</span> c2 <span class="m">01</span> e1 f5 <span class="m">05</span> 	add    <span class="nv">$0</span>x5f5e101,%rdx
</span></span><span class="line"><span class="cl">  30:	<span class="m">48</span> <span class="m">89</span> c1             	mov    %rax,%rcx
</span></span><span class="line"><span class="cl">  33:	<span class="m">48</span> <span class="m">83</span> c0 <span class="m">01</span>          	add    <span class="nv">$0</span>x1,%rax
</span></span><span class="line"><span class="cl">  37:	<span class="m">48</span> <span class="m">39</span> d0             	cmp    %rdx,%rax
</span></span><span class="line"><span class="cl">  3a:	<span class="m">75</span> f4                	jne    <span class="m">30</span> &lt;Tsum+0x16&gt;
</span></span><span class="line"><span class="cl">  3c:	<span class="m">48</span> <span class="m">89</span> 0d <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	mov    %rcx,0x0<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 43 &lt;Tsum+0x29&gt;</span>
</span></span><span class="line"><span class="cl">  43:	c3                   	ret    
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter3-13.jpg" title="/img/Operating System/chapter3-13.jpg" data-thumbnail="/img/Operating System/chapter3-13.jpg" data-sub-html="<h2>手写(O1模式下优化)</h2>">
        
    </a><figcaption class="image-caption">手写(<code>O1模式下优化</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc -c -O2 sum.c <span class="o">&amp;&amp;</span> objdump -d sum.o
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sum.o：     文件格式 elf64-x86-64
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Disassembly of section .text:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000000</span> &lt;wrapper&gt;:
</span></span><span class="line"><span class="cl">   0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">   4:	<span class="m">48</span> <span class="m">83</span> ec <span class="m">08</span>          	sub    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">   8:	<span class="m">48</span> <span class="m">89</span> f8             	mov    %rdi,%rax
</span></span><span class="line"><span class="cl">   b:	8b 3f                	mov    <span class="o">(</span>%rdi<span class="o">)</span>,%edi
</span></span><span class="line"><span class="cl">   d:	ff <span class="m">50</span> <span class="m">10</span>             	call   *0x10<span class="o">(</span>%rax<span class="o">)</span>
</span></span><span class="line"><span class="cl">  10:	<span class="m">31</span> c0                	xor    %eax,%eax
</span></span><span class="line"><span class="cl">  12:	<span class="m">48</span> <span class="m">83</span> c4 <span class="m">08</span>          	add    <span class="nv">$0</span>x8,%rsp
</span></span><span class="line"><span class="cl">  16:	c3                   	ret    
</span></span><span class="line"><span class="cl">  17:	<span class="m">66</span> 0f 1f <span class="m">84</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	nopw   0x0<span class="o">(</span>%rax,%rax,1<span class="o">)</span>
</span></span><span class="line"><span class="cl">  1e:	<span class="m">00</span> <span class="m">00</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">0000000000000020</span> &lt;Tsum&gt;:
</span></span><span class="line"><span class="cl">  20:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl">  24:	<span class="m">48</span> <span class="m">81</span> <span class="m">05</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> <span class="m">00</span> 	addq   <span class="nv">$0</span>x5f5e100,0x0<span class="o">(</span>%rip<span class="o">)</span>        <span class="c1"># 2f &lt;Tsum+0xf&gt;</span>
</span></span><span class="line"><span class="cl">  2b:	<span class="m">00</span> e1 f5 <span class="m">05</span> 
</span></span><span class="line"><span class="cl">  2f:	c3                   	ret 
</span></span></code></pre></td></tr></table>
</div>
</div><p>O2优化的比较彻底，只add了一次（出问题的概率比较低）</p>
<h4 id="实现源代码的按顺序翻译">实现源代码的按顺序翻译</h4>
<p>在代码中插入 “优化不能穿越” 的 barrier</p>
<ul>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">asm</span> <span class="nf">volatile</span> <span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:::</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Barrier 的含义是 “可以读写任何内存”</li>
</ul>
</li>
<li>
<p>使用<code>volatile</code>变量</p>
<ul>
<li>保持 C 语义和汇编语义一致</li>
</ul>
</li>
</ul>
<hr>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">extern</span> <span class="kt">int</span> <span class="k">volatile</span> <span class="n">done</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">done</span><span class="p">)</span> <span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="放弃-3可见性">放弃 (3)：可见性</h3>
<h4 id="例子">例子</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">T1</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="o">:</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span> <span class="c1">// compiler barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;y = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span><span class="s">&#34;&#34;</span> <span class="o">:</span> <span class="o">:</span> <span class="s">&#34;memory&#34;</span><span class="p">);</span> <span class="c1">// compiler barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;x = %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>问题：我们最终能看到哪些结果？</p>
<p>状态机</p>
<div class="mermaid" id="id-1"></div>
<ul>
<li>mem-ordering.c
<ul>
<li>输出不好读？<code>pipe to head -n 1000000 | sort | uniq -c</code></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">flag</span><span class="p">;</span> <span class="c1">//开关初始为0（关着），原子变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define FLAG atomic_load(&amp;flag) </span><span class="c1">//原子读
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define FLAG_XOR(val) atomic_fetch_xor(&amp;flag, val) </span><span class="c1">//原子异或
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define WAIT_FOR(cond) while (!(cond)) ;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_x_read_y</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// x = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// y_val = y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">y_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">y_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_y_read_x</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// y = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// x_val = x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">x_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">x_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T1</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">));</span> <span class="c1">//等开关1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">write_x_read_y</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//关掉开关1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">));</span> <span class="c1">//等开关2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">write_y_read_x</span><span class="p">();</span> 
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="c1">//关掉开关2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tsync</span><span class="p">()</span> <span class="p">{</span> <span class="c1">//控制线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">//布置好初值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">__sync_synchronize</span><span class="p">();</span> <span class="c1">// full barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>            <span class="c1">// + delay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">//确定开关是关着的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//开关的两个bit从0变为1（开启开关1，2）（原子操作）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// T1 and T2 clear 0/1-bit, respectively
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WAIT_FOR</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsync</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>-O2模式下编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">00000000000001a0 &lt;write_x_read_y&gt;:
</span></span><span class="line"><span class="cl"> 1a0:	f3 0f 1e fa          	endbr64 
</span></span><span class="line"><span class="cl"> 1a4:	c7 05 00 00 00 00 01 	movl   $0x1,0x0(%rip)        # 1ae &lt;write_x_read_y+0xe&gt;
</span></span><span class="line"><span class="cl"> 1ab:	00 00 00 
</span></span><span class="line"><span class="cl"> 1ae:	8b 15 00 00 00 00    	mov    0x0(%rip),%edx        # 1b4 &lt;write_x_read_y+0x14&gt;
</span></span><span class="line"><span class="cl"> 1b4:	48 8d 35 00 00 00 00 	lea    0x0(%rip),%rsi        # 1bb &lt;write_x_read_y+0x1b&gt;
</span></span><span class="line"><span class="cl"> 1bb:	bf 01 00 00 00       	mov    $0x1,%edi
</span></span><span class="line"><span class="cl"> 1c0:	31 c0                	xor    %eax,%eax
</span></span><span class="line"><span class="cl"> 1c2:	e9 00 00 00 00       	jmp    1c7 &lt;write_x_read_y+0x27&gt;
</span></span><span class="line"><span class="cl"> 1c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
</span></span><span class="line"><span class="cl"> 1ce:	00 00 
</span></span></code></pre></td></tr></table>
</div>
</div><p>利用脚本来统计，不知道为啥自己的乌班图💩🐴跑出来都是01，00，01，10，11都跑出来了，和我们的状态机模型不符🤡</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-14.png" title="/img/Operating System/chapter3-14.png" data-thumbnail="/img/Operating System/chapter3-14.png" data-sub-html="<h2>From class(输出结果)</h2>">
        
    </a><figcaption class="image-caption">From class(<code>输出结果</code>)</figcaption>
    </figure>
<h4 id="现代处理器处理器也是-动态-编译器">现代处理器：处理器也是 (动态) 编译器！</h4>
<p>单个处理器把汇编代码 (用电路) “编译” 成更小的 $\mu ops\newline$</p>
<ul>
<li>RF[9] = load(RF[7] + 400)</li>
<li>store(RF[12], RF[13])</li>
<li>RF[3] = RF[4] + RF[5]
<ul>
<li>每个 $\mu op$ 都有 Fetch, Issue, Execute, Commit 四个阶段</li>
</ul>
</li>
</ul>
<hr>
<p>在任何时刻，处理器都维护一个 $\mu op$ 的 “池子”</p>
<ul>
<li>
<p>每一周期向池子补充尽可能多的$\mu op\newline$</p>
<ul>
<li>“多发射”</li>
</ul>
</li>
<li>
<p>每一周期 (在不违反编译正确性的前提下) 执行尽可能多的$\mu op\newline$</p>
<ul>
<li>“乱序执行”、“按序提交”</li>
</ul>
</li>
<li>
<p>这就是《计算机体系结构》 (剩下就是木桶效应，哪里短板补哪里)</p>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-15.jpg" title="/img/Operating System/chapter3-15.jpg" data-thumbnail="/img/Operating System/chapter3-15.jpg" data-sub-html="<h2>神书(《计算机体系结构——量化研究方法》)</h2>">
        
    </a><figcaption class="image-caption">神书(<code>《计算机体系结构——量化研究方法》</code>)</figcaption>
    </figure>
<h4 id="多处理器间即时可见性的丧失">多处理器间即时可见性的丧失</h4>
<blockquote>
<p>满足单处理器 eventual memory consistency 的执行，在多处理器上可能无法序列化！</p>
</blockquote>
<p>当 $x \ne y$ 时，对 $x ,y$ 的内存读写可以交换顺序</p>
<ul>
<li>它们甚至可以在同一个周期里完成 (只要 load/store unit 支持)</li>
<li>如果写x发生 cache miss，可以让读y先执行
<ul>
<li>满足 “尽可能执行 “$\mu op$” 的原则，最大化处理器性能</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">     # &lt;-----------+
</span></span><span class="line"><span class="cl">movl $1, (x)   #   |
</span></span><span class="line"><span class="cl">movl (y), %eax # --+
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在多处理器上的表现
<ul>
<li>两个处理器分别看到 $y=0 和 x=0\newline$</li>
</ul>
</li>
</ul>
<h4 id="宽松内存模型-relaxedweak-memory-model">宽松内存模型 (Relaxed/Weak Memory Model)</h4>
<blockquote>
<p>宽松内存模型的目的是使单处理器的执行更高效。</p>
</blockquote>
<p>x86 已经是市面上能买到的 “最强” 的内存模型了 😂</p>
<ul>
<li>这也是 Intel 自己给自己加的包袱</li>
<li>看看 <a href="https://research.swtch.com/mem-weak@2x.png" target="_blank" rel="noopener noreffer">ARM/RISC-V</a> 吧，根本就是个分布式系统</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-16.png" title="/img/Operating System/chapter3-16.png" data-thumbnail="/img/Operating System/chapter3-16.png" data-sub-html="<h2>x86(内存模型)</h2>">
        
    </a><figcaption class="image-caption">x86(<code>内存模型</code>)</figcaption>
    </figure>
<p><strong>(x86-TSO in <a href="https://research.swtch.com/hwmm" target="_blank" rel="noopener noreffer">Hardware memory models</a> by Russ Cox)</strong></p>
<hr>
<p><strong>ARM/RISC-V</strong></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-17.png" title="/img/Operating System/chapter3-17.png" data-thumbnail="/img/Operating System/chapter3-17.png" data-sub-html="<h2>ARM/RISC-V(内存模型)</h2>">
        
    </a><figcaption class="image-caption">ARM/RISC-V(<code>内存模型</code>)</figcaption>
    </figure>
<h4 id="实现顺序一致性">实现顺序一致性</h4>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter3-18.png" title="/img/Operating System/chapter3-18.png" data-thumbnail="/img/Operating System/chapter3-18.png" data-sub-html="<h2>改良(内存模型)</h2>">
        
    </a><figcaption class="image-caption">改良(<code>内存模型</code>)</figcaption>
    </figure>
<hr>
<p>软件做不到，硬件来帮忙</p>
<ul>
<li>
<p>Memory barrier: __sync_synchronize() (RTFM)</p>
<ul>
<li>Compiler barrier + fence 指令</li>
<li>插入 fence 指令后，将阻止 x=y=0</li>
</ul>
</li>
<li>
<p>原子指令 (lock,prefix, lr/sc, &hellip;)</p>
<ul>
<li><code>stdatomic.h</code></li>
</ul>
</li>
</ul>
<p>修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;thread.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">atomic_int</span> <span class="n">flag</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="cp">#define FLAG atomic_load(&amp;flag)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define FLAG_XOR(val) atomic_fetch_xor(&amp;flag, val)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define WAIT_FOR(cond) while (!(cond)) ;
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_x_read_y</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// x = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;mfence;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// y_val = y
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">y_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">y_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="n">__attribute__</span><span class="p">((</span><span class="n">noinline</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">write_y_read_x</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x_val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">asm</span> <span class="k">volatile</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl $1, %0;&#34;</span> <span class="c1">// y = 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="s">&#34;mfence;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;movl %2, %1;&#34;</span> <span class="c1">// x_val = x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">:</span> <span class="s">&#34;=m&#34;</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="s">&#34;=r&#34;</span><span class="p">(</span><span class="n">x_val</span><span class="p">)</span> <span class="o">:</span> <span class="s">&#34;m&#34;</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d &#34;</span><span class="p">,</span> <span class="n">x_val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T1</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_x_read_y</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">T2</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">WAIT_FOR</span><span class="p">((</span><span class="n">FLAG</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">write_y_read_x</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Tsync</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">x</span> <span class="o">=</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">__sync_synchronize</span><span class="p">();</span> <span class="c1">// full barrier
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">usleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>            <span class="c1">// + delay
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">FLAG_XOR</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// T1 and T2 clear 0/1-bit, respectively
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">WAIT_FOR</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">T2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">create</span><span class="p">(</span><span class="n">Tsync</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>不会再看见00的组合了</p>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 如何理解多处理器系统？</li>
</ul>
<hr>
<p>Take-away message</p>
<ul>
<li>多处理器编程：入门
<ul>
<li>多处理器程序 = 状态机 (共享内存；非确定选择线程执行)</li>
<li>thread.h = create + join</li>
</ul>
</li>
<li>多处理器编程：放弃你对 “程序” 的旧理解
<ul>
<li>不原子、能乱序、不立即可见（现代处理器就是一个动态的数据流分析器）
<ul>
<li>来自于编译优化 (处理器也是编译器)</li>
<li><a href="https://www.usenix.org/events/osdi10/tech/full_papers/Xiong.pdf" target="_blank" rel="noopener noreffer">Ad hoc synchronization considered harmful</a> (OSDI'10)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
<item>
    <title>Operating System Chapter2</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter2/</link>
    <pubDate>Sat, 31 Dec 2022 19:30:30 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter2/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="操作系统上的程序">操作系统上的程序</h2>
<h3 id="overview">Overview</h3>
<h4 id="复习">复习</h4>
<p>什么是操作系统？</p>
<ul>
<li>应用视角 (设计): 一组对象 (进程/文件/&hellip;) + API</li>
<li>硬件视角 (实现): 一个 C 程序</li>
</ul>
<h4 id="本次课程主要问题">本次课程主要问题</h4>
<ul>
<li>到底什么是”程序”？</li>
</ul>
<h4 id="本次课主要内容">本次课主要内容</h4>
<ul>
<li>程序的状态机模型 (和编译器)</li>
<li>操作系统上的 {最小/一般/图形} 程序</li>
</ul>
<h3 id="状态机与数字电路">状态机与数字电路</h3>
<p>数字逻辑电路</p>
<ul>
<li>状态 = 寄存器保存的值 (flip-flop)</li>
<li>初始状态 = RESET (implementation dependent)</li>
<li>迁移 = 组合逻辑电路计算寄存器下一周期的值</li>
</ul>
<p>例子：
$$
\begin{align}
&amp;X^{&rsquo;}= \neg X \wedge Y\newline
&amp;Y^{&rsquo;}= \neg X \wedge \neg Y\newline
\end{align}
$$</p>
<div class="mermaid" id="id-1"></div>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define REGS_FOREACH(_)  _(X) _(Y)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define RUN_LOGIC        X1 = !X &amp;&amp; Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         Y1 = !X &amp;&amp; !Y;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define DEFINE(X)        static int X, X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UPDATE(X)        X = X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PRINT(X)         printf(#X &#34; = %d; &#34;, X);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// clock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">RUN_LOGIC</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">PRINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">UPDATE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>宏展开</p>
<p>使用mingw命令(注意去掉头文件，否则头文件也会一并展开，就没法看了🤡)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -E main.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>展开后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">X1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">X1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">;</span> <span class="n">Y1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;X&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Y&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span> <span class="o">=</span> <span class="n">X1</span><span class="p">;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更完整的实现：数码管显示</p>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define REGS_FOREACH(_)  _(X) _(Y)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OUTS_FOREACH(_)  _(A) _(B) _(C) _(D) _(E) _(F) _(G)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define RUN_LOGIC        X1 = !X &amp;&amp; Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         Y1 = !X &amp;&amp; !Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         A  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         B  = 1; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         C  = (!X &amp;&amp; !Y) || (!X &amp;&amp; Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         D  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         E  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         F  = (!X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         G  = (X &amp;&amp; !Y);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define DEFINE(X)   static int X, X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UPDATE(X)   X = X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PRINT(X)    printf(#X &#34; = %d; &#34;, X);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// clock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">RUN_LOGIC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">OUTS_FOREACH</span><span class="p">(</span><span class="n">PRINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">UPDATE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>宏展开</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">X1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">A1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">B</span><span class="p">,</span> <span class="n">B1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">C</span><span class="p">,</span> <span class="n">C1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">D</span><span class="p">,</span> <span class="n">D1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">E</span><span class="p">,</span> <span class="n">E1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">F</span><span class="p">,</span> <span class="n">F1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">G</span><span class="p">,</span> <span class="n">G1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">X1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">;</span> <span class="n">Y1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">;</span> <span class="n">A</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">B</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">C</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">);</span> <span class="n">D</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">E</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">F</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">G</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;A&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">A</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;B&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">B</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;C&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;D&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">D</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;E&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">E</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;F&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">F</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;G&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">G</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span> <span class="o">=</span> <span class="n">X1</span><span class="p">;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>python后端</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">fileinput</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">TEMPLATE</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1"></span><span class="se">\033</span><span class="s1">[2J</span><span class="se">\033</span><span class="s1">[1;1f
</span></span></span><span class="line"><span class="cl"><span class="s1">     AAAAAAAAA
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    GGGGGGGGGG
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">    DDDDDDDDD
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span> 
</span></span><span class="line"><span class="cl"><span class="n">BLOCK</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">0</span><span class="p">:</span> <span class="s1">&#39;</span><span class="se">\033</span><span class="s1">[37m░</span><span class="se">\033</span><span class="s1">[0m&#39;</span><span class="p">,</span> <span class="c1"># STFW: ANSI Escape Code</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span><span class="p">:</span> <span class="s1">&#39;</span><span class="se">\033</span><span class="s1">[31m█</span><span class="se">\033</span><span class="s1">[0m&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">VARS</span> <span class="o">=</span> <span class="s1">&#39;ABCDEFG&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">VARS</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">globals</span><span class="p">()[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">stdin</span> <span class="o">=</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">exec</span><span class="p">(</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">pic</span> <span class="o">=</span> <span class="n">TEMPLATE</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">VARS</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">pic</span> <span class="o">=</span> <span class="n">pic</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">BLOCK</span><span class="p">[</span><span class="nb">globals</span><span class="p">()[</span><span class="n">v</span><span class="p">]])</span> <span class="c1"># &#39;A&#39; -&gt; BLOCK[A], ...</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">pic</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用方法</p>
<p>先通过gcc将c文件编译为exe文件</p>
<p>然后cmd命令端输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">logisim.exe <span class="p">|</span> python seven-seg.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果：循环出现如下画面</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-1.png" title="/img/Operating System/chapter2-1.png" data-thumbnail="/img/Operating System/chapter2-1.png" data-sub-html="<h2>python后端(image 1)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-2.png" title="/img/Operating System/chapter2-2.png" data-thumbnail="/img/Operating System/chapter2-2.png" data-sub-html="<h2>python后端(image 2)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-3.png" title="/img/Operating System/chapter2-3.png" data-thumbnail="/img/Operating System/chapter2-3.png" data-sub-html="<h2>python后端(image 3)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 3</code>)</figcaption>
    </figure>
<ul>
<li>
<p>会编程，你就拥有全世界！</p>
</li>
<li>
<p>同样的方式可以模拟任何数字系统</p>
<ul>
<li>当然，也包括计算机系统</li>
</ul>
</li>
</ul>
<p>UNIX 哲学</p>
<ul>
<li>Make each program do one thing well</li>
<li>Expect the output of every program to become the input to another</li>
</ul>
<h3 id="什么是程序源代码视角">什么是程序（源代码视角）</h3>
<p>程序就是状态机 (你在 gdb 里看到的)</p>
<p>代码：hanoi-r.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">hanoi</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="kt">char</span> <span class="n">to</span><span class="p">,</span> <span class="kt">char</span> <span class="n">via</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c -&gt; %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">via</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>     <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span>  <span class="n">via</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">via</span><span class="p">,</span>  <span class="n">to</span><span class="p">,</span>  <span class="n">from</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="c-程序的状态机模型角度一">C 程序的状态机模型（角度一）</h4>
<p><strong>(语义，semantics)</strong></p>
<ul>
<li>状态 = 堆 + 栈</li>
<li>初始状态 = <code>main</code> 的第一条语句</li>
<li>迁移 = 执行一条简单语句
<ul>
<li>任何 C 程序都可以改写成 “非复合语句” 的 C 代码</li>
<li><a href="https://cil-project.github.io/cil/" target="_blank" rel="noopener noreffer">真的有这种工具</a> (C Intermediate Language) 和<a href="https://gitlab.com/zsaleeba/picoc" target="_blank" rel="noopener noreffer">解释器</a></li>
</ul>
</li>
</ul>
<hr>
<p>(这还只是 “粗浅” 的理解)</p>
<ul>
<li>Talk is cheap. Show me the code. (Linus Torvalds): 任何真正的理解都应该落到可以执行的代码</li>
</ul>
<h4 id="c-程序的状态机模型角度二">C 程序的状态机模型（角度二）</h4>
<p><strong>(语义，semantics)</strong></p>
<ul>
<li>状态 = stack frame 的列表 (每个 frame 有 PC <code>program counter</code> ) + 全局变量</li>
<li>初始状态 = main(argc, argv), 全局变量初始化</li>
<li>迁移 = 执行 top stack frame PC 的语句; PC++
<ul>
<li>函数调用 = push frame (frame.PC = 入口)</li>
<li>函数返回 = pop frame</li>
</ul>
</li>
</ul>
<p><strong>应用：将任何递归程序就地转为非递归</strong>（模拟$stack$）</p>
<p>$hanoi-nr.c\newline$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">pc</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">via</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Frame</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define call(...) ({ *(++top) = (Frame) { .pc = 0, __VA_ARGS__ }; })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define ret()     ({ top--; })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define goto(loc) ({ f-&gt;pc = (loc) - 1; })
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">hanoi</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="kt">char</span> <span class="n">to</span><span class="p">,</span> <span class="kt">char</span> <span class="n">via</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Frame</span> <span class="n">stk</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="o">*</span><span class="n">top</span> <span class="o">=</span> <span class="n">stk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">call</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">via</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">Frame</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span> <span class="p">(</span><span class="n">f</span> <span class="o">=</span> <span class="n">top</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">stk</span><span class="p">;</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">pc</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">pc</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c -&gt; %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">);</span> <span class="k">goto</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">);</span>   <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span>       <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">);</span>  <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span> <span class="n">ret</span><span class="p">();</span>                                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">default</span><span class="o">:</span> <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>A → B, B → A 的迎刃而解
<ul>
<li>还是一样的 <code>call()</code>，但放入不同的 <code>Frame</code></li>
</ul>
</li>
</ul>
<h3 id="什么是程序-二进制代码视角">什么是程序 (二进制代码视角)</h3>
<p>还是状态机	(没看过南大的计算机基础和数字逻辑课到这多少有点🤡了)</p>
<ul>
<li>状态 = 内存 <code>M</code> + 寄存器 <code>R</code></li>
<li>初始状态 = (稍后回答)</li>
<li>迁移 = 执行一条指令
<ul>
<li>我们花了一整个《计算机系统基础》解释这件事</li>
<li>gdb 同样可以观察状态和执行</li>
</ul>
</li>
</ul>
<hr>
<p>操作系统上的程序</p>
<ul>
<li>
<p>所有的指令都只能<code>计算</code></p>
<ul>
<li>deterministic: mov, add, sub, call, &hellip;</li>
<li>non-deterministic: rdrand, &hellip;</li>
<li>但这些指令甚至都无法使程序停下来 ,直接🤡, 对于操作系统来说没有什么🐔用(NEMU: 加条 <code>trap</code> 指令)</li>
</ul>
</li>
</ul>
<h4 id="一条特殊的指令">一条特殊的指令</h4>
<p>调用操作系统 <code>syscall</code></p>
<ul>
<li>把(<code>M</code>, <code>R</code>)<strong>完全交给操作系统</strong>，任其修改
<ul>
<li>一个有趣的问题：如果程序不打算完全信任操作系统？</li>
</ul>
</li>
<li>实现与操作系统中的其他对象交互
<ul>
<li>读写文件/操作系统状态 (例如把文件内容写入 M<em>M</em>)</li>
<li>改变进程 (运行中状态机) 的状态，例如创建进程/销毁自己</li>
</ul>
</li>
</ul>
<hr>
<p><strong>程序 = 计算 + syscall</strong></p>
<div class="mermaid" id="id-2"></div>
<h4 id="问题怎么构造一个最小的-hello-world">问题：怎么构造一个最小的 Hello, World？</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>gcc 编译出来的文件不满足 “最小”</p>
<ul>
<li><code>--verbose</code>可以查看所有编译选项 (真不少)
<ul>
<li><code>printf </code>变成了 puts@plt</li>
</ul>
</li>
<li><code>-static</code> 会复制 libc</li>
</ul>
<p>gcc能玩的这么多，看来✌️之前天天靠现成$IDE$多少沾点🤡了</p>
<p>实际使用<code>--verbose</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc --verbose hello.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-4.png" title="/img/Operating System/chapter2-4.png" data-thumbnail="/img/Operating System/chapter2-4.png" data-sub-html="<h2>效果(on windows)</h2>">
        
    </a><figcaption class="image-caption">效果(<code>on windows</code>)</figcaption>
    </figure>
<p>实际使用<code>–static</code>(不依赖动态链接库)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -static hello.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译出来的文件会很大（我的是53KB）</p>
<hr>
<p>直接硬来？</p>
<p>强行编译 + 链接：<code>gcc -c</code> + <code>ld</code></p>
<ul>
<li>
<p>直接用 ld 链接失败</p>
<ul>
<li>ld 不知道怎么链接库函数……</li>
</ul>
</li>
<li>
<p>空的 main 函数倒是可以</p>
<ul>
<li>链接时得到奇怪的警告 (可以定义成 <code>_start</code> 避免警告)</li>
<li>但 Segmentation Fault 了……</li>
</ul>
</li>
</ul>
<p>找了一下<code>Segmentation Fault</code></p>
<p>$From\ wikipedia\newline$
$\rightarrow$ <a href="https://en.wikipedia.org/wiki/Segmentation_fault" target="_blank" rel="noopener noreffer">address</a></p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Computing" target="_blank" rel="noopener noreffer">computing</a>, a <strong>segmentation fault</strong> (often shortened to <strong>segfault</strong>) or <strong>access violation</strong> is a <a href="https://en.wikipedia.org/wiki/Fault_%28computing%29" target="_blank" rel="noopener noreffer">fault</a>, or failure condition, raised by hardware with <a href="https://en.wikipedia.org/wiki/Memory_protection" target="_blank" rel="noopener noreffer">memory protection</a>, notifying an <a href="https://en.wikipedia.org/wiki/Operating_system" target="_blank" rel="noopener noreffer">operating system</a> (OS) the software has attempted to access a restricted area of memory (a memory access violation). On standard <a href="https://en.wikipedia.org/wiki/X86" target="_blank" rel="noopener noreffer">x86</a> computers, this is a form of <a href="https://en.wikipedia.org/wiki/General_protection_fault" target="_blank" rel="noopener noreffer">general protection fault</a>. The <a href="https://en.wikipedia.org/wiki/Operating_system_kernel" target="_blank" rel="noopener noreffer">operating system kernel</a> will, in response, usually perform some corrective action, generally passing the fault on to the offending <a href="https://en.wikipedia.org/wiki/Process_%28computing%29" target="_blank" rel="noopener noreffer">process</a> by sending the process a <a href="https://en.wikipedia.org/wiki/Signal_%28computing%29" target="_blank" rel="noopener noreffer">signal</a>. Processes can in some cases install a custom signal handler, allowing them to recover on their own,[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-Peter_Van_der_Linden-1" target="_blank" rel="noopener noreffer">1]</a> but otherwise the OS default signal handler is used, generally causing <a href="https://en.wikipedia.org/wiki/Abnormal_termination" target="_blank" rel="noopener noreffer">abnormal termination</a> of the process (a program <a href="https://en.wikipedia.org/wiki/Crash_%28computing%29" target="_blank" rel="noopener noreffer">crash</a>), and sometimes a <a href="https://en.wikipedia.org/wiki/Core_dump" target="_blank" rel="noopener noreffer">core dump</a>.</p>
<p>Segmentation faults are a common class of error in programs written in languages like <a href="https://en.wikipedia.org/wiki/C_%28programming_language%29" target="_blank" rel="noopener noreffer">C</a> that provide low-level memory access and few to no safety checks. They arise primarily due to errors in use of <a href="https://en.wikipedia.org/wiki/Pointer_%28computer_programming%29" target="_blank" rel="noopener noreffer">pointers</a> for <a href="https://en.wikipedia.org/wiki/Virtual_memory" target="_blank" rel="noopener noreffer">virtual memory</a> addressing, particularly illegal access. Another type of memory access error is a <a href="https://en.wikipedia.org/wiki/Bus_error" target="_blank" rel="noopener noreffer">bus error</a>, which also has various causes, but is today much rarer; these occur primarily due to incorrect <em>physical</em> memory addressing, or due to misaligned memory access – these are memory references that the hardware <em>cannot</em> address, rather than references that a process is not <em>allowed</em> to address.</p>
<p>Many programming languages may employ mechanisms designed to avoid segmentation faults and improve memory safety. For example, <a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29" target="_blank" rel="noopener noreffer">Rust</a> employs an ownership-based[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-2" target="_blank" rel="noopener noreffer">2]</a> model to ensure memory safety.[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-3" target="_blank" rel="noopener noreffer">3]</a> Other languages, such as <a href="https://en.wikipedia.org/wiki/Lisp_%28programming_language%29" target="_blank" rel="noopener noreffer">Lisp</a> and <a href="https://en.wikipedia.org/wiki/Java_%28programming_language%29" target="_blank" rel="noopener noreffer">Java</a>, employ <a href="https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" target="_blank" rel="noopener noreffer">garbage collection</a>,[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-4" target="_blank" rel="noopener noreffer">4]</a> which avoids certain classes of memory errors that could lead to segmentation faults.[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-5" target="_blank" rel="noopener noreffer">5]</a></p>
</blockquote>
<p>主要和非法访问内存有关</p>
<p>解决方法：观察程序（状态机）执行</p>
<ul>
<li>
<p><code>starti</code>可以帮助我们从<strong>第一条指令</strong>开始执行程序</p>
<ul>
<li><code>gdb</code> 可以在两种状态机视角之间切换 (<code>layout</code>) <a href="http://sourceware.org/gdb/documentation/" target="_blank" rel="noopener noreffer">GDB官方文档</a></li>
</ul>
</li>
</ul>
<p>定位出错位置</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-5.png" title="/img/Operating System/chapter2-5.png" data-thumbnail="/img/Operating System/chapter2-5.png" data-sub-html="<h2>出错位置(on linux)</h2>">
        
    </a><figcaption class="image-caption">出错位置(<code>on linux</code>)</figcaption>
    </figure>
<p><code>retq</code>:栈由<code>rsp</code>（寄存器）控制,<code>retq</code>就是从<code>rsp</code>寄存器当中取出8个字节，赋值给<code>rip</code>(pc)，然后<code>rsp &lt;- rsp + 8</code>（往上挪一格）（栈向下增长）</p>
<p>初始<code>rsp</code>顶部为1</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-6.png" title="/img/Operating System/chapter2-6.png" data-thumbnail="/img/Operating System/chapter2-6.png" data-sub-html="<h2>查看错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">查看错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>栈</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-7.png" title="/img/Operating System/chapter2-7.png" data-thumbnail="/img/Operating System/chapter2-7.png" data-sub-html="<h2>查看错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">查看错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>但是当执行完有问题的语句之后<code>retq</code>，<code>rip</code>就变成了8</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-8.png" title="/img/Operating System/chapter2-8.png" data-thumbnail="/img/Operating System/chapter2-8.png" data-sub-html="<h2>出现错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">出现错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>非法访问，触发了<code>Segmentation Fault</code></p>
<p><strong>所以该程序能被操作系统正确的执行，但没有办法返回，问题出在初始状态上（即错误的指令）</strong></p>
<h5 id="解决异常退出">解决异常退出</h5>
<p>有办法让状态机 “停下来” 吗？</p>
<ul>
<li>纯 “计算” 的状态机：不行</li>
<li>要么死循环，要么 undefined behavior</li>
</ul>
<p>解决办法：<code>syscall</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span><span class="p">(</span><span class="n">SYS_exit</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>linux</code>环境下使用<code>gdb</code>进行调试</p>
<p>发现调用了<code>syscall</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-9.png" title="/img/Operating System/chapter2-9.png" data-thumbnail="/img/Operating System/chapter2-9.png" data-sub-html="<h2>gdb(on linux)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>on linux</code>)</figcaption>
    </figure>
<p>进入<code>syscall</code>继续查看</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-10.png" title="/img/Operating System/chapter2-10.png" data-thumbnail="/img/Operating System/chapter2-10.png" data-sub-html="<h2>gdb(继续查看)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>继续查看</code>)</figcaption>
    </figure>
<p>发现该函数给一大堆寄存器赋了值，赋完值之后会执行一个<code>syscall</code>指令</p>
<p>实质：准备好一个系统调用的参数，然后把自己完全交给操作系统</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-11.png" title="/img/Operating System/chapter2-11.png" data-thumbnail="/img/Operating System/chapter2-11.png" data-sub-html="<h2>gdb(可以看到退出码)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>可以看到退出码</code>)</figcaption>
    </figure>
<p>（终止）</p>
<ul>
<li>调试代码：syscall 的实现在哪里？
<ul>
<li>坏消息：在 libc 里，不方便直接链接</li>
<li>好消息：代码很短，而且似乎看懂了</li>
</ul>
</li>
</ul>
<h5 id="hello-world的汇编实现">Hello, World的汇编实现</h5>
<p>minmal.S</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_write</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">write</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">fd</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span>        <span class="o">%</span><span class="n">rsi</span>   <span class="err">#</span>   <span class="n">buf</span><span class="o">=</span><span class="n">st</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>   <span class="err">#</span>   <span class="n">count</span><span class="o">=</span><span class="n">ed</span><span class="o">-</span><span class="n">st</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_exit</span><span class="p">,</span>  <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">exit</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">status</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Note: gcc 支持对汇编代码的预编译 (还会定义 <code>__ASSEMBLER__</code> 宏)</p>
<p>运行成功，红色的hello,world（<code>linux</code>开始💩🐴犯病，用gdb才调出来）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-12.png" title="/img/Operating System/chapter2-12.png" data-thumbnail="/img/Operating System/chapter2-12.png" data-sub-html="<h2>运行程序(on gdb)</h2>">
        
    </a><figcaption class="image-caption">运行程序(<code>on gdb</code>)</figcaption>
    </figure>
<p>宏展开结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -E minmal.S
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span> <span class="err">#</span> <span class="n">write</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span> <span class="err">#</span> <span class="n">fd</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span> <span class="o">%</span><span class="n">rsi</span> <span class="err">#</span> <span class="n">buf</span><span class="o">=</span><span class="n">st</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span> <span class="err">#</span> <span class="n">count</span><span class="o">=</span><span class="n">ed</span><span class="o">-</span><span class="n">st</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span> <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">60</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span> <span class="err">#</span> <span class="n">exit</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span> <span class="err">#</span> <span class="n">status</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span> <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>深究<code>syscall</code></p>
<p>使用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">man syscall
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以直接查看手册</p>
<hr>
<p>回顾：状态机视角的程序</p>
<ul>
<li>程序 = 计算 → <code>syscall </code>→ 计算 → &hellip;</li>
</ul>
<h6 id="彩蛋ansi-escape-code">彩蛋：ANSI Escape Code</h6>
<blockquote>
<p>为什么 Hello World 有颜色？？</p>
</blockquote>
<p>特殊编码的字符实现终端控制</p>
<ul>
<li>
<p><a href="https://git.busybox.net/busybox/tree/editors/vi.c" target="_blank" rel="noopener noreffer">vi.c</a> from busybox</p>
</li>
<li>
<p><code>telnet towel.blinkenlights.nl</code> (电影；Ctrl-] and q 退出)</p>
</li>
<li>
<p><code>dialog --msgbox 'Hello, OS World!' 8 32</code></p>
</li>
<li>
<p><code>ssh sshtron.zachlatta.com</code>(网络游戏)</p>
<ul>
<li>
<p>所以编程可以从一开始就不那么枯燥</p>
</li>
<li>
<p>看似复杂，实际简单明了</p>
</li>
</ul>
</li>
</ul>
<h3 id="编译器与编译优化">编译器与编译优化</h3>
<p>“状态机” 顺便解决了一个非常重要的基本问题：</p>
<blockquote>
<p>什么是编译器？？？</p>
</blockquote>
<p>编译器：源代码 <code>S</code>(状态机) → 二进制代码 <code>C</code> (状态机)</p>
<p>$C = \textrm{compile}(S)\newline$</p>
<p>编译 (优化) 的正确性 (Soundness):</p>
<ul>
<li>S<em>S</em> 与 C<em>C</em> 的可观测行为严格一致
<ul>
<li>system calls; volatile variable loads/stores; termination</li>
</ul>
</li>
<li><code>Trivially</code> 正确 (但低效) 的实现
<ul>
<li>解释执行/直接翻译 <code>S</code>的语义</li>
</ul>
</li>
</ul>
<h4 id="现代-与未来的-编译优化">现代 (与未来的) 编译优化</h4>
<p>在保证观测一致性 (sound) 的前提下改写代码 (rewriting)</p>
<ul>
<li>
<p>Inline assembly 也可以参与优化</p>
<ul>
<li>其他优化可能会跨过不带 barrier 的 <code>asm volatile</code></li>
</ul>
</li>
<li>
<p>Eventual memory consistency</p>
</li>
<li>
<p>Call to external CU = write back visible memory</p>
<ul>
<li>talk is cheap, show me the code!</li>
</ul>
</li>
</ul>
<hr>
<p>这给了我们很多想象的空间（🐮🍺的东西）</p>
<ul>
<li>Semantic-based compilation (synthesis)</li>
<li>AI-based rewriting</li>
<li>Fine-grained semantics &amp; system call fusion</li>
</ul>
<p>不可优化的部分可以进行合并？（🐮🍺的东西）</p>
<h4 id="进入-plprogramming-language-的领域">进入 PL(Programming language) 的领域</h4>
<p>PL 领域 (的很多人) 有一种倾向：用数学化的语言定义和理解一切 (all about semantics)</p>
<ul>
<li><del>所以你看一眼 paper 就觉得自己瞎了</del></li>
<li>但背后的直觉依然是 system/software 的
<ul>
<li>(我们是人，不是无情的数学机器 😂)</li>
<li>溜了溜了，回到 system 的世界</li>
</ul>
</li>
</ul>
<hr>
<p>Further readings</p>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/2103621.2103719" target="_blank" rel="noopener noreffer">An executable formal semantics of C with applications</a> (POPL'12)</li>
<li><a href="https://compcert.org/motivations.html" target="_blank" rel="noopener noreffer">CompCert C verified compiler</a> and a <a href="https://xavierleroy.org/publi/compcert-backend.pdf" target="_blank" rel="noopener noreffer">paper</a> (POPL'06, Most Influential Paper Award :gold medal🐮)</li>
<li><a href="https://dl.acm.org/doi/10.1145/3485513" target="_blank" rel="noopener noreffer">Copy-and-patch compilation</a> (OOPSLA'21, Distinguished Paper 🐮)</li>
</ul>
<h3 id="操作系统中的程序">操作系统中的程序</h3>
<h4 id="操作系统中的一般程序">操作系统中的一般程序</h4>
<blockquote>
<p>和 <a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a> 没有本质区别：程序 = 计算 → syscall → &hellip;</p>
</blockquote>
<p>操作系统收编了所有的硬件/软件资源</p>
<ul>
<li>只能用操作系统允许的方式访问操作系统中的对象
<ul>
<li>从而实现操作系统的 “霸主” 地位</li>
<li>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/tryopen.c" target="_blank" rel="noopener noreffer">tryopen.c</a></li>
</ul>
</li>
<li>这是为 “管理多个状态机” 所必须的
<ul>
<li>不能打架，谁有权限就给他</li>
</ul>
</li>
</ul>
<p>tryopen.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">try_open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;open(</span><span class="se">\&#34;</span><span class="s">%s</span><span class="se">\&#34;</span><span class="s">) returns %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">perror</span><span class="p">(</span><span class="s">&#34;  FAIL&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;  SUCCESS!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">try_open</span><span class="p">(</span><span class="s">&#34;/something/not/exist&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">try_open</span><span class="p">(</span><span class="s">&#34;/dev/sda&#34;</span><span class="p">);</span> <span class="c1">// hard drive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc tryopen.c <span class="o">&amp;&amp;</span> ./a.out
</span></span><span class="line"><span class="cl">open<span class="o">(</span><span class="s2">&#34;/something/not/exist&#34;</span><span class="o">)</span> returns -1
</span></span><span class="line"><span class="cl">  FAIL: No such file or directory
</span></span><span class="line"><span class="cl">open<span class="o">(</span><span class="s2">&#34;/dev/sda&#34;</span><span class="o">)</span> returns -1
</span></span><span class="line"><span class="cl">  FAIL: Permission denied
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="二进制-程序也是操作系统中的对象">(二进制) 程序也是操作系统中的对象</h4>
<p>可执行文件</p>
<ul>
<li>与大家日常使用的文件 (a.c, README.txt) 没有本质区别</li>
<li>操作系统提供 API 打开、读取、改写 (都需要相应的权限)</li>
</ul>
<hr>
<p>查看可执行文件</p>
<ul>
<li>
<p><code>vim</code>,<code>cat</code>,<code>xxd</code></p>
<p>都可以直接查看可执行文件</p>
<ul>
<li><code>vim</code> 中二进制的部分无法 “阅读”，但可以看到字符串常量</li>
<li>使用 <code>xxd</code> 可以看到文件以 <code>&quot;\x7f&quot; &quot;ELF&quot;</code> 开头</li>
<li>vscode 有 <code>binary editor</code> 插件</li>
</ul>
</li>
</ul>
<h4 id="系统中常见的应用程序">系统中常见的应用程序</h4>
<p>Core Utilities (coreutils)</p>
<ul>
<li><em>standard</em> programs for text and file manipulation</li>
<li>系统中安装的是 <a href="https://www.gnu.org/software/coreutils/" target="_blank" rel="noopener noreffer">GNU Coreutils</a>
<ul>
<li>有较小的替代品 <a href="https://www.busybox.net/" target="_blank" rel="noopener noreffer">busybox</a></li>
</ul>
</li>
</ul>
<hr>
<p>系统/工具程序</p>
<ul>
<li>
<p>bash,binutils, apt, ip, ssh, vim, tmux, jdk, python, &hellip;</p>
<ul>
<li>
<p>这些工具的原理都不复杂 (例如 apt 其实只是 dpkg 的壳)</p>
</li>
<li>
<p><a href="https://packages.ubuntu.com/" target="_blank" rel="noopener noreffer">Ubuntu Packages</a> (和 apt-file 工具) 支持文件名检索</p>
<ul>
<li>例子：找不到 <code>SDL2/SDL.h</code> 时&hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>其他各种应用程序</p>
<ul>
<li>浏览器、音乐播放器……</li>
</ul>
<h4 id="操作系统中的程序dark-side">操作系统中的程序：Dark Side</h4>
<blockquote>
<p>杀人的面试题 (1)：一个普通的、人畜无害的 Hello World C 程序执行的第一条指令在哪里？</p>
</blockquote>
<p>等价问法</p>
<ul>
<li>“二进制程序状态机的初始状态是什么？”
<ul>
<li><code>main</code> 的第一条指令 ❌</li>
<li><code>libc</code> 的 <code>_start</code> ❌</li>
</ul>
</li>
</ul>
<hr>
<p>问 gdb 吧</p>
<ul>
<li><code>info proc {mappings,...}</code> - 打印进程内存</li>
</ul>
<p>使用<code>gdb</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-13.png" title="/img/Operating System/chapter2-13.png" data-thumbnail="/img/Operating System/chapter2-13.png" data-sub-html="<h2>gdb(查看入口)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>查看入口</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">0x00007ffff7fe32b0 in _start <span class="o">()</span> from /lib64/ld-linux-x86-64.so.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>info proc mappings</code>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> info proc mappings 
</span></span><span class="line"><span class="cl">process <span class="m">48808</span>
</span></span><span class="line"><span class="cl">Mapped address spaces:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          Start Addr           End Addr       Size     Offset  Perms  objfile
</span></span><span class="line"><span class="cl">      0x555555554000     0x555555555000     0x1000        0x0  r--p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555555000     0x555555556000     0x1000     0x1000  r-xp   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555556000     0x555555557000     0x1000     0x2000  r--p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555557000     0x555555559000     0x2000     0x2000  rw-p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x7ffff7fbd000     0x7ffff7fc1000     0x4000        0x0  r--p   <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">      0x7ffff7fc1000     0x7ffff7fc3000     0x2000        0x0  r-xp   <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">      0x7ffff7fc3000     0x7ffff7fc5000     0x2000        0x0  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7fc5000     0x7ffff7fef000    0x2a000     0x2000  r-xp   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7fef000     0x7ffff7ffa000     0xb000    0x2c000  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7ffb000     0x7ffff7fff000     0x4000    0x37000  rw-p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffffffde000     0x7ffffffff000    0x21000        0x0  rw-p   <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">  0xffffffffff600000 0xffffffffff601000     0x1000        0x0  --xp   <span class="o">[</span>vsyscall<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="main-之前发生了什么"><code>main()</code> 之前发生了什么？</h5>
<p><code>ld-linux-x86-64.so</code> 加载了 libc</p>
<ul>
<li>之后 libc 完成了自己的初始化
<ul>
<li>RTFM: <a href="https://www.gnu.org/software/hurd/glibc/startup.html" target="_blank" rel="noopener noreffer">libc startup</a> on Hurd</li>
<li><code>main()</code> 的开始/结束并不是整个程序的开始/结束</li>
<li>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/hello-goodbye.c" target="_blank" rel="noopener noreffer">hello-goodbye.c</a></li>
</ul>
</li>
</ul>
<hr>
<p>谁规定是 <code>ld-linux-x86-64.so</code>，而不是 <code>rtfm.so</code>？</p>
<ul>
<li>readelf 告诉你答案</li>
<li>(计算机系统不存在玄学；一切都建立在确定的机制上)
<ul>
<li>回顾 <code>gcc --verbose</code></li>
</ul>
</li>
</ul>
<p><code>hello-goodbye.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// See also: atexit(3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">goodbye</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Goodbye, Cruel OS World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter2-14.png" title="/img/Operating System/chapter2-14.png" data-thumbnail="/img/Operating System/chapter2-14.png" data-sub-html="<h2>vim(汇编代码)</h2>">
        
    </a><figcaption class="image-caption">vim(<code>汇编代码</code>)</figcaption>
    </figure>
<p>后面老师hacker改二进制代码的时候✌️的👀已经跟不上了，脑子更是直接💩🐴</p>
<blockquote>
<p>杀人的面试题 (2)：main 执行之前、执行中、执行后，发生了哪些操作系统 API 调用？</p>
</blockquote>
<hr>
<p>呃……</p>
<ul>
<li>(计算机系统不存在玄学；一切都建立在确定的机制上)</li>
<li>所以你应该有一个强烈的信念：这个问题是可以回答的</li>
</ul>
<h4 id="打开程序的执行trace-踪迹">打开程序的执行：Trace (踪迹)</h4>
<blockquote>
<p>In general, trace refers to the process of following <em>anything</em> from the beginning to the end. For example, the <code>traceroute</code> command follows each of the network hops as your computer connects to another computer.</p>
</blockquote>
<p>这门课中很重要的工具：strace</p>
<ul>
<li>system call trace</li>
<li>理解程序运行时使用的系统调用
<ul>
<li>demo: <code>strace ./hello-goodbye</code></li>
<li>在这门课中，你能理解 strace 的输出并在你自己的操作系统里实现相当一部分系统调用 (mmap, execve, &hellip;)</li>
</ul>
</li>
</ul>
<p>使用<code>strace</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-15.png" title="/img/Operating System/chapter2-15.png" data-thumbnail="/img/Operating System/chapter2-15.png" data-sub-html="<h2>linux(使用strace)</h2>">
        
    </a><figcaption class="image-caption">linux(<code>使用strace</code>)</figcaption>
    </figure>
<h4 id="本质上所有的程序和-hello-world-类似">本质上，所有的程序和 Hello World 类似</h4>
<p>程序 = 状态机 = 计算 → syscall → 计算 →</p>
<ul>
<li>
<p>被操作系统加载</p>
<ul>
<li>通过另一个进程执行 execve 设置为初始状态</li>
</ul>
</li>
<li>
<p>状态机执行</p>
<ul>
<li>进程管理：fork, execve, exit, &hellip;</li>
<li>文件/设备管理：open, close, read, write, &hellip;</li>
<li>存储管理：mmap, brk, &hellip;</li>
</ul>
</li>
<li>
<p>直到 _exit (exit_group) 退出</p>
</li>
</ul>
<hr>
<ul>
<li>说好的浏览器、游戏、杀毒软件、病毒呢？都是这些 API 吗？💢💢💢(都是) $\rightarrow$🐮🍺</li>
</ul>
<h4 id="yes---这些-api-就是操作系统的全部">Yes! - 这些 API 就是操作系统的全部</h4>
<p>编译器 (gcc)，代表其他工具程序</p>
<ul>
<li>
<p>主要的系统调用：execve, read, write</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace -f gcc a.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>(gcc 会启动其他进程)</p>
<ul>
<li>可以管道给编辑器 <code>vim -</code></li>
<li>编辑器里还可以 <code>%!grep</code> (细节/技巧)</li>
</ul>
</li>
</ul>
<hr>
<p>图形界面程序 (xedit)，代表其他图形界面程序 (例如 vscode)</p>
<ul>
<li>
<p>主要的系统调用：poll, recvmsg, writev</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace xedit
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>图形界面程序和 X-Window 服务器按照 X11 协议通信</li>
<li>虚拟机中的 <code>xedit</code> 将 <code>X11</code> 命令通过<code>ssh</code>(X11 forwarding) 转发到 Host</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-16.png" title="/img/Operating System/chapter2-16.png" data-thumbnail="/img/Operating System/chapter2-16.png" data-sub-html="<h2>strace(xedit)</h2>">
        
    </a><figcaption class="image-caption">strace(<code>xedit</code>)</figcaption>
    </figure>
<h4 id="各式各样的应用程序">各式各样的应用程序</h4>
<p>都在操作系统 API (syscall) 和操作系统中的对象上构建</p>
<ul>
<li>窗口管理器
<ul>
<li>管理设备和屏幕 (read/write/mmap)</li>
<li>进程间通信 (send, recv)</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>任务管理器
<ul>
<li>访问操作系统提供的进程对象 (readdir/read)</li>
<li>参考 gdb 里的 <code>info proc *</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>杀毒软件
<ul>
<li>文件静态扫描 (read)</li>
<li>主动防御 (ptrace)</li>
<li>其他更复杂的安全机制……</li>
</ul>
</li>
</ul>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 到底什么是 “程序”？</li>
</ul>
<hr>
<p>$Take-away\ message\newline$</p>
<ul>
<li>程序 = 状态机
<ul>
<li>源代码 S: 状态迁移 = 执行语句</li>
<li>二进制代码 C: 状态迁移 = 执行指令</li>
<li>编译器 $C=compile(S)\newline$</li>
</ul>
</li>
<li>应用视角的操作系统
<ul>
<li>就是一条 <code>syscall</code> 指令</li>
</ul>
</li>
<li>计算机系统不存在玄学；一切都建立在确定的机制上
<ul>
<li>理解操作系统的重要工具：<code>gcc</code>, <code>binutils</code>, <code>gdb</code>, <code>strace</code></li>
</ul>
</li>
</ul>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
</channel>
</rss>
