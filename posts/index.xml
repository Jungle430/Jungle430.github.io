<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - Jungle&#39;s Blog</title>
        <link>https://Jungle430.github.io/posts/</link>
        <description>所有文章 | Jungle&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1239946358@qq.com (Jungle)</managingEditor>
            <webMaster>1239946358@qq.com (Jungle)</webMaster><lastBuildDate>Sat, 31 Dec 2022 19:30:30 &#43;0800</lastBuildDate><atom:link href="https://Jungle430.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Operating System Chapter2</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter2/</link>
    <pubDate>Sat, 31 Dec 2022 19:30:30 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter2/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="操作系统上的程序">操作系统上的程序</h2>
<h3 id="overview">Overview</h3>
<h4 id="复习">复习</h4>
<p>什么是操作系统？</p>
<ul>
<li>应用视角 (设计): 一组对象 (进程/文件/&hellip;) + API</li>
<li>硬件视角 (实现): 一个 C 程序</li>
</ul>
<h4 id="本次课程主要问题">本次课程主要问题</h4>
<ul>
<li>到底什么是”程序”？</li>
</ul>
<h4 id="本次课主要内容">本次课主要内容</h4>
<ul>
<li>程序的状态机模型 (和编译器)</li>
<li>操作系统上的 {最小/一般/图形} 程序</li>
</ul>
<h3 id="状态机与数字电路">状态机与数字电路</h3>
<p>数字逻辑电路</p>
<ul>
<li>状态 = 寄存器保存的值 (flip-flop)</li>
<li>初始状态 = RESET (implementation dependent)</li>
<li>迁移 = 组合逻辑电路计算寄存器下一周期的值</li>
</ul>
<p>例子：
$$
\begin{align}
&amp;X^{&rsquo;}= \neg X \wedge Y\newline
&amp;Y^{&rsquo;}= \neg X \wedge \neg Y\newline
\end{align}
$$</p>
<div class="mermaid" id="id-1"></div>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define REGS_FOREACH(_)  _(X) _(Y)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define RUN_LOGIC        X1 = !X &amp;&amp; Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         Y1 = !X &amp;&amp; !Y;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define DEFINE(X)        static int X, X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UPDATE(X)        X = X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PRINT(X)         printf(#X &#34; = %d; &#34;, X);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// clock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">RUN_LOGIC</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">PRINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">UPDATE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>宏展开</p>
<p>使用mingw命令(注意去掉头文件，否则头文件也会一并展开，就没法看了🤡)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -E main.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>展开后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">X1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">X1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">;</span> <span class="n">Y1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;X&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Y&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span> <span class="o">=</span> <span class="n">X1</span><span class="p">;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更完整的实现：数码管显示</p>
<p>代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;Windows.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define REGS_FOREACH(_)  _(X) _(Y)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define OUTS_FOREACH(_)  _(A) _(B) _(C) _(D) _(E) _(F) _(G)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define RUN_LOGIC        X1 = !X &amp;&amp; Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         Y1 = !X &amp;&amp; !Y; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         A  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         B  = 1; \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         C  = (!X &amp;&amp; !Y) || (!X &amp;&amp; Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         D  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         E  = (!X &amp;&amp; !Y) || (X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         F  = (!X &amp;&amp; !Y); \
</span></span></span><span class="line"><span class="cl"><span class="cp">                         G  = (X &amp;&amp; !Y);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define DEFINE(X)   static int X, X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define UPDATE(X)   X = X##1;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define PRINT(X)    printf(#X &#34; = %d; &#34;, X);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">OUTS_FOREACH</span><span class="p">(</span><span class="n">DEFINE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// clock
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">RUN_LOGIC</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">OUTS_FOREACH</span><span class="p">(</span><span class="n">PRINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">REGS_FOREACH</span><span class="p">(</span><span class="n">UPDATE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>宏展开</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">X</span><span class="p">,</span> <span class="n">X1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">,</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">int</span> <span class="n">A</span><span class="p">,</span> <span class="n">A1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">B</span><span class="p">,</span> <span class="n">B1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">C</span><span class="p">,</span> <span class="n">C1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">D</span><span class="p">,</span> <span class="n">D1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">E</span><span class="p">,</span> <span class="n">E1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">F</span><span class="p">,</span> <span class="n">F1</span><span class="p">;</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">G</span><span class="p">,</span> <span class="n">G1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">X1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">;</span> <span class="n">Y1</span> <span class="o">=</span> <span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">;</span> <span class="n">A</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">B</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">C</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="n">Y</span><span class="p">);</span> <span class="n">D</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">E</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">F</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);</span> <span class="n">G</span> <span class="o">=</span> <span class="p">(</span><span class="n">X</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">Y</span><span class="p">);;</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;A&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">A</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;B&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">B</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;C&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">C</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;D&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">D</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;E&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">E</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;F&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">F</span><span class="p">);</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;G&#34;</span> <span class="s">&#34; = %d; &#34;</span><span class="p">,</span> <span class="n">G</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">X</span> <span class="o">=</span> <span class="n">X1</span><span class="p">;</span> <span class="n">Y</span> <span class="o">=</span> <span class="n">Y1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Sleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>python后端</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">fileinput</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="n">TEMPLATE</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1"></span><span class="se">\033</span><span class="s1">[2J</span><span class="se">\033</span><span class="s1">[1;1f
</span></span></span><span class="line"><span class="cl"><span class="s1">     AAAAAAAAA
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    FF       BB
</span></span></span><span class="line"><span class="cl"><span class="s1">    GGGGGGGGGG
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">   EE       CC
</span></span></span><span class="line"><span class="cl"><span class="s1">    DDDDDDDDD
</span></span></span><span class="line"><span class="cl"><span class="s1">&#39;&#39;&#39;</span> 
</span></span><span class="line"><span class="cl"><span class="n">BLOCK</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="mi">0</span><span class="p">:</span> <span class="s1">&#39;</span><span class="se">\033</span><span class="s1">[37m░</span><span class="se">\033</span><span class="s1">[0m&#39;</span><span class="p">,</span> <span class="c1"># STFW: ANSI Escape Code</span>
</span></span><span class="line"><span class="cl">    <span class="mi">1</span><span class="p">:</span> <span class="s1">&#39;</span><span class="se">\033</span><span class="s1">[31m█</span><span class="se">\033</span><span class="s1">[0m&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">VARS</span> <span class="o">=</span> <span class="s1">&#39;ABCDEFG&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">VARS</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="nb">globals</span><span class="p">()[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">stdin</span> <span class="o">=</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">exec</span><span class="p">(</span><span class="n">stdin</span><span class="o">.</span><span class="n">readline</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="n">pic</span> <span class="o">=</span> <span class="n">TEMPLATE</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">VARS</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">pic</span> <span class="o">=</span> <span class="n">pic</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">BLOCK</span><span class="p">[</span><span class="nb">globals</span><span class="p">()[</span><span class="n">v</span><span class="p">]])</span> <span class="c1"># &#39;A&#39; -&gt; BLOCK[A], ...</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">pic</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用方法</p>
<p>先通过gcc将c文件编译为exe文件</p>
<p>然后cmd命令端输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">logisim.exe <span class="p">|</span> python seven-seg.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果：循环出现如下画面</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-1.png" title="/img/Operating System/chapter2-1.png" data-thumbnail="/img/Operating System/chapter2-1.png" data-sub-html="<h2>python后端(image 1)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-2.png" title="/img/Operating System/chapter2-2.png" data-thumbnail="/img/Operating System/chapter2-2.png" data-sub-html="<h2>python后端(image 2)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-3.png" title="/img/Operating System/chapter2-3.png" data-thumbnail="/img/Operating System/chapter2-3.png" data-sub-html="<h2>python后端(image 3)</h2>">
        
    </a><figcaption class="image-caption">python后端(<code>image 3</code>)</figcaption>
    </figure>
<ul>
<li>
<p>会编程，你就拥有全世界！</p>
</li>
<li>
<p>同样的方式可以模拟任何数字系统</p>
<ul>
<li>当然，也包括计算机系统</li>
</ul>
</li>
</ul>
<p>UNIX 哲学</p>
<ul>
<li>Make each program do one thing well</li>
<li>Expect the output of every program to become the input to another</li>
</ul>
<h3 id="什么是程序源代码视角">什么是程序（源代码视角）</h3>
<p>程序就是状态机 (你在 gdb 里看到的)</p>
<p>代码：hanoi-r.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">hanoi</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="kt">char</span> <span class="n">to</span><span class="p">,</span> <span class="kt">char</span> <span class="n">via</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c -&gt; %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">via</span><span class="p">,</span> <span class="n">to</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span>     <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span>  <span class="n">via</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">hanoi</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">via</span><span class="p">,</span>  <span class="n">to</span><span class="p">,</span>  <span class="n">from</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="c-程序的状态机模型角度一">C 程序的状态机模型（角度一）</h4>
<p><strong>(语义，semantics)</strong></p>
<ul>
<li>状态 = 堆 + 栈</li>
<li>初始状态 = <code>main</code> 的第一条语句</li>
<li>迁移 = 执行一条简单语句
<ul>
<li>任何 C 程序都可以改写成 “非复合语句” 的 C 代码</li>
<li><a href="https://cil-project.github.io/cil/" target="_blank" rel="noopener noreffer">真的有这种工具</a> (C Intermediate Language) 和<a href="https://gitlab.com/zsaleeba/picoc" target="_blank" rel="noopener noreffer">解释器</a></li>
</ul>
</li>
</ul>
<hr>
<p>(这还只是 “粗浅” 的理解)</p>
<ul>
<li>Talk is cheap. Show me the code. (Linus Torvalds): 任何真正的理解都应该落到可以执行的代码</li>
</ul>
<h4 id="c-程序的状态机模型角度二">C 程序的状态机模型（角度二）</h4>
<p><strong>(语义，semantics)</strong></p>
<ul>
<li>状态 = stack frame 的列表 (每个 frame 有 PC <code>program counter</code> ) + 全局变量</li>
<li>初始状态 = main(argc, argv), 全局变量初始化</li>
<li>迁移 = 执行 top stack frame PC 的语句; PC++
<ul>
<li>函数调用 = push frame (frame.PC = 入口)</li>
<li>函数返回 = pop frame</li>
</ul>
</li>
</ul>
<p><strong>应用：将任何递归程序就地转为非递归</strong>（模拟$stack$）</p>
<p>$hanoi-nr.c\newline$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">pc</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">via</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Frame</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#define call(...) ({ *(++top) = (Frame) { .pc = 0, __VA_ARGS__ }; })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define ret()     ({ top--; })
</span></span></span><span class="line"><span class="cl"><span class="cp">#define goto(loc) ({ f-&gt;pc = (loc) - 1; })
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">hanoi</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="n">from</span><span class="p">,</span> <span class="kt">char</span> <span class="n">to</span><span class="p">,</span> <span class="kt">char</span> <span class="n">via</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Frame</span> <span class="n">stk</span><span class="p">[</span><span class="mi">64</span><span class="p">],</span> <span class="o">*</span><span class="n">top</span> <span class="o">=</span> <span class="n">stk</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">call</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">via</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="n">Frame</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span> <span class="p">(</span><span class="n">f</span> <span class="o">=</span> <span class="n">top</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">stk</span><span class="p">;</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">pc</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">pc</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="k">if</span> <span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c -&gt; %c</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">);</span> <span class="k">goto</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="p">}</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">);</span>   <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span>       <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">);</span>  <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span><span class="n">f</span><span class="o">-&gt;</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">f</span><span class="o">-&gt;</span><span class="n">via</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">to</span><span class="p">,</span>  <span class="n">f</span><span class="o">-&gt;</span><span class="n">from</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">case</span> <span class="mi">4</span><span class="o">:</span> <span class="n">ret</span><span class="p">();</span>                                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">default</span><span class="o">:</span> <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>A → B, B → A 的迎刃而解
<ul>
<li>还是一样的 <code>call()</code>，但放入不同的 <code>Frame</code></li>
</ul>
</li>
</ul>
<h3 id="什么是程序-二进制代码视角">什么是程序 (二进制代码视角)</h3>
<p>还是状态机	(没看过南大的计算机基础和数字逻辑课到这多少有点🤡了)</p>
<ul>
<li>状态 = 内存 <code>M</code> + 寄存器 <code>R</code></li>
<li>初始状态 = (稍后回答)</li>
<li>迁移 = 执行一条指令
<ul>
<li>我们花了一整个《计算机系统基础》解释这件事</li>
<li>gdb 同样可以观察状态和执行</li>
</ul>
</li>
</ul>
<hr>
<p>操作系统上的程序</p>
<ul>
<li>
<p>所有的指令都只能<code>计算</code></p>
<ul>
<li>deterministic: mov, add, sub, call, &hellip;</li>
<li>non-deterministic: rdrand, &hellip;</li>
<li>但这些指令甚至都无法使程序停下来 ,直接🤡, 对于操作系统来说没有什么🐔用(NEMU: 加条 <code>trap</code> 指令)</li>
</ul>
</li>
</ul>
<h4 id="一条特殊的指令">一条特殊的指令</h4>
<p>调用操作系统 <code>syscall</code></p>
<ul>
<li>把(<code>M</code>, <code>R</code>)<strong>完全交给操作系统</strong>，任其修改
<ul>
<li>一个有趣的问题：如果程序不打算完全信任操作系统？</li>
</ul>
</li>
<li>实现与操作系统中的其他对象交互
<ul>
<li>读写文件/操作系统状态 (例如把文件内容写入 M<em>M</em>)</li>
<li>改变进程 (运行中状态机) 的状态，例如创建进程/销毁自己</li>
</ul>
</li>
</ul>
<hr>
<p><strong>程序 = 计算 + syscall</strong></p>
<div class="mermaid" id="id-2"></div>
<h4 id="问题怎么构造一个最小的-hello-world">问题：怎么构造一个最小的 Hello, World？</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>gcc 编译出来的文件不满足 “最小”</p>
<ul>
<li><code>--verbose</code>可以查看所有编译选项 (真不少)
<ul>
<li><code>printf </code>变成了 puts@plt</li>
</ul>
</li>
<li><code>-static</code> 会复制 libc</li>
</ul>
<p>gcc能玩的这么多，看来✌️之前天天靠现成$IDE$多少沾点🤡了</p>
<p>实际使用<code>--verbose</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc --verbose hello.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>效果</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-4.png" title="/img/Operating System/chapter2-4.png" data-thumbnail="/img/Operating System/chapter2-4.png" data-sub-html="<h2>效果(on windows)</h2>">
        
    </a><figcaption class="image-caption">效果(<code>on windows</code>)</figcaption>
    </figure>
<p>实际使用<code>–static</code>(不依赖动态链接库)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -static hello.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译出来的文件会很大（我的是53KB）</p>
<hr>
<p>直接硬来？</p>
<p>强行编译 + 链接：<code>gcc -c</code> + <code>ld</code></p>
<ul>
<li>
<p>直接用 ld 链接失败</p>
<ul>
<li>ld 不知道怎么链接库函数……</li>
</ul>
</li>
<li>
<p>空的 main 函数倒是可以</p>
<ul>
<li>链接时得到奇怪的警告 (可以定义成 <code>_start</code> 避免警告)</li>
<li>但 Segmentation Fault 了……</li>
</ul>
</li>
</ul>
<p>找了一下<code>Segmentation Fault</code></p>
<p>$From\ wikipedia\newline$
$\rightarrow$ <a href="https://en.wikipedia.org/wiki/Segmentation_fault" target="_blank" rel="noopener noreffer">address</a></p>
<blockquote>
<p>In <a href="https://en.wikipedia.org/wiki/Computing" target="_blank" rel="noopener noreffer">computing</a>, a <strong>segmentation fault</strong> (often shortened to <strong>segfault</strong>) or <strong>access violation</strong> is a <a href="https://en.wikipedia.org/wiki/Fault_%28computing%29" target="_blank" rel="noopener noreffer">fault</a>, or failure condition, raised by hardware with <a href="https://en.wikipedia.org/wiki/Memory_protection" target="_blank" rel="noopener noreffer">memory protection</a>, notifying an <a href="https://en.wikipedia.org/wiki/Operating_system" target="_blank" rel="noopener noreffer">operating system</a> (OS) the software has attempted to access a restricted area of memory (a memory access violation). On standard <a href="https://en.wikipedia.org/wiki/X86" target="_blank" rel="noopener noreffer">x86</a> computers, this is a form of <a href="https://en.wikipedia.org/wiki/General_protection_fault" target="_blank" rel="noopener noreffer">general protection fault</a>. The <a href="https://en.wikipedia.org/wiki/Operating_system_kernel" target="_blank" rel="noopener noreffer">operating system kernel</a> will, in response, usually perform some corrective action, generally passing the fault on to the offending <a href="https://en.wikipedia.org/wiki/Process_%28computing%29" target="_blank" rel="noopener noreffer">process</a> by sending the process a <a href="https://en.wikipedia.org/wiki/Signal_%28computing%29" target="_blank" rel="noopener noreffer">signal</a>. Processes can in some cases install a custom signal handler, allowing them to recover on their own,[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-Peter_Van_der_Linden-1" target="_blank" rel="noopener noreffer">1]</a> but otherwise the OS default signal handler is used, generally causing <a href="https://en.wikipedia.org/wiki/Abnormal_termination" target="_blank" rel="noopener noreffer">abnormal termination</a> of the process (a program <a href="https://en.wikipedia.org/wiki/Crash_%28computing%29" target="_blank" rel="noopener noreffer">crash</a>), and sometimes a <a href="https://en.wikipedia.org/wiki/Core_dump" target="_blank" rel="noopener noreffer">core dump</a>.</p>
<p>Segmentation faults are a common class of error in programs written in languages like <a href="https://en.wikipedia.org/wiki/C_%28programming_language%29" target="_blank" rel="noopener noreffer">C</a> that provide low-level memory access and few to no safety checks. They arise primarily due to errors in use of <a href="https://en.wikipedia.org/wiki/Pointer_%28computer_programming%29" target="_blank" rel="noopener noreffer">pointers</a> for <a href="https://en.wikipedia.org/wiki/Virtual_memory" target="_blank" rel="noopener noreffer">virtual memory</a> addressing, particularly illegal access. Another type of memory access error is a <a href="https://en.wikipedia.org/wiki/Bus_error" target="_blank" rel="noopener noreffer">bus error</a>, which also has various causes, but is today much rarer; these occur primarily due to incorrect <em>physical</em> memory addressing, or due to misaligned memory access – these are memory references that the hardware <em>cannot</em> address, rather than references that a process is not <em>allowed</em> to address.</p>
<p>Many programming languages may employ mechanisms designed to avoid segmentation faults and improve memory safety. For example, <a href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29" target="_blank" rel="noopener noreffer">Rust</a> employs an ownership-based[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-2" target="_blank" rel="noopener noreffer">2]</a> model to ensure memory safety.[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-3" target="_blank" rel="noopener noreffer">3]</a> Other languages, such as <a href="https://en.wikipedia.org/wiki/Lisp_%28programming_language%29" target="_blank" rel="noopener noreffer">Lisp</a> and <a href="https://en.wikipedia.org/wiki/Java_%28programming_language%29" target="_blank" rel="noopener noreffer">Java</a>, employ <a href="https://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29" target="_blank" rel="noopener noreffer">garbage collection</a>,[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-4" target="_blank" rel="noopener noreffer">4]</a> which avoids certain classes of memory errors that could lead to segmentation faults.[<a href="https://en.wikipedia.org/wiki/Segmentation_fault#cite_note-5" target="_blank" rel="noopener noreffer">5]</a></p>
</blockquote>
<p>主要和非法访问内存有关</p>
<p>解决方法：观察程序（状态机）执行</p>
<ul>
<li>
<p><code>starti</code>可以帮助我们从<strong>第一条指令</strong>开始执行程序</p>
<ul>
<li><code>gdb</code> 可以在两种状态机视角之间切换 (<code>layout</code>) <a href="http://sourceware.org/gdb/documentation/" target="_blank" rel="noopener noreffer">GDB官方文档</a></li>
</ul>
</li>
</ul>
<p>定位出错位置</p>
<p><figure><a class="lightgallery" href="/img/Operating%20System/chapter2-5.png" title="/img/Operating System/chapter2-5.png" data-thumbnail="/img/Operating System/chapter2-5.png" data-sub-html="<h2>出错位置(on linux)</h2>">
        
    </a><figcaption class="image-caption">出错位置(<code>on linux</code>)</figcaption>
    </figure>
![](D:\JungleBlog\static\img\Operating System\chapter2-5.png)</p>
<p><code>retq</code>:栈由<code>rsp</code>（寄存器）控制,<code>retq</code>就是从<code>rsp</code>寄存器当中取出8个字节，赋值给<code>rip</code>(pc)，然后<code>rsp &lt;- rsp + 8</code>（往上挪一格）（栈向下增长）</p>
<p>初始<code>rsp</code>顶部为1</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-6.png" title="/img/Operating System/chapter2-6.png" data-thumbnail="/img/Operating System/chapter2-6.png" data-sub-html="<h2>查看错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">查看错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>栈</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-7.png" title="/img/Operating System/chapter2-7.png" data-thumbnail="/img/Operating System/chapter2-7.png" data-sub-html="<h2>查看错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">查看错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>但是当执行完有问题的语句之后<code>retq</code>，<code>rip</code>就变成了8</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-8.png" title="/img/Operating System/chapter2-8.png" data-thumbnail="/img/Operating System/chapter2-8.png" data-sub-html="<h2>出现错误(on gdb)</h2>">
        
    </a><figcaption class="image-caption">出现错误(<code>on gdb</code>)</figcaption>
    </figure>
<p>非法访问，触发了<code>Segmentation Fault</code></p>
<p><strong>所以该程序能被操作系统正确的执行，但没有办法返回，问题出在初始状态上（即错误的指令）</strong></p>
<h5 id="解决异常退出">解决异常退出</h5>
<p>有办法让状态机 “停下来” 吗？</p>
<ul>
<li>纯 “计算” 的状态机：不行</li>
<li>要么死循环，要么 undefined behavior</li>
</ul>
<p>解决办法：<code>syscall</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span><span class="p">(</span><span class="n">SYS_exit</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>linux</code>环境下使用<code>gdb</code>进行调试</p>
<p>发现调用了<code>syscall</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-9.png" title="/img/Operating System/chapter2-9.png" data-thumbnail="/img/Operating System/chapter2-9.png" data-sub-html="<h2>gdb(on linux)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>on linux</code>)</figcaption>
    </figure>
<p>进入<code>syscall</code>继续查看</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-10.png" title="/img/Operating System/chapter2-10.png" data-thumbnail="/img/Operating System/chapter2-10.png" data-sub-html="<h2>gdb(继续查看)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>继续查看</code>)</figcaption>
    </figure>
<p>发现该函数给一大堆寄存器赋了值，赋完值之后会执行一个<code>syscall</code>指令</p>
<p>实质：准备好一个系统调用的参数，然后把自己完全交给操作系统</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-11.png" title="/img/Operating System/chapter2-11.png" data-thumbnail="/img/Operating System/chapter2-11.png" data-sub-html="<h2>gdb(可以看到退出码)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>可以看到退出码</code>)</figcaption>
    </figure>
<p>（终止）</p>
<ul>
<li>调试代码：syscall 的实现在哪里？
<ul>
<li>坏消息：在 libc 里，不方便直接链接</li>
<li>好消息：代码很短，而且似乎看懂了</li>
</ul>
</li>
</ul>
<h5 id="hello-world的汇编实现">Hello, World的汇编实现</h5>
<p>minmal.S</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/syscall.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_write</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">write</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">fd</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span>        <span class="o">%</span><span class="n">rsi</span>   <span class="err">#</span>   <span class="n">buf</span><span class="o">=</span><span class="n">st</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span>   <span class="err">#</span>   <span class="n">count</span><span class="o">=</span><span class="n">ed</span><span class="o">-</span><span class="n">st</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">SYS_exit</span><span class="p">,</span>  <span class="o">%</span><span class="n">rax</span>   <span class="err">#</span> <span class="n">exit</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span>         <span class="o">%</span><span class="n">rdi</span>   <span class="err">#</span>   <span class="n">status</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span>                 <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Note: gcc 支持对汇编代码的预编译 (还会定义 <code>__ASSEMBLER__</code> 宏)</p>
<p>运行成功，红色的hello,world（<code>linux</code>开始💩🐴犯病，用gdb才调出来）</p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-12.png" title="/img/Operating System/chapter2-12.png" data-thumbnail="/img/Operating System/chapter2-12.png" data-sub-html="<h2>运行程序(on gdb)</h2>">
        
    </a><figcaption class="image-caption">运行程序(<code>on gdb</code>)</figcaption>
    </figure>
<p>宏展开结果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">gcc -E minmal.S
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="p">.</span><span class="n">globl</span> <span class="n">_start</span>
</span></span><span class="line"><span class="cl"><span class="nl">_start</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span> <span class="err">#</span> <span class="n">write</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span> <span class="err">#</span> <span class="n">fd</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="n">st</span><span class="p">,</span> <span class="o">%</span><span class="n">rsi</span> <span class="err">#</span> <span class="n">buf</span><span class="o">=</span><span class="n">st</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="p">(</span><span class="n">ed</span> <span class="o">-</span> <span class="n">st</span><span class="p">),</span> <span class="o">%</span><span class="n">rdx</span> <span class="err">#</span> <span class="n">count</span><span class="o">=</span><span class="n">ed</span><span class="o">-</span><span class="n">st</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span> <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">60</span><span class="p">,</span> <span class="o">%</span><span class="n">rax</span> <span class="err">#</span> <span class="n">exit</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="n">movq</span> <span class="err">$</span><span class="mi">1</span><span class="p">,</span> <span class="o">%</span><span class="n">rdi</span> <span class="err">#</span> <span class="n">status</span><span class="o">=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">  <span class="n">syscall</span> <span class="err">#</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nl">st</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="p">.</span><span class="n">ascii</span> <span class="s">&#34;</span><span class="se">\033</span><span class="s">[01;31mHello, OS World</span><span class="se">\033</span><span class="s">[0m</span><span class="se">\n</span><span class="s">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nl">ed</span><span class="p">:</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>深究<code>syscall</code></p>
<p>使用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">man syscall
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以直接查看手册</p>
<hr>
<p>回顾：状态机视角的程序</p>
<ul>
<li>程序 = 计算 → <code>syscall </code>→ 计算 → &hellip;</li>
</ul>
<h6 id="彩蛋ansi-escape-code">彩蛋：ANSI Escape Code</h6>
<blockquote>
<p>为什么 Hello World 有颜色？？</p>
</blockquote>
<p>特殊编码的字符实现终端控制</p>
<ul>
<li>
<p><a href="https://git.busybox.net/busybox/tree/editors/vi.c" target="_blank" rel="noopener noreffer">vi.c</a> from busybox</p>
</li>
<li>
<p><code>telnet towel.blinkenlights.nl</code> (电影；Ctrl-] and q 退出)</p>
</li>
<li>
<p><code>dialog --msgbox 'Hello, OS World!' 8 32</code></p>
</li>
<li>
<p><code>ssh sshtron.zachlatta.com</code>(网络游戏)</p>
<ul>
<li>
<p>所以编程可以从一开始就不那么枯燥</p>
</li>
<li>
<p>看似复杂，实际简单明了</p>
</li>
</ul>
</li>
</ul>
<h3 id="编译器与编译优化">编译器与编译优化</h3>
<p>“状态机” 顺便解决了一个非常重要的基本问题：</p>
<blockquote>
<p>什么是编译器？？？</p>
</blockquote>
<p>编译器：源代码 <code>S</code>(状态机) → 二进制代码 <code>C</code> (状态机)</p>
<p>$C = \textrm{compile}(S)\newline$</p>
<p>编译 (优化) 的正确性 (Soundness):</p>
<ul>
<li>S<em>S</em> 与 C<em>C</em> 的可观测行为严格一致
<ul>
<li>system calls; volatile variable loads/stores; termination</li>
</ul>
</li>
<li><code>Trivially</code> 正确 (但低效) 的实现
<ul>
<li>解释执行/直接翻译 <code>S</code>的语义</li>
</ul>
</li>
</ul>
<h4 id="现代-与未来的-编译优化">现代 (与未来的) 编译优化</h4>
<p>在保证观测一致性 (sound) 的前提下改写代码 (rewriting)</p>
<ul>
<li>
<p>Inline assembly 也可以参与优化</p>
<ul>
<li>其他优化可能会跨过不带 barrier 的 <code>asm volatile</code></li>
</ul>
</li>
<li>
<p>Eventual memory consistency</p>
</li>
<li>
<p>Call to external CU = write back visible memory</p>
<ul>
<li>talk is cheap, show me the code!</li>
</ul>
</li>
</ul>
<hr>
<p>这给了我们很多想象的空间（🐮🍺的东西）</p>
<ul>
<li>Semantic-based compilation (synthesis)</li>
<li>AI-based rewriting</li>
<li>Fine-grained semantics &amp; system call fusion</li>
</ul>
<p>不可优化的部分可以进行合并？（🐮🍺的东西）</p>
<h4 id="进入-plprogramming-language-的领域">进入 PL(Programming language) 的领域</h4>
<p>PL 领域 (的很多人) 有一种倾向：用数学化的语言定义和理解一切 (all about semantics)</p>
<ul>
<li><del>所以你看一眼 paper 就觉得自己瞎了</del></li>
<li>但背后的直觉依然是 system/software 的
<ul>
<li>(我们是人，不是无情的数学机器 😂)</li>
<li>溜了溜了，回到 system 的世界</li>
</ul>
</li>
</ul>
<hr>
<p>Further readings</p>
<ul>
<li><a href="https://dl.acm.org/doi/10.1145/2103621.2103719" target="_blank" rel="noopener noreffer">An executable formal semantics of C with applications</a> (POPL'12)</li>
<li><a href="https://compcert.org/motivations.html" target="_blank" rel="noopener noreffer">CompCert C verified compiler</a> and a <a href="https://xavierleroy.org/publi/compcert-backend.pdf" target="_blank" rel="noopener noreffer">paper</a> (POPL'06, Most Influential Paper Award :gold medal🐮)</li>
<li><a href="https://dl.acm.org/doi/10.1145/3485513" target="_blank" rel="noopener noreffer">Copy-and-patch compilation</a> (OOPSLA'21, Distinguished Paper 🐮)</li>
</ul>
<h3 id="操作系统中的程序">操作系统中的程序</h3>
<h4 id="操作系统中的一般程序">操作系统中的一般程序</h4>
<blockquote>
<p>和 <a href="https://jyywiki.cn/pages/OS/2022/demos/minimal.S" target="_blank" rel="noopener noreffer">minimal.S</a> 没有本质区别：程序 = 计算 → syscall → &hellip;</p>
</blockquote>
<p>操作系统收编了所有的硬件/软件资源</p>
<ul>
<li>只能用操作系统允许的方式访问操作系统中的对象
<ul>
<li>从而实现操作系统的 “霸主” 地位</li>
<li>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/tryopen.c" target="_blank" rel="noopener noreffer">tryopen.c</a></li>
</ul>
</li>
<li>这是为 “管理多个状态机” 所必须的
<ul>
<li>不能打架，谁有权限就给他</li>
</ul>
</li>
</ul>
<p>tryopen.c</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">try_open</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">fname</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;open(</span><span class="se">\&#34;</span><span class="s">%s</span><span class="se">\&#34;</span><span class="s">) returns %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">fname</span><span class="p">,</span> <span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">perror</span><span class="p">(</span><span class="s">&#34;  FAIL&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;  SUCCESS!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">try_open</span><span class="p">(</span><span class="s">&#34;/something/not/exist&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">try_open</span><span class="p">(</span><span class="s">&#34;/dev/sda&#34;</span><span class="p">);</span> <span class="c1">// hard drive
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行效果</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">jungle@jungle-virtual-machine:~$ gcc tryopen.c <span class="o">&amp;&amp;</span> ./a.out
</span></span><span class="line"><span class="cl">open<span class="o">(</span><span class="s2">&#34;/something/not/exist&#34;</span><span class="o">)</span> returns -1
</span></span><span class="line"><span class="cl">  FAIL: No such file or directory
</span></span><span class="line"><span class="cl">open<span class="o">(</span><span class="s2">&#34;/dev/sda&#34;</span><span class="o">)</span> returns -1
</span></span><span class="line"><span class="cl">  FAIL: Permission denied
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="二进制-程序也是操作系统中的对象">(二进制) 程序也是操作系统中的对象</h4>
<p>可执行文件</p>
<ul>
<li>与大家日常使用的文件 (a.c, README.txt) 没有本质区别</li>
<li>操作系统提供 API 打开、读取、改写 (都需要相应的权限)</li>
</ul>
<hr>
<p>查看可执行文件</p>
<ul>
<li>
<p><code>vim</code>,<code>cat</code>,<code>xxd</code></p>
<p>都可以直接查看可执行文件</p>
<ul>
<li><code>vim</code> 中二进制的部分无法 “阅读”，但可以看到字符串常量</li>
<li>使用 <code>xxd</code> 可以看到文件以 <code>&quot;\x7f&quot; &quot;ELF&quot;</code> 开头</li>
<li>vscode 有 <code>binary editor</code> 插件</li>
</ul>
</li>
</ul>
<h4 id="系统中常见的应用程序">系统中常见的应用程序</h4>
<p>Core Utilities (coreutils)</p>
<ul>
<li><em>standard</em> programs for text and file manipulation</li>
<li>系统中安装的是 <a href="https://www.gnu.org/software/coreutils/" target="_blank" rel="noopener noreffer">GNU Coreutils</a>
<ul>
<li>有较小的替代品 <a href="https://www.busybox.net/" target="_blank" rel="noopener noreffer">busybox</a></li>
</ul>
</li>
</ul>
<hr>
<p>系统/工具程序</p>
<ul>
<li>
<p>bash,binutils, apt, ip, ssh, vim, tmux, jdk, python, &hellip;</p>
<ul>
<li>
<p>这些工具的原理都不复杂 (例如 apt 其实只是 dpkg 的壳)</p>
</li>
<li>
<p><a href="https://packages.ubuntu.com/" target="_blank" rel="noopener noreffer">Ubuntu Packages</a> (和 apt-file 工具) 支持文件名检索</p>
<ul>
<li>例子：找不到 <code>SDL2/SDL.h</code> 时&hellip;</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>其他各种应用程序</p>
<ul>
<li>浏览器、音乐播放器……</li>
</ul>
<h4 id="操作系统中的程序dark-side">操作系统中的程序：Dark Side</h4>
<blockquote>
<p>杀人的面试题 (1)：一个普通的、人畜无害的 Hello World C 程序执行的第一条指令在哪里？</p>
</blockquote>
<p>等价问法</p>
<ul>
<li>“二进制程序状态机的初始状态是什么？”
<ul>
<li><code>main</code> 的第一条指令 ❌</li>
<li><code>libc</code> 的 <code>_start</code> ❌</li>
</ul>
</li>
</ul>
<hr>
<p>问 gdb 吧</p>
<ul>
<li><code>info proc {mappings,...}</code> - 打印进程内存</li>
</ul>
<p>使用<code>gdb</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-13.png" title="/img/Operating System/chapter2-13.png" data-thumbnail="/img/Operating System/chapter2-13.png" data-sub-html="<h2>gdb(查看入口)</h2>">
        
    </a><figcaption class="image-caption">gdb(<code>查看入口</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">0x00007ffff7fe32b0 in _start <span class="o">()</span> from /lib64/ld-linux-x86-64.so.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用<code>info proc mappings</code>命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> info proc mappings 
</span></span><span class="line"><span class="cl">process <span class="m">48808</span>
</span></span><span class="line"><span class="cl">Mapped address spaces:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          Start Addr           End Addr       Size     Offset  Perms  objfile
</span></span><span class="line"><span class="cl">      0x555555554000     0x555555555000     0x1000        0x0  r--p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555555000     0x555555556000     0x1000     0x1000  r-xp   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555556000     0x555555557000     0x1000     0x2000  r--p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x555555557000     0x555555559000     0x2000     0x2000  rw-p   /home/jungle/a.out
</span></span><span class="line"><span class="cl">      0x7ffff7fbd000     0x7ffff7fc1000     0x4000        0x0  r--p   <span class="o">[</span>vvar<span class="o">]</span>
</span></span><span class="line"><span class="cl">      0x7ffff7fc1000     0x7ffff7fc3000     0x2000        0x0  r-xp   <span class="o">[</span>vdso<span class="o">]</span>
</span></span><span class="line"><span class="cl">      0x7ffff7fc3000     0x7ffff7fc5000     0x2000        0x0  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7fc5000     0x7ffff7fef000    0x2a000     0x2000  r-xp   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7fef000     0x7ffff7ffa000     0xb000    0x2c000  r--p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffff7ffb000     0x7ffff7fff000     0x4000    0x37000  rw-p   /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span class="line"><span class="cl">      0x7ffffffde000     0x7ffffffff000    0x21000        0x0  rw-p   <span class="o">[</span>stack<span class="o">]</span>
</span></span><span class="line"><span class="cl">  0xffffffffff600000 0xffffffffff601000     0x1000        0x0  --xp   <span class="o">[</span>vsyscall<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="main-之前发生了什么"><code>main()</code> 之前发生了什么？</h5>
<p><code>ld-linux-x86-64.so</code> 加载了 libc</p>
<ul>
<li>之后 libc 完成了自己的初始化
<ul>
<li>RTFM: <a href="https://www.gnu.org/software/hurd/glibc/startup.html" target="_blank" rel="noopener noreffer">libc startup</a> on Hurd</li>
<li><code>main()</code> 的开始/结束并不是整个程序的开始/结束</li>
<li>例子：<a href="https://jyywiki.cn/pages/OS/2022/demos/hello-goodbye.c" target="_blank" rel="noopener noreffer">hello-goodbye.c</a></li>
</ul>
</li>
</ul>
<hr>
<p>谁规定是 <code>ld-linux-x86-64.so</code>，而不是 <code>rtfm.so</code>？</p>
<ul>
<li>readelf 告诉你答案</li>
<li>(计算机系统不存在玄学；一切都建立在确定的机制上)
<ul>
<li>回顾 <code>gcc --verbose</code></li>
</ul>
</li>
</ul>
<p><code>hello-goodbye.c</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">__attribute__</span><span class="p">((</span><span class="n">constructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">hello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Hello, World</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// See also: atexit(3)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__attribute__</span><span class="p">((</span><span class="n">destructor</span><span class="p">))</span> <span class="kt">void</span> <span class="n">goodbye</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Goodbye, Cruel OS World!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter2-14.png" title="/img/Operating System/chapter2-14.png" data-thumbnail="/img/Operating System/chapter2-14.png" data-sub-html="<h2>vim(汇编代码)</h2>">
        
    </a><figcaption class="image-caption">vim(<code>汇编代码</code>)</figcaption>
    </figure>
<p>后面老师hacker改二进制代码的时候✌️的👀已经跟不上了，脑子更是直接💩🐴</p>
<blockquote>
<p>杀人的面试题 (2)：main 执行之前、执行中、执行后，发生了哪些操作系统 API 调用？</p>
</blockquote>
<hr>
<p>呃……</p>
<ul>
<li>(计算机系统不存在玄学；一切都建立在确定的机制上)</li>
<li>所以你应该有一个强烈的信念：这个问题是可以回答的</li>
</ul>
<h4 id="打开程序的执行trace-踪迹">打开程序的执行：Trace (踪迹)</h4>
<blockquote>
<p>In general, trace refers to the process of following <em>anything</em> from the beginning to the end. For example, the <code>traceroute</code> command follows each of the network hops as your computer connects to another computer.</p>
</blockquote>
<p>这门课中很重要的工具：strace</p>
<ul>
<li>system call trace</li>
<li>理解程序运行时使用的系统调用
<ul>
<li>demo: <code>strace ./hello-goodbye</code></li>
<li>在这门课中，你能理解 strace 的输出并在你自己的操作系统里实现相当一部分系统调用 (mmap, execve, &hellip;)</li>
</ul>
</li>
</ul>
<p>使用<code>strace</code></p>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-15.png" title="/img/Operating System/chapter2-15.png" data-thumbnail="/img/Operating System/chapter2-15.png" data-sub-html="<h2>linux(使用strace)</h2>">
        
    </a><figcaption class="image-caption">linux(<code>使用strace</code>)</figcaption>
    </figure>
<h4 id="本质上所有的程序和-hello-world-类似">本质上，所有的程序和 Hello World 类似</h4>
<p>程序 = 状态机 = 计算 → syscall → 计算 →</p>
<ul>
<li>
<p>被操作系统加载</p>
<ul>
<li>通过另一个进程执行 execve 设置为初始状态</li>
</ul>
</li>
<li>
<p>状态机执行</p>
<ul>
<li>进程管理：fork, execve, exit, &hellip;</li>
<li>文件/设备管理：open, close, read, write, &hellip;</li>
<li>存储管理：mmap, brk, &hellip;</li>
</ul>
</li>
<li>
<p>直到 _exit (exit_group) 退出</p>
</li>
</ul>
<hr>
<ul>
<li>说好的浏览器、游戏、杀毒软件、病毒呢？都是这些 API 吗？💢💢💢(都是) $\rightarrow$🐮🍺</li>
</ul>
<h4 id="yes---这些-api-就是操作系统的全部">Yes! - 这些 API 就是操作系统的全部</h4>
<p>编译器 (gcc)，代表其他工具程序</p>
<ul>
<li>
<p>主要的系统调用：execve, read, write</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace -f gcc a.c
</span></span></code></pre></td></tr></table>
</div>
</div><p>(gcc 会启动其他进程)</p>
<ul>
<li>可以管道给编辑器 <code>vim -</code></li>
<li>编辑器里还可以 <code>%!grep</code> (细节/技巧)</li>
</ul>
</li>
</ul>
<hr>
<p>图形界面程序 (xedit)，代表其他图形界面程序 (例如 vscode)</p>
<ul>
<li>
<p>主要的系统调用：poll, recvmsg, writev</p>
</li>
<li>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">strace xedit
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>图形界面程序和 X-Window 服务器按照 X11 协议通信</li>
<li>虚拟机中的 <code>xedit</code> 将 <code>X11</code> 命令通过<code>ssh</code>(X11 forwarding) 转发到 Host</li>
</ul>
</li>
</ul>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter2-16.png" title="/img/Operating System/chapter2-16.png" data-thumbnail="/img/Operating System/chapter2-16.png" data-sub-html="<h2>strace(xedit)</h2>">
        
    </a><figcaption class="image-caption">strace(<code>xedit</code>)</figcaption>
    </figure>
<h4 id="各式各样的应用程序">各式各样的应用程序</h4>
<p>都在操作系统 API (syscall) 和操作系统中的对象上构建</p>
<ul>
<li>窗口管理器
<ul>
<li>管理设备和屏幕 (read/write/mmap)</li>
<li>进程间通信 (send, recv)</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>任务管理器
<ul>
<li>访问操作系统提供的进程对象 (readdir/read)</li>
<li>参考 gdb 里的 <code>info proc *</code></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>杀毒软件
<ul>
<li>文件静态扫描 (read)</li>
<li>主动防御 (ptrace)</li>
<li>其他更复杂的安全机制……</li>
</ul>
</li>
</ul>
<h3 id="总结">总结</h3>
<p>本次课回答的问题</p>
<ul>
<li><strong>Q</strong>: 到底什么是 “程序”？</li>
</ul>
<hr>
<p>$Take-away\ message\newline$</p>
<ul>
<li>程序 = 状态机
<ul>
<li>源代码 S: 状态迁移 = 执行语句</li>
<li>二进制代码 C: 状态迁移 = 执行指令</li>
<li>编译器 $C=compile(S)\newline$</li>
</ul>
</li>
<li>应用视角的操作系统
<ul>
<li>就是一条 <code>syscall</code> 指令</li>
</ul>
</li>
<li>计算机系统不存在玄学；一切都建立在确定的机制上
<ul>
<li>理解操作系统的重要工具：<code>gcc</code>, <code>binutils</code>, <code>gdb</code>, <code>strace</code></li>
</ul>
</li>
</ul>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
<item>
    <title>OpenCV Chapter1</title>
    <link>https://Jungle430.github.io/posts/opencv/opencv-chapter1/</link>
    <pubDate>Fri, 30 Dec 2022 21:52:20 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/opencv/opencv-chapter1/</guid>
    <description><![CDATA[<h1 id="opencv">OpenCV</h1>
<h2 id="图像基本操作">图像基本操作</h2>
<h3 id="计算机眼中的图像">计算机眼中的图像</h3>
<figure><a class="lightgallery" href="/img/Opencv/chapter1-1.png" title="/img/Opencv/chapter1-1.png" data-thumbnail="/img/Opencv/chapter1-1.png" data-sub-html="<h2>image(计算机眼中的图像)</h2>">
        
    </a><figcaption class="image-caption">image(<code>计算机眼中的图像</code>)</figcaption>
    </figure>
<p>由一个个像素点构成了一张图像</p>
<p>像素点:一个值，范围$[0,255]$,表示了该点的一个亮度，$0\rightarrow black\ and\ 255\rightarrow white\newline$</p>
<p>一个点对应着3个值$R,G,B\rightarrow 图像的颜色通道\newline$</p>
<p>$RGB颜色通道$:(光学三原色)， 通过表示其像素点的值可以表示彩色图像（黑白图像/灰度图就没有）</p>
<p>矩阵大小$\rightarrow$ 图像大小</p>
<h3 id="数据读取图像">数据读取——图像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>  <span class="c1"># OpenCV读取格式是BGR(与其他库使用时注意格式是否一致)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># The type of img -&gt; &#39;numpy.ndarray&#39;, dtype=uint8 -&gt; [0, 255]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># show the image</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;image&#39;</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># The waiting time(ms), if the para is zero, waiting the key entering</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Destroy the window</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyWindow</span><span class="p">(</span><span class="s1">&#39;image&#39;</span><span class="p">)</span>  <span class="c1"># can also use cv2.destroyAllWindows()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可调用属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># Example:(414, 500, 3) 3 -&gt; BGR</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>  <span class="c1"># 像素点的个数</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>  <span class="c1"># 通常为uint8</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>读取图像方式设置</p>
<ul>
<li>cv2.IMREAD_COLOR：彩色图像</li>
<li>cv2.IMREAD_GRAYSCALE：灰度图像</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">IMREAD_GRAYSCALE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># In cv2.IMREAD_GRAYSCALE</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">[[ 48  48  48 ...  48  48  48]
</span></span></span><span class="line"><span class="cl"><span class="s2">[ 48  48  48 ...  48  48  48]
</span></span></span><span class="line"><span class="cl"><span class="s2">[ 48  48  48 ...  49  49  49]
</span></span></span><span class="line"><span class="cl"><span class="s2">...
</span></span></span><span class="line"><span class="cl"><span class="s2">[ 72  69  65 ... 210 210 210]
</span></span></span><span class="line"><span class="cl"><span class="s2">[ 65  63  60 ... 208 207 207]
</span></span></span><span class="line"><span class="cl"><span class="s2">[ 61  59  56 ... 203 201 200]]
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (940, 940)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>保存</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imwrite</span><span class="p">(</span><span class="s2">&#34;../LearnOpenCV/temp.jpg&#34;</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl"><span class="c1">#First para is path and name, Second para is the image(ndarray)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="数据读取视频">数据读取——视频</h3>
<ul>
<li>cv2.VideoCapture可以捕获摄像头，用数字控制不同的设备，例如0， 1</li>
<li>如果是视频文件，直接指定好路径即可</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">video</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="s2">&#34;video path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">video</span><span class="p">))</span>  <span class="c1"># cv2.VideoCapture</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">opened</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Check that it is opened correctly</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">video</span><span class="o">.</span><span class="n">isOpened</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">video</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ret -&gt; it is read correctly(Every frame), frame -&gt; image (Every frame)</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">opened</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># traversal video</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="n">opened</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">video</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">frame</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>  <span class="c1"># After reading the frame is None, exit</span>
</span></span><span class="line"><span class="cl">        <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">ret</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>  <span class="c1"># Convert to grayscale(灰度图）</span>
</span></span><span class="line"><span class="cl">        <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">gray</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="o">==</span> <span class="mi">27</span><span class="p">:</span>  <span class="c1"># waiting time, and enter esc to exit</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">video</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">The method is automatically called by subsequent VideoCapture::open and by VideoCapture
</span></span></span><span class="line"><span class="cl"><span class="s2">        .       destructor.
</span></span></span><span class="line"><span class="cl"><span class="s2">        .   
</span></span></span><span class="line"><span class="cl"><span class="s2">        .       The C function also deallocates memory and clears \*capture pointer.
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="roiregion-of-interest">ROI(region of interest)</h3>
<p>本质（通过数组切片来分割图像）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">roi</span> <span class="o">=</span> <span class="n">img</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">300</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">200</span><span class="p">]</span>  <span class="c1"># numpy 切片</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">roi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="颜色通道提取">颜色通道提取</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>  <span class="c1"># notice : B -&gt; G -&gt; R!!!</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">[[243 241 243 ... 239 240 241]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [239 241 239 ... 239 238 239]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [241 242 238 ... 241 238 237]
</span></span></span><span class="line"><span class="cl"><span class="s2"> ...
</span></span></span><span class="line"><span class="cl"><span class="s2"> [238 234 236 ... 240 239 239]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [237 236 237 ... 240 241 237]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [239 237 237 ... 240 240 237]]
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (512, 512)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">temp</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">merge</span><span class="p">((</span><span class="n">b</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>  <span class="c1"># restore</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">temp</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>只保留单个通道</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">img</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># R</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">cur_img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># G</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">cur_img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># B</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">cur_img</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">cur_img</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="边界填充">边界填充</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">img</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">top_size</span><span class="p">,</span> <span class="n">bottom_size</span><span class="p">,</span> <span class="n">left_size</span><span class="p">,</span> <span class="n">right_size</span> <span class="o">=</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">50</span>  <span class="c1"># 上下左右填充的大小</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">replicate</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">copyMakeBorder</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">top_size</span><span class="p">,</span> <span class="n">bottom_size</span><span class="p">,</span> <span class="n">left_size</span><span class="p">,</span> <span class="n">right_size</span><span class="p">,</span> <span class="n">borderType</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">BORDER_REPLICATE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reflect</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">copyMakeBorder</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">top_size</span><span class="p">,</span> <span class="n">bottom_size</span><span class="p">,</span> <span class="n">left_size</span><span class="p">,</span> <span class="n">right_size</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">BORDER_REFLECT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">reflect101</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">copyMakeBorder</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">top_size</span><span class="p">,</span> <span class="n">bottom_size</span><span class="p">,</span> <span class="n">left_size</span><span class="p">,</span> <span class="n">right_size</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">BORDER_REFLECT_101</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">wrap</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">copyMakeBorder</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">top_size</span><span class="p">,</span> <span class="n">bottom_size</span><span class="p">,</span> <span class="n">left_size</span><span class="p">,</span> <span class="n">right_size</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">BORDER_WRAP</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">constant</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">copyMakeBorder</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">top_size</span><span class="p">,</span> <span class="n">bottom_size</span><span class="p">,</span> <span class="n">left_size</span><span class="p">,</span> <span class="n">right_size</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">BORDER_CONSTANT</span><span class="p">,</span> <span class="n">value</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">replicate</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">reflect</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">reflect101</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">wrap</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">show</span><span class="p">(</span><span class="n">constant</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>BORDER_REPLICATE：复制法，也就是复制最边缘像素</li>
<li>BORDER_REFLECT：反射法，对感兴趣的图像中的像素进行两边复制，例如:（左边）fedcba|abcdefgh（图像）|hgfedcb（右边）</li>
<li>BORDER_REFLECT_101：反射法，也就是<strong>以最边缘像素为轴</strong>，对称，gfedcb|abcdefgh|gfedcba（a和h为对称轴）</li>
<li>BORDER_WRAP：外包装法， cdefgh|abcdefgh|abcdefg （按照原顺序）</li>
<li>BORDER_CONSTANT：常数法，常数值填充(需要指定$value$)</li>
</ul>
<h3 id="数值计算">数值计算</h3>
<p>图像数值加减</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">[[[243 249 254]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [241 249 255]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [243 249 255]
</span></span></span><span class="line"><span class="cl"><span class="s2">  ...
</span></span></span><span class="line"><span class="cl"><span class="s2">  [239 247 254]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [240 248 255]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [241 247 254]]
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"> [[239 247 254]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [241 247 254]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [239 247 254]
</span></span></span><span class="line"><span class="cl"><span class="s2">  ...
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">img</span> <span class="o">+</span> <span class="mi">10</span>  <span class="c1"># 每一个像素点都+10, 然后mod256(dytpe=unit8, 自我取余防止越界)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">[[[253   3   8]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [251   3   9]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [253   3   9]
</span></span></span><span class="line"><span class="cl"><span class="s2">  ...
</span></span></span><span class="line"><span class="cl"><span class="s2">  [249   1   8]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [250   2   9]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [251   1   8]]
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2"> [[249   1   8]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [251   1   8]
</span></span></span><span class="line"><span class="cl"><span class="s2">  [249   1   8]
</span></span></span><span class="line"><span class="cl"><span class="s2">  ...
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">cv2</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">img1</span><span class="p">)[:</span><span class="mi">5</span><span class="p">,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">])</span>  <span class="c1"># cv2.add(), 一旦越界，直接取255</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">[[255 255 255 ... 255 255 255]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [255 255 255 ... 255 255 255]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [255 255 255 ... 255 255 255]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [255 255 255 ... 255 255 255]
</span></span></span><span class="line"><span class="cl"><span class="s2"> [255 255 255 ... 255 255 255]]
</span></span></span><span class="line"><span class="cl"><span class="s2"> &#34;&#34;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>图像融合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img1 path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img2 path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="n">img1</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span>  <span class="c1"># 大小一致</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img1</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (512, 512, 3)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">img2</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (512, 512, 3)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">fx</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">fy</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># 按比例调整</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>  <span class="c1"># (512, 1536, 3)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># R = y1x1 + y2x2 + b (权重和附加值)</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">addWeighted</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="n">img2</span><span class="p">,</span> <span class="mf">0.6</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="图像阈值">图像阈值</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">threshold</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">thresh</span><span class="p">,</span> <span class="n">maxval</span><span class="p">,</span> <span class="nb">type</span><span class="p">,</span> <span class="n">dst</span><span class="o">=</span><span class="kc">None</span><span class="p">):</span> <span class="c1"># real signature unknown; restored from __doc__</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    threshold(src, thresh, maxval, type[, dst]) -&gt; retval, dst
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @brief Applies a fixed-level threshold to each array element.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   The function applies fixed-level thresholding to a multiple-channel array. The function is typically
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   used to get a bi-level (binary) image out of a grayscale image ( #compare could be also used for
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   this purpose) or for removing a noise, that is, filtering out pixels with too small or too large
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   values. There are several types of thresholding supported by the function. They are determined by
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   type parameter.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   Also, the special values #THRESH_OTSU or #THRESH_TRIANGLE may be combined with one of the
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   above values. In these cases, the function determines the optimal threshold value using the Otsu&#39;s
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   or Triangle algorithm and uses it instead of the specified thresh.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @note Currently, the Otsu&#39;s and Triangle methods are implemented only for 8-bit single-channel images.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @param src input array (multiple-channel, 8-bit or 32-bit floating point).
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @param dst output array of the same size  and type and the same number of channels as src.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @param thresh threshold value.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @param maxval maximum value to use with the #THRESH_BINARY and #THRESH_BINARY_INV thresholding
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   types.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @param type thresholding type (see #ThresholdTypes).
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @return the computed threshold value if Otsu&#39;s or Triangle methods used.
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   
</span></span></span><span class="line"><span class="cl"><span class="s2">    .   @sa  adaptiveThreshold, findContours, compare, min, max
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>参数说明：</p>
<ul>
<li>src:输入图</li>
<li>thresh：阈值</li>
<li>maxval：当像素值超过了阈值（或者小于阈值，由type来决定），所赋予的值</li>
<li>type：二值化操作的类型，如下
<ul>
<li>cv2.THRESH_BINARY：超过阈值部分取maxval， 否则取0</li>
<li>cv2.THRESH_BINARY_INV：cv2.THRESH_BINARY的反转</li>
<li>cv2.THRESH_TRUNC：大于阈值的部分设为阈值，否则不变</li>
<li>cv2.THRESH_TOZERO：大于阈值部分不改变，否则设为零</li>
<li>cv2.THRESH_TOZERO_INV：cv2.THRESH_TOZERO的反转</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ret</span><span class="p">,</span> <span class="n">dst</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">thresh</span><span class="p">,</span> <span class="n">maxval</span><span class="p">,</span> <span class="nb">type</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>返回值：</p>
<ul>
<li>ret：用于阈值化的值，等同于thresh</li>
<li>dst：阈值化后生成的图像</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">show</span><span class="p">(</span><span class="n">image</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s1">&#39;result&#39;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">cv2</span><span class="o">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">img1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s2">&#34;img path&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">arr</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ret1</span><span class="p">,</span> <span class="n">thresh1</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_BINARY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thresh1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ret2</span><span class="p">,</span> <span class="n">thresh2</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_BINARY_INV</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thresh2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ret3</span><span class="p">,</span> <span class="n">thresh3</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_TRUNC</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thresh3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ret4</span><span class="p">,</span> <span class="n">thresh4</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_TOZERO</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thresh4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ret5</span><span class="p">,</span> <span class="n">thresh5</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">THRESH_TOZERO_INV</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">arr</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thresh5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">arr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">show</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Operating System Chapter1</title>
    <link>https://Jungle430.github.io/posts/operating-system/operating-system-chapter1/</link>
    <pubDate>Fri, 30 Dec 2022 16:27:09 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/operating-system/operating-system-chapter1/</guid>
    <description><![CDATA[<h1 id="operating-system">Operating System</h1>
<p>$Nanjing\ University\rightarrow Yanyan\ Jiang\newline$</p>
<h2 id="操作系统概述">操作系统概述</h2>
<p>$Overvier\newline$</p>
<ul>
<li>为什么要学操作系统? $(why)\newline$</li>
<li>到底什么是操作系统? $(what)\newline$</li>
<li>怎么学操作系统? $(how)\newline$</li>
</ul>
<h3 id="为什么学操作系统whynewline">为什么学操作系统?$(why)\newline$</h3>
<ul>
<li>
<p>每天都在用的东西你没搞明白 $\rightarrow$ 窗口是怎么创建的？ 为什么$Ctrl-C$有时不能退出程序？</p>
</li>
<li>
<p>组里的服务器有128个处理器，而你的程序却只能用一个 😂</p>
</li>
<li>
<p>你每天都在用的东西，却实现不出来🤡 $\rightarrow$ 浏览器，编译器，$IDE$，游戏/外挂，任务管理器，杀毒软件，病毒…</p>
</li>
</ul>
<p>学完：</p>
<p>悟性好 $\rightarrow$ 系统方向“毕业”，具有编写一切“能写出来”程序的能力（具备阅读论文的能力）</p>
<p>悟性差 $\rightarrow$ 内力大增， 可能在工作中的某一天想起上课的内容</p>
<h3 id="什么是操作系统whatnewline">什么是操作系统?$(what)\newline$</h3>
<blockquote>
<p>Operating System: A body of software, in fact, that is responsible for <em>making it easy to run programs</em> (even allowing you to seemingly run many at the same time), allowing programs to share memory, enabling programs to interact with devices, and other fun stuff like that. (OSTEP)</p>
</blockquote>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-1.png" title="/img/Operating System/chapter1-1.png" data-thumbnail="/img/Operating System/chapter1-1.png" data-sub-html="<h2>From PPT(什么是操作系统？)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>什么是操作系统？</code>)</figcaption>
    </figure>
<p>Question:操作系统如何从一开始变成现在这样的？</p>
<p>$\rightarrow$ 三个重要的线索</p>
<blockquote>
<p>计算机（硬件）</p>
<p>程序（软件）</p>
<p>操作系统（管理软件的软件）</p>
</blockquote>
<h4 id="操作系统历史">操作系统历史</h4>
<h5 id="1940s">1940s</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-2.png" title="/img/Operating System/chapter1-2.png" data-thumbnail="/img/Operating System/chapter1-2.png" data-sub-html="<h2>From PPT(1940s 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-3.jpg" title="/img/Operating System/chapter1-3.jpg" data-thumbnail="/img/Operating System/chapter1-3.jpg" data-sub-html="<h2>From PPT(1940s 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-4.jpg" title="/img/Operating System/chapter1-4.jpg" data-thumbnail="/img/Operating System/chapter1-4.jpg" data-sub-html="<h2>From PPT(1940s 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-5.png" title="/img/Operating System/chapter1-5.png" data-thumbnail="/img/Operating System/chapter1-5.png" data-sub-html="<h2>From PPT(1940s 4)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1940s 4</code>)</figcaption>
    </figure>
<h5 id="1950s">1950s</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-6.png" title="/img/Operating System/chapter1-6.png" data-thumbnail="/img/Operating System/chapter1-6.png" data-sub-html="<h2>From PPT(1950s 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-7.png" title="/img/Operating System/chapter1-7.png" data-thumbnail="/img/Operating System/chapter1-7.png" data-sub-html="<h2>From PPT(1950s 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 2</code>)</figcaption>
    </figure>
<p>Example code on ppt</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fortran" data-lang="fortran"><span class="line"><span class="cl"><span class="n">C</span><span class="o">----</span><span class="w"> </span><span class="n">THIS</span><span class="w"> </span><span class="k">PROGRAM </span><span class="n">READS</span><span class="w"> </span><span class="n">INPUT</span><span class="w"> </span><span class="n">FROM</span><span class="w"> </span><span class="n">THE</span><span class="w"> </span><span class="n">CARD</span><span class="w"> </span><span class="n">READER</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">C</span><span class="o">----</span><span class="w"> </span><span class="mi">3</span><span class="w"> </span><span class="n">INTEGERS</span><span class="w"> </span><span class="n">IN</span><span class="w"> </span><span class="n">EACH</span><span class="w"> </span><span class="n">CARD</span><span class="p">,</span><span class="w"> </span><span class="n">CALCULATE</span><span class="w"> </span><span class="nb">AND </span><span class="n">OUTPUT</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">C</span><span class="o">----</span><span class="w"> </span><span class="n">THE</span><span class="w"> </span><span class="nb">SUM </span><span class="n">OF</span><span class="w"> </span><span class="n">THEM</span><span class="p">.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="mi">100</span><span class="w"> </span><span class="k">READ</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span><span class="w"> </span><span class="n">I1</span><span class="p">,</span><span class="w"> </span><span class="n">I2</span><span class="p">,</span><span class="w"> </span><span class="n">I3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="mi">10</span><span class="w"> </span><span class="k">FORMAT</span><span class="p">(</span><span class="mi">3</span><span class="n">I5</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">IF</span><span class="w"> </span><span class="p">(</span><span class="n">I1</span><span class="p">.</span><span class="n">EQ</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="p">.</span><span class="nb">AND</span><span class="p">.</span><span class="w"> </span><span class="n">I2</span><span class="p">.</span><span class="n">EQ</span><span class="p">.</span><span class="mi">0</span><span class="w"> </span><span class="p">.</span><span class="nb">AND</span><span class="p">.</span><span class="w"> </span><span class="n">I3</span><span class="p">.</span><span class="n">EQ</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span><span class="w"> </span><span class="k">GOTO</span><span class="w"> </span><span class="mi">200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="n">ISUM</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">I1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">I2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">I3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">WRITE</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span><span class="w"> </span><span class="n">I1</span><span class="p">,</span><span class="w"> </span><span class="n">I2</span><span class="p">,</span><span class="w"> </span><span class="n">I3</span><span class="p">,</span><span class="w"> </span><span class="n">ISUM</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">   </span><span class="mi">20</span><span class="w"> </span><span class="k">FORMAT</span><span class="p">(</span><span class="mi">7</span><span class="n">HSUM</span><span class="w"> </span><span class="n">OF</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I5</span><span class="p">,</span><span class="w"> </span><span class="mi">2</span><span class="n">H</span><span class="p">,</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I5</span><span class="p">,</span><span class="w"> </span><span class="mi">5</span><span class="n">H</span><span class="w"> </span><span class="nb">AND</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I5</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="o">*</span><span class="w">   </span><span class="mi">4</span><span class="n">H</span><span class="w"> </span><span class="k">IS</span><span class="w"> </span><span class="p">,</span><span class="w"> </span><span class="n">I6</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="k">GOTO</span><span class="w"> </span><span class="mi">100</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="mi">200</span><span class="w"> </span><span class="k">STOP
</span></span></span><span class="line"><span class="cl"><span class="k">      END</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/Operating%20System/chapter1-8.png" title="/img/Operating System/chapter1-8.png" data-thumbnail="/img/Operating System/chapter1-8.png" data-sub-html="<h2>From PPT(1950s 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-9.png" title="/img/Operating System/chapter1-9.png" data-thumbnail="/img/Operating System/chapter1-9.png" data-sub-html="<h2>From PPT(1950s 4)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1950s 4</code>)</figcaption>
    </figure>
<h5 id="1960s">1960s</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-10.png" title="/img/Operating System/chapter1-10.png" data-thumbnail="/img/Operating System/chapter1-10.png" data-sub-html="<h2>From PPT(1960s 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-11.png" title="/img/Operating System/chapter1-11.png" data-thumbnail="/img/Operating System/chapter1-11.png" data-sub-html="<h2>From PPT(1960s 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-12.png" title="/img/Operating System/chapter1-12.png" data-thumbnail="/img/Operating System/chapter1-12.png" data-sub-html="<h2>From PPT(1960s 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-13.png" title="/img/Operating System/chapter1-13.png" data-thumbnail="/img/Operating System/chapter1-13.png" data-sub-html="<h2>From PPT(1960s 4)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1960s 4</code>)</figcaption>
    </figure>
<h5 id="1970s">1970s+</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-14.png" title="/img/Operating System/chapter1-14.png" data-thumbnail="/img/Operating System/chapter1-14.png" data-sub-html="<h2>From PPT(1970s&#43; 1)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1970s+ 1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-15.png" title="/img/Operating System/chapter1-15.png" data-thumbnail="/img/Operating System/chapter1-15.png" data-sub-html="<h2>From PPT(1970s&#43; 2)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1970s+ 2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-16.png" title="/img/Operating System/chapter1-16.png" data-thumbnail="/img/Operating System/chapter1-16.png" data-sub-html="<h2>From PPT(1970s&#43; 3)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>1970s+ 3</code>)</figcaption>
    </figure>
<h5 id="today">today</h5>
<figure><a class="lightgallery" href="/img/Operating%20System/chapter1-17.png" title="/img/Operating System/chapter1-17.png" data-thumbnail="/img/Operating System/chapter1-17.png" data-sub-html="<h2>From PPT(today)</h2>">
        
    </a><figcaption class="image-caption">From PPT(<code>today</code>)</figcaption>
    </figure>
<h4 id="理解操作系统三个根本问题">理解操作系统：三个根本问题</h4>
<p>操作系统服务谁？</p>
<ul>
<li><strong>程序 = 状态机</strong></li>
<li>课程涉及：多线程 $Linux$ 应用程序</li>
</ul>
<hr>
<p>(设计/应用视角) 操作系统为程序提供什么服务？</p>
<ul>
<li><strong>操作系统 = 对象 + $API\newline$</strong></li>
<li>课程涉及：$POSIX$ + 部分$ Linux$ 特性</li>
</ul>
<hr>
<p>(实现/硬件视角) 如何实现操作系统提供的服务？</p>
<ul>
<li><strong>操作系统 = C 程序</strong>
<ul>
<li>完成初始化后就成为 $interrupt/trap/fault handler\newline$</li>
</ul>
</li>
<li>课程涉及：$xv6$, 自制迷你操作系统</li>
</ul>
<h3 id="怎么学操作系统hownewline">怎么学操作系统?$(how)\newline$</h3>
<ol>
<li>是一个合格的操作系统用户
<ul>
<li>会 $STFW/RTFM$ 自己动手解决问题</li>
<li>不怕使用任何命令行工具
<ul>
<li>$vim, tmux, grep, gcc, binutils, &hellip;\newline$</li>
</ul>
</li>
</ul>
</li>
<li>不惧怕写代码
<ul>
<li>能管理一定规模 (数千行) 的代码</li>
<li>能在出 bug 时默念 “机器永远是对的、我肯定能调出来的”
<ul>
<li>然后开始用正确的工具/方法调试</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>写代码 = 创造有趣的东西</p>
<ul>
<li>命令行 + 浏览器就是世界</li>
</ul>
<p>教科书:</p>
<p>Remzi&rsquo;s <a href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener noreffer">Operating Systems: Three Easy Pieces</a></p>
<p>顺序：并发 → 虚拟化 → 持久化</p>
<p><strong>声明：本文章引用资料与图像均已做标注，如有侵权本人会马上删除</strong></p>
]]></description>
</item>
<item>
    <title>Sorting</title>
    <link>https://Jungle430.github.io/posts/data-structures-and-algorithms/sorting/</link>
    <pubDate>Fri, 18 Nov 2022 22:05:21 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/data-structures-and-algorithms/sorting/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="sorting">Sorting</h2>
<h3 id="quicksort">QuickSort</h3>
<h4 id="idea">Idea</h4>
<blockquote>
<p>$Process\ after\ dividing \rightarrow$(like MergeSort in thought)</p>
</blockquote>
<p>Divide the sequence into two subsequences
$$
S=S_L+S_R
$$
Downsizing
$$
max(|S_L|,|S_R|) &lt; n
$$
Be independent of each other
$$
max(S_L) \leq min(S_R)
$$
After the subsequences are sorted recursively, the original sequence is ordered naturally
$$
Sorted(S)=Sorted(S_L)+Sorted(S_R)
$$
A trivial solution: <strong>With a single element, is itself a solution</strong>$\rightarrow Recursive\ base\newline$</p>
<h4 id="problem">Problem</h4>
<p>How to delimit subsequence?</p>
<h4 id="pivot">Pivot</h4>
<p><strong>None</strong> of the <strong>left/right</strong> elements are <strong>bigger/smaller</strong> than it</p>
<p>$\rightarrow$ With the <strong>pivot as the boundary</strong>, the partition of the sequence will be realized naturally
$$
[l0,hi)=[lo,mi)+[mi]+(mi,hi)
$$
Key point: <strong>Construct Pivot!</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">quickSort</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//0 &lt;= lo &lt; hi &lt;= size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">if</span> <span class="p">(</span> <span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">)</span> <span class="k">return</span><span class="p">;</span> <span class="c1">//Recursive base
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">Rank</span> <span class="n">mi</span> <span class="o">=</span> <span class="n">partition</span> <span class="p">(</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="p">);</span> <span class="c1">//Key point
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">quickSort</span> <span class="p">(</span> <span class="n">lo</span><span class="p">,</span> <span class="n">mi</span> <span class="p">);</span> 
</span></span><span class="line"><span class="cl">   <span class="n">quickSort</span> <span class="p">(</span> <span class="n">mi</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hi</span> <span class="p">);</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="partition">Partition</h4>
<blockquote>
<p>Difficulty: pivot <strong>may not exist</strong> in the original sequence</p>
<p>Good news: The pivot <strong>must be in place</strong></p>
<p>In an ordered sequence, <strong>all elements</strong> are pivots <strong>and vice versa</strong></p>
</blockquote>
<h4 id="construct-pivot">Construct Pivot</h4>
<div class="mermaid" id="id-1"></div>
<h4 id="analysis">Analysis</h4>
<p><strong>Unstable</strong>
$$
\begin{align}
&amp;Example:\newline
&amp;Before:[&hellip;5_a&hellip;5_b&hellip;]\newline
&amp;After:[&hellip;5_b&hellip;5_a&hellip;]\newline
\end{align}
$$</p>
<h5 id="in-place">In-place</h5>
<p>$O(1)$ nice!</p>
<h5 id="in-time">In-time</h5>
<h6 id="best-case">Best case</h6>
<p>The pivot is always (near) in the center</p>
<p>$$
T(n)=2T(\frac{n-1}{2})+O(n)\newline
T(n)=O(n\log n)\newline
$$</p>
<h6 id="worst-case">Worst case</h6>
<p>Each division is extremely uneven
$$
T(n)=T(n-1)+T(0)+O(n)\newline
T(n)=O(n^2)\newline
$$</p>
<blockquote>
<p>Reduce the worst case probability</p>
<blockquote>
<p>Random selection</p>
<p>Middle of three(Randomly select three elements in the sequence and take the middle value)</p>
</blockquote>
<p>But it can only reduce the probability, not eliminate</p>
</blockquote>
<h6 id="average">Average</h6>
<p>$O(n\log n)\newline$</p>
<p>Take a <strong>uniformly independent distributed sequence</strong> as an example
$$
\begin{align}
&amp;order\ the\ rank\ of\ the\ pivot\ is\ k\newline
&amp;\rightarrow probability:\frac{1}{n}\newline\newline
&amp;then\ T(n)=(n+1)+(\frac{1}{n}) * \sum_{k=0}^{n-1}[T(k)+T(n-k-1)]\newline
&amp;It&rsquo;s\ easy\ to\ see\ that\rightarrow T(k)=T(n-k-1)\newline
&amp;T(n)=(n+1)+(\frac{2}{n}) * \sum_{k=0}^{n-1}T(k)\newline
&amp;n*T(n)=n * (n+1)+2 * \sum_{k=0}^{n-1}T(k)\ (1)\newline\newline
&amp;make\ n = n - 1\newline
&amp;(n-1) * T(n-1)=(n-1) * n+2 * \sum_{k=0}^{n-2}T(k)\ (2)\newline\newline
&amp;Then\ (1)-(2)\newline
&amp;n * T(n) - (n - 1) * T(n - 1) = 2 * n + 2 * T(n-1)\newline
&amp;n * T(n) - (n + 1) * T(n - 1)=2 * n\newline
&amp;\frac {T(n)}{n + 1} = \frac {T(n - 1)}{n}+\frac {2}{n+1}\newline
&amp;=\frac {2}{n+1} + \frac {2}{n} + \frac {2}{n-1} + &hellip; + \frac {2}{2} + \frac{T(0)}{1}\newline
&amp;=(2\ln2) * \log n \approx 1.39 * \log n\newline
\end{align}
$$</p>
<h4 id="algorithm-of-optimizationlgu">Algorithm of optimization(LGU)</h4>
<p>$$
S=[l0]+L(lo,mi]+G(mi,k)+U[l,hi]\newline
L &lt; pivot\leq G\newline
$$</p>
<div class="mermaid" id="id-2"></div>
<h5 id="code">code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//pivot construction algorithm;
</span></span></span><span class="line"><span class="cl"><span class="c1">//by adjusting the element position to construct the pivot of the interval [lo, hi] and return its rank
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">partition</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//LGU
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">swap</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="n">lo</span><span class="p">],</span> <span class="n">_elem</span><span class="p">[</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span> <span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span> <span class="p">)</span> <span class="p">]</span> <span class="p">);</span> <span class="c1">//Swap any element with the first element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">T</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">_elem</span><span class="p">[</span><span class="n">lo</span><span class="p">];</span> <span class="c1">//Take the first element as the candidate pivot 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    					<span class="c1">//-- after the above exchange, equivalent to random selection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="kt">int</span> <span class="n">mi</span> <span class="o">=</span> <span class="n">lo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//   ---- L &lt; [lo] ----- ] ----- [lo] &lt;= G --- ] [ ----- Unknown -------
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// X x . . . . . . . . . x . . . . . . . . . . . x . . . . . . . . . . x X
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// |                     |                       |                       |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// lo (pivot candidate)  mi                      k                       hi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">k</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span> <span class="p">)</span> <span class="c1">//Scan from left to right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span> <span class="p">)</span> <span class="c1">//If the current element _elem[k] is less than pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="n">swap</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="o">++</span><span class="n">mi</span><span class="p">],</span> <span class="n">_elem</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="p">);</span> <span class="c1">//After swapping _elem[k] to the original mi, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    									 <span class="c1">//the L subsequence expands to the right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//   --------- L &lt; [lo] ---------- ] ------------- [lo] &lt;= G ----------]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// X x . . . . . . . . . . . . . . x . . . . . . . . . . . . . . . . . x X
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// |                               |                                     |
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">// lo (pivot candidate)            mi                                    hi
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="c1">//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">   <span class="n">swap</span> <span class="p">(</span> <span class="n">_elem</span><span class="p">[</span><span class="n">lo</span><span class="p">],</span> <span class="n">_elem</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span> <span class="p">);</span> <span class="c1">//Candidate pivot homing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">return</span> <span class="n">mi</span><span class="p">;</span> <span class="c1">//return its rank
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="in-place-1">In-place</h5>
<p>$O(1)\newline$</p>
<h5 id="in-time-1">In-time</h5>
<p>$O(n)\newline$</p>
<h3 id="selection">Selection</h3>
<blockquote>
<p>The time cost of sorting is too high and you need to find other methods</p>
</blockquote>
<p><strong>K-selection</strong></p>
<p>In any set of comparably sized elements, how do you go from small to large to find the elements of order k?</p>
<p><strong>Example</strong></p>
<blockquote>
<p>Excel: large(range, rank)</p>
</blockquote>
<h4 id="median">Median</h4>
<p>The length of the <strong>sorted sequence</strong> S is n$(range\ from\ 0\ to\ n - 1)$, the element whose order is $\lfloor \frac {n}{2} \rfloor$ is called median</p>
<p><strong>Example</strong></p>
<blockquote>
<p>Excel: median(range)</p>
</blockquote>
<h4 id="mode">Mode</h4>
<p>In an <strong>unordered sequence</strong>, if <strong>more than half</strong> of the elements are m, m is called the mode</p>
<p><strong>Example</strong>
$$
\begin{align}
&amp;[3,5,2,3,3]\rightarrow mode\ is\ 3\newline
&amp;but\ in\ [3,5,2,3,3,0]\rightarrow no\ mode\newline
\end{align}
$$</p>
<h5 id="mode-algorithm">mode algorithm</h5>
<blockquote>
<p>Trivial algorithm: sort + traversal</p>
</blockquote>
<p>but if we want that $\rightarrow T(n) \leq O(n)\ and\ S(n)\leq O(1)?\newline$</p>
<blockquote>
<p>Necessary condition: If mode exists, then <strong>the mode must also be the median</strong></p>
<p>The mode, if it exists, <strong>must be frequent</strong></p>
</blockquote>
<p>$Process\ after\ reducing\newline$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="n">T</span> <span class="n">majEleCandidate</span> <span class="p">(</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">A</span> <span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">   <span class="n">T</span> <span class="n">maj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">==</span> <span class="n">c</span> <span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">         <span class="n">maj</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> 
</span></span><span class="line"><span class="cl">          <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="k">else</span> 
</span></span><span class="line"><span class="cl">         <span class="n">maj</span> <span class="o">==</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">?</span> <span class="n">c</span><span class="o">++</span> <span class="o">:</span> <span class="n">c</span><span class="o">--</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">maj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="general-purpose-algorithm">General purpose algorithm</h4>
<h5 id="quickselect">quickSelect</h5>
<p>$Process\ after\ reducing\newline$</p>
<p>Partition</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">quickSelect</span> <span class="p">(</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">A</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">k</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">;</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">lo</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">hi</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="n">T</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">lo</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="k">while</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//O(hi - lo + 1) = O(n)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="k">while</span> <span class="p">(</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">pivot</span> <span class="o">&lt;=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">)</span> <span class="p">)</span> <span class="n">j</span><span class="o">--</span><span class="p">;</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">         <span class="k">while</span> <span class="p">(</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">j</span> <span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span> <span class="p">)</span> <span class="p">)</span> <span class="n">i</span><span class="o">++</span><span class="p">;</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span> <span class="c1">//assert: quit with i == j
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivot</span><span class="p">;</span> <span class="c1">// A[0,i) &lt;= A[i] &lt;= A(i, n)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="p">)</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">k</span> <span class="p">)</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span> <span class="c1">//A[k] is now a pivot
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h6 id="worst-case-1">Worst case</h6>
<p>$T(n)=O(n)+T(\frac {n}{Q})+T(\frac{3n}{4})\newline$</p>
<p>$if\ we\ want\ that\ T(n)=O(n)\newline$</p>
<p>$we\ should\ make\ \frac{n}{Q}+\frac{3n}{4}&lt;n \newline$</p>
<p>$so\ \frac{1}{Q}+\frac{3}{4}&lt;1\newline$</p>
<p>$make\ Q=5\newline$</p>
<p>$T(n)=cn+T(\frac{n}{5})+T(\frac{3n}{4})\newline$</p>
<p>$then\ T(n)=O(20cn)=O(n)\newline$</p>
<h5 id="linearselect">linearSelect</h5>
<p>Let Q be a small constant</p>
<ol start="0">
<li>
<p>if ( n = |A| &lt; Q ) return trivialSelect( A, k )</p>
</li>
<li>
<p>else divide A evenly into n/Q subsequences (each of size Q)</p>
</li>
<li>
<p>Sort each subsequence and determine n/Q medians //e.g. by insertionsort</p>
</li>
<li>
<p>Call linearSelect() to find M, median of the medians //by recursion</p>
</li>
<li>
<p>Let L/E/G = { x &lt;/=/&gt; M | x $\in$ A }</p>
</li>
<li></li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="o">|</span><span class="n">L</span><span class="o">|</span> <span class="p">)</span> <span class="k">return</span> <span class="n">linearSelect</span><span class="p">(</span> <span class="n">L</span><span class="p">,</span> <span class="n">k</span> <span class="p">)</span> 
</span></span><span class="line"><span class="cl">  	<span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="o">|</span><span class="n">L</span><span class="o">|</span> <span class="o">+</span> <span class="o">|</span><span class="n">E</span><span class="o">|</span> <span class="p">)</span> <span class="k">return</span> <span class="n">M</span> 
</span></span><span class="line"><span class="cl">  	<span class="k">return</span> <span class="n">linearSelect</span><span class="p">(</span> <span class="n">G</span><span class="p">,</span> <span class="n">k</span> <span class="o">-</span> <span class="o">|</span><span class="n">L</span><span class="o">|</span> <span class="o">-</span> <span class="o">|</span><span class="n">E</span><span class="o">|</span> <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h6 id="in-time-2">In-time</h6>
<p>$T(n)=O(n)\newline$</p>
<h3 id="shellsort">ShellSort</h3>
<blockquote>
<p>Donald L.Shell,1959</p>
</blockquote>
<h4 id="idea-1">Idea</h4>
<p><strong>Think of the whole sequence as a matrix, with each column sorted individually</strong>$\rightarrow(w-sorting)\newline$</p>
<h4 id="step-sequence">step sequence</h4>
<p>An <strong>inverted</strong> sequence of <strong>the width of each matrix</strong></p>
<p>$set(step)={w_1=1,w_2,w_3,&hellip;w_k,&hellip;}\newline$</p>
<blockquote>
<p>diminishing increment</p>
</blockquote>
<h4 id="algorithm">Algorithm</h4>
<p>$Call-by-rank\newline$</p>
<p>$The\ width\ of\ the\ matrix\ is\ w,then\ the\ elements\ in\ the\ i^{th}\ column\ is\ a[i+kw],0\leq k &lt;\frac {n}{w}\newline$</p>
<h6 id="internal-sort-rightarrowinput-sensitive-algorithm">Internal sort $\rightarrow$Input sensitive algorithm</h6>
<p>$\rightarrow insertionsort(The\ running\ time\ depends\ on\ the\ total\ number\ of\ inversions)\newline$</p>
<h6 id="the-biggest-factor"><strong>The biggest factor</strong></h6>
<p>$\rightarrow set(step)={w_1=1,w_2,w_3,&hellip;w_k,&hellip;}\newline$</p>
<h6 id="example">Example</h6>
<p>$set(step)_{shell}={1,2,4,8,&hellip;,2^k,&hellip;}\newline$</p>
<p>worst-case: $O(n\log n)\newline$</p>
<p>best-case: $O(n)\newline$</p>
<h6 id="code-1">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">shellSort</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//0 &lt;= lo &lt; hi &lt;= size &lt;= 2^30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="cm">/*DSA*/</span> <span class="n">printf</span> <span class="p">(</span> <span class="s">&#34;</span><span class="se">\t</span><span class="s">SHELLsort [%3d, %3d)</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">d</span> <span class="o">=</span> <span class="mh">0x3FFFFFFF</span><span class="p">;</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">d</span><span class="p">;</span> <span class="n">d</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span> <span class="p">)</span> <span class="c1">//PS Sequence: { 1, 3, 7, 15, ..., 1073741823 }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="k">for</span> <span class="p">(</span> <span class="n">Rank</span> <span class="n">j</span> <span class="o">=</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">d</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//for each j in [lo+d, hi)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>         <span class="n">T</span> <span class="n">x</span> <span class="o">=</span> <span class="n">_elem</span><span class="p">[</span><span class="n">j</span><span class="p">];</span> <span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">         <span class="k">while</span> <span class="p">(</span> <span class="n">lo</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">_elem</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span> <span class="n">_elem</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">_elem</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">-=</span> <span class="n">d</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">         <span class="n">_elem</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="n">d</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">//insert [j] into its subsequence
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="code-by-pythonuse-numpy">Code by Python(use numpy)</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="selectionsort">SelectionSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">SelectionSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">length</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">minPosition</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">length</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">minPosition</span> <span class="o">=</span> <span class="n">j</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">[</span><span class="n">minPosition</span><span class="p">]</span> <span class="k">else</span> <span class="n">minPosition</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">minPosition</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">minPosition</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">[</span><span class="n">minPosition</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="bubblesort">BubbleSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">BubbleSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">length</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">flag</span> <span class="o">=</span> <span class="kc">True</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span></span><span class="line"><span class="cl">                <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">flag</span> <span class="o">=</span> <span class="kc">False</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">flag</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="mergesort">MergeSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">MergeSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">lo</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">hi</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span> <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="n">mi</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">mi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">mergeSort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">mi</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">merge</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">mi</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">merge</span><span class="p">(</span><span class="n">Arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">low</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">middle</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">high</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="n">B</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">low</span><span class="p">:</span><span class="n">middle</span><span class="p">]</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="n">lb</span><span class="p">,</span> <span class="n">lc</span> <span class="o">=</span> <span class="n">middle</span> <span class="o">-</span> <span class="n">low</span><span class="p">,</span> <span class="n">high</span> <span class="o">-</span> <span class="n">middle</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">lb</span> <span class="ow">and</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">lc</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">middle</span> <span class="o">+</span> <span class="n">k</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">Arr</span><span class="p">[</span><span class="n">low</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">Arr</span><span class="p">[</span><span class="n">low</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">middle</span> <span class="o">+</span> <span class="n">k</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">k</span> <span class="o">=</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">lb</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">Arr</span><span class="p">[</span><span class="n">low</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">B</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="binaryinsertsort">BinaryInsertSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">BinaryInsertSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">Search</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">Val</span><span class="p">,</span> <span class="n">lo</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">hi</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">CountOfCompare</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">mi</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">Val</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">mi</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">hi</span> <span class="o">=</span> <span class="n">mi</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">lo</span> <span class="o">=</span> <span class="n">mi</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">lo</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">Arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">val</span><span class="p">,</span> <span class="n">Rank</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">Length</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">CountOfMove</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">Length</span><span class="p">,</span> <span class="n">Rank</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">Arr</span><span class="p">[</span><span class="n">_</span><span class="p">]</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">_</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">Arr</span><span class="p">[</span><span class="n">Rank</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">val</span>
</span></span><span class="line"><span class="cl">        <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">Local</span> <span class="o">=</span> <span class="n">Search</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">Insert</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">Local</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="insertsort">InsertSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">InsertSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">key</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">key</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">[</span><span class="n">_</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">_</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">[</span><span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></span><span class="line"><span class="cl">        <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="heapsort">HeapSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">HeapSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">length</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">BuildHeap</span><span class="p">(</span><span class="n">Arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">length</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">heapify</span><span class="p">(</span><span class="n">Arr</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">i</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">largest</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">        <span class="n">leftChild</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">rightChild</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">        <span class="n">largest</span> <span class="o">=</span> <span class="n">leftChild</span> <span class="k">if</span> <span class="n">leftChild</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">arr</span><span class="p">[</span><span class="n">largest</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">leftChild</span><span class="p">]</span> <span class="k">else</span> <span class="n">largest</span>
</span></span><span class="line"><span class="cl">        <span class="n">largest</span> <span class="o">=</span> <span class="n">rightChild</span> <span class="k">if</span> <span class="n">rightChild</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="n">arr</span><span class="p">[</span><span class="n">largest</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="n">rightChild</span><span class="p">]</span> <span class="k">else</span> <span class="n">largest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">largest</span> <span class="o">!=</span> <span class="n">i</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">arr</span><span class="p">[</span><span class="n">largest</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">arr</span><span class="p">[</span><span class="n">largest</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span></span><span class="line"><span class="cl">            <span class="n">heapify</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">largest</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">heap_sort</span><span class="p">(</span><span class="n">Array</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">length</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span><span class="line"><span class="cl">        <span class="n">BuildHeap</span><span class="p">(</span><span class="n">Array</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">Array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">Array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">Array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">Array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span></span><span class="line"><span class="cl">            <span class="n">heapify</span><span class="p">(</span><span class="n">Array</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">heap_sort</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="shellsort-1">ShellSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">ShellSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">    <span class="n">inc</span> <span class="o">=</span> <span class="n">n</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">inc</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">inc</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">key</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">i</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="n">inc</span> <span class="ow">and</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">inc</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span> <span class="o">-</span> <span class="n">inc</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">-</span> <span class="n">inc</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span>
</span></span><span class="line"><span class="cl">        <span class="n">inc</span> <span class="o">=</span> <span class="n">inc</span> <span class="o">//</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="quicksort-1">QuickSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">QuickSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">qsort</span><span class="p">(</span><span class="n">arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">lo</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">hi</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">pi</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">qsort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">lo</span><span class="p">,</span> <span class="n">pi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">qsort</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">pi</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">hi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">partition</span><span class="p">(</span><span class="n">Arr</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">,</span> <span class="n">low</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">high</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">nonlocal</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span><span class="line"><span class="cl">        <span class="n">i</span> <span class="o">=</span> <span class="n">low</span> <span class="o">-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">pivot</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">high</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">low</span><span class="p">,</span> <span class="n">high</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="n">Arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">Arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">Arr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span></span><span class="line"><span class="cl">                <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">Arr</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">Arr</span><span class="p">[</span><span class="n">high</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">Arr</span><span class="p">[</span><span class="n">high</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">qsort</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="twoway_insertionsort">TwoWay_InsertionSort</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">TwoWay_InsertionSort</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span><span class="line"><span class="cl">    <span class="n">first</span><span class="p">,</span> <span class="n">final</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">temp</span><span class="p">[</span><span class="n">first</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">first</span> <span class="o">=</span> <span class="p">(</span><span class="n">first</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="p">[</span><span class="n">first</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">temp</span><span class="p">[</span><span class="n">final</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">final</span> <span class="o">=</span> <span class="p">(</span><span class="n">final</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="p">[</span><span class="n">final</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">            <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">final</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="n">temp</span><span class="p">[(</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">                <span class="n">CountOfCompare</span> <span class="o">=</span> <span class="n">CountOfCompare</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">                <span class="n">temp</span><span class="p">[(</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[(</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">                <span class="n">k</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span><span class="p">[(</span><span class="n">k</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">final</span> <span class="o">=</span> <span class="p">(</span><span class="n">final</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">CountOfMove</span> <span class="o">=</span> <span class="n">CountOfMove</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[(</span><span class="n">first</span> <span class="o">+</span> <span class="n">k</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">CountOfCompare</span><span class="p">,</span> <span class="n">CountOfMove</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Searching</title>
    <link>https://Jungle430.github.io/posts/data-structures-and-algorithms/searching/</link>
    <pubDate>Fri, 18 Nov 2022 14:47:32 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/data-structures-and-algorithms/searching/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="searching">Searching</h2>
<h3 id="read-map">Read Map</h3>
<h4 id="static-search-table">Static Search Table</h4>
<blockquote>
<p>Sequential Search</p>
<p>Binary Search</p>
<p>Indexing Search</p>
</blockquote>
<h4 id="binary-search-trees-dynamic-search-table">Binary Search Trees (Dynamic Search Table)</h4>
<blockquote>
<p>Binary search tree</p>
<p>AVL tree</p>
<p>B-Tree</p>
</blockquote>
<h4 id="hash-table">Hash Table</h4>
<blockquote>
<p>What is hashing</p>
<p>Hash Function</p>
<p>Collision Resolution</p>
<p>Closed Hashing</p>
<p>Open Hashing</p>
<p>Analysis of Hashing</p>
</blockquote>
<h3 id="search-table">Search Table</h3>
<h4 id="definition">Definition</h4>
<p>A set of the same type of data elements</p>
<h4 id="key">Key</h4>
<p>The value of <strong>data item</strong> in the data element. It is used to identify the data elements</p>
<blockquote>
<p>Primary Key and Second Key</p>
</blockquote>
<h4 id="searching-1">Searching</h4>
<p>Based on the search value of key find out the element whose key value is same as search value</p>
<p>It <strong>returns the position of the element</strong> located in</p>
<h4 id="operations-on-searching-table">Operations on searching table</h4>
<ol>
<li>
<p>Search a given element in the search table</p>
</li>
<li>
<p>Get attributes of a given element</p>
</li>
<li>
<p>Insert an element into the search table</p>
</li>
<li>
<p>Delete an element from the search table</p>
</li>
</ol>
<h4 id="static-search-table-1">Static Search Table</h4>
<p>Only do search on the search table</p>
<h4 id="dynamic-search-table">Dynamic Search Table</h4>
<p>Need do search and insertion and deletion on the search table</p>
<h3 id="basic-concepts">Basic concepts</h3>
<blockquote>
<p>Given: Distinct keys $k_1 , k_2 , …, k_n$ and collection T of n records of the form $((k_1 , I_1 ), (k_2 , I_2 ), …, (k_n , I_n ))\newline$</p>
<p>where $I_j$ is the information associated with key $k_j\ for\ 1 \leq j \leq n\newline$</p>
</blockquote>
<h4 id="search-problem">Search Problem</h4>
<p>For key value K, locate the record $(k_j , I_j)$ in T such that $k_j = K\newline$</p>
<h4 id="search">Search</h4>
<p>Searching is a systematic method for locating the $record(s)$ with key value $k_j = K\newline$</p>
<h4 id="successful-vs-unsuccessful">Successful vs Unsuccessful</h4>
<p>A <strong>successful</strong> search is one in which a record with key $k_j = K$ is found</p>
<p>An <strong>unsuccessful</strong> search is one in which no record with $k_j = K$ is found (and presumably no such record exists)</p>
<blockquote>
<p>We often ask how many times one key is compared with another during a search.</p>
<p>This gives us a good measure of the total amount of work that the algorithm will do</p>
</blockquote>
<h3 id="approaches-to-search">Approaches to Search</h3>
<ol>
<li>
<p>Sequential and list methods (lists, tables, arrays).</p>
</li>
<li>
<p>Tree indexing methods</p>
</li>
<li>
<p>Direct access by key value (hashing)</p>
</li>
</ol>
<div class="mermaid" id="id-1"></div>
<h3 id="static-search-table-2">Static Search Table</h3>
<h4 id="sequential-search">Sequential Search</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">auto</span> <span class="n">LIST_SIZE</span> <span class="mi">20</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">KeyType</span> <span class="n">key</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">OtherType</span> <span class="n">other_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">ElemType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">ElemType</span> <span class="o">*</span><span class="n">elem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">SSTable</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="general-idea">General Idea</h5>
<p>Begin at one end of the list and scan down it until the desired key is found or the end is reached</p>
<blockquote>
<p>A successful search returns the position of the record</p>
<p>An unsuccessful search returns 0</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">S_search</span><span class="p">(</span><span class="n">SSTable</span> <span class="n">ST</span><span class="p">[],</span> <span class="n">KeyType</span> <span class="n">K</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">ST</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">key</span> <span class="o">=</span> <span class="n">K</span><span class="p">;</span><span class="cm">/*a sentinel,storage the Key Value*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span> <span class="n">ST</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">key</span> <span class="o">!=</span> <span class="n">K</span><span class="p">;</span> <span class="n">i</span> <span class="o">--</span><span class="p">);</span><span class="cm">/*compare backwards*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="n">i</span><span class="p">;</span><span class="cm">/*return the position, or 0*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="analysis">Analysis</h5>
<blockquote>
<p>To analyze the behavior of an algorithm that makes comparisons of keys</p>
<p>we shall use the count of these key comparisons as our measure of the work done</p>
</blockquote>
<h5 id="average-search-lengthasl">Average Search Length(ASL)</h5>
<p>$$
ASL=P_1C_1+P_2C_2+&hellip;+P_nC_n=\sum_{i=1}^nP_iC_i\newline
$$
$Where\ P_i\ is\ probability(frequency)\ of\ search\ i^{th}\ record\newline$
$and\ C_i\ is\ the\ count\ of\ key\ comparisons\ when\ search\ it\newline$</p>
<p>$for\ sequential\ search$
$$
\begin{align}
&amp;success\rightarrow\newline
&amp;best\ case:\ 1\ comparison\newline
&amp;worst\ case:n\ comparisons\newline
&amp;average\ case:ASL_{sq}=\sum^n_{i=1}P_iC_i=\sum^n_{i=1}\frac {1}{n}(n-i+1)=\frac {n+1}{2}\newline\newline
&amp;unsuccessful\ search:\rightarrow n+1\ comparisons\newline
\end{align}
$$</p>
<h4 id="binary-search">Binary Search</h4>
<h5 id="ordered-list">Ordered List</h5>
<p>An ordered list is a list in which each entry contains a key, such that <strong>the keys are in order</strong></p>
<p>That is, if entry $i$ comes before entry $j$ in the list, then the key of entry $i$ is less than or equal to the key of entry $j$ .</p>
<h5 id="idea">Idea</h5>
<p>In searching an ordered list, first compare the target to the key in the center of the list.</p>
<p>If it is <strong>smaller</strong>, restrict the <strong>search to the left half</strong>. <strong>otherwise restrict the search to the right half</strong></p>
<p>and repeat. In this way, <strong>at each step we reduce the length of the list to be searched by half</strong></p>
<p>Initialization: <strong>Set Low=1 and High= Length of List</strong></p>
<p>Repeat the following
$$
\begin{align}
&amp;If\ Low &gt; High, Return\ 0\ to\ indicate\ Item\ not\ found\newline
&amp;mid=\frac{low+high}{2}\newline
&amp;if\ (K&lt;ST[mid])\rightarrow high=mid - 1\newline
&amp;else\ if\ (K&gt;ST[mid])\rightarrow low = mid + 1\newline
&amp;else\ return\ mid\ as\ location\ of\ the\ target\newline
\end{align}
$$</p>
<h5 id="code">code</h5>
<p>URL $\rightarrow$ <a href="https://zhuanlan.zhihu.com/p/565438258" target="_blank" rel="noopener noreffer">https://zhuanlan.zhihu.com/p/565438258</a></p>
<p>$Three\ editions:\ 《Data\ Structure》\ from\ Tsinghua\ University\ -\ Deng\ Junhui\newline$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/******************************************************************************************
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Data Structures in C++
</span></span></span><span class="line"><span class="cl"><span class="cm"> * ISBN: 7-302-33064-6 &amp; 7-302-33065-3 &amp; 7-302-29652-2 &amp; 7-302-26883-3
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Junhui DENG, deng@tsinghua.edu.cn
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Computer Science &amp; Technology, Tsinghua University
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Copyright (c) 2003-2021. All rights reserved.
</span></span></span><span class="line"><span class="cl"><span class="cm"> ******************************************************************************************/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//[lo, hi) and 0 &lt;= lo &lt;= hi &lt;= _size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">static</span> <span class="n">Rank</span> <span class="n">binSearch</span> <span class="p">(</span> <span class="n">T</span><span class="o">*</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">while</span> <span class="p">(</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">      <span class="n">Rank</span> <span class="n">mi</span> <span class="o">=</span> <span class="p">(</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="k">if</span>      <span class="p">(</span> <span class="n">e</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span> <span class="p">)</span> <span class="n">hi</span> <span class="o">=</span> <span class="n">mi</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span> <span class="n">S</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">e</span> <span class="p">)</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">mi</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="k">else</span>                  <span class="k">return</span> <span class="n">mi</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="p">}</span> 
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/******************************************************************************************
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Data Structures in C++
</span></span></span><span class="line"><span class="cl"><span class="cm"> * ISBN: 7-302-33064-6 &amp; 7-302-33065-3 &amp; 7-302-29652-2 &amp; 7-302-26883-3
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Junhui DENG, deng@tsinghua.edu.cn
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Computer Science &amp; Technology, Tsinghua University
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Copyright (c) 2003-2021. All rights reserved.
</span></span></span><span class="line"><span class="cl"><span class="cm"> ******************************************************************************************/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//[lo, hi) and 0 &lt;= lo &lt; hi &lt;= _size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">static</span> <span class="n">Rank</span> <span class="n">binSearch</span> <span class="p">(</span> <span class="n">T</span><span class="o">*</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">hi</span> <span class="o">-</span> <span class="n">lo</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Rank</span> <span class="n">mi</span> <span class="o">=</span> <span class="p">(</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span> <span class="n">e</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span> <span class="p">)</span> <span class="o">?</span> <span class="n">hi</span> <span class="o">=</span> <span class="nl">mi</span> <span class="p">:</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">mi</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">}</span> 
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">e</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">[</span><span class="n">lo</span><span class="p">]</span> <span class="o">?</span> <span class="n">lo</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">lo</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/******************************************************************************************
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Data Structures in C++
</span></span></span><span class="line"><span class="cl"><span class="cm"> * ISBN: 7-302-33064-6 &amp; 7-302-33065-3 &amp; 7-302-29652-2 &amp; 7-302-26883-3
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Junhui DENG, deng@tsinghua.edu.cn
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Computer Science &amp; Technology, Tsinghua University
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Copyright (c) 2003-2021. All rights reserved.
</span></span></span><span class="line"><span class="cl"><span class="cm"> ******************************************************************************************/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//[lo, hi) and 0 &lt;= lo &lt;= hi &lt;= _size
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">static</span> <span class="n">Rank</span> <span class="n">binSearch</span> <span class="p">(</span> <span class="n">T</span><span class="o">*</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">lo</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">while</span> <span class="p">(</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">Rank</span> <span class="n">mi</span> <span class="o">=</span> <span class="p">(</span> <span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span> <span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">      <span class="p">(</span> <span class="n">e</span> <span class="o">&lt;</span> <span class="n">S</span><span class="p">[</span><span class="n">mi</span><span class="p">]</span> <span class="p">)</span> <span class="o">?</span> <span class="n">hi</span> <span class="o">=</span> <span class="nl">mi</span> <span class="p">:</span> <span class="n">lo</span> <span class="o">=</span> <span class="n">mi</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">lo</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="analysis-1">Analysis</h5>
<p>$$
\begin{align}
&amp;T(n)=T(\frac{n}{2})+O(1)\newline
&amp;T(n)=T(\frac{n}{2})+O(1)=T(\frac{n}{4})+O(2)=T(\frac{n}{8})+O(3)=&hellip;=O(\log n)\newline
\end{align}
$$</p>
<h5 id="decision-tree">Decision Tree</h5>
<h6 id="definition-1">definition</h6>
<blockquote>
<p>The decision tree (also called comparison tree or search tree) of an algorithm is obtained by tracing the action of binary search algorithm, representing each comparison of keys by a node of the tree (which we draw as a circle)</p>
</blockquote>
<p>Branches (lines) drawn down from the circle represent the possible outcomes of the comparison. When the algorithm terminates, we put either F (for failure) or the location where the target is found at the end of the appropriate branch, and draw as a square</p>
<h6 id="example">Example</h6>
<p>$$
array:[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\newline
$$</p>
<div class="mermaid" id="id-2"></div>
<h6 id="analysis-by-decision-tree">Analysis by decision tree</h6>
<p>$$
\begin{align}
&amp;The\ best\ case:1\ comparison\newline
&amp;The\ worst\ case:the\ depth\ of\ a\ decision\ tree\ h\newline
&amp;The\ depth\ of\ a\ decision\ tree\rightarrow h=\lfloor \log_2n \rfloor+1\newline
&amp;O(\log_2 n)\newline
&amp;Average\ case(ASL): O(\log_2 n)\newline
&amp;ASL_{bn}=\sum^n_{i=1}P_iC_i=\frac {1}{n}[1 * 2^0 + 2 * 2^1 + 3 * 2^2 + &hellip; + h * 2^{h-1}]\newline
&amp;=\frac {n+1}{n}\log_2(n+1)-1 \approx \log_2(n+1)-1=O(log_2 n)\newline
\end{align}
$$</p>
<h4 id="indexing-search">Indexing Search</h4>
<h5 id="data-structure-1">Data Structure</h5>
<p>Divided a search list R[n] into b sublist.</p>
<p><strong>Each sublist may not be ordered by key</strong>, but <strong>the maximal key in the front sublist must be lower than the minimal key in the next successor list</strong></p>
<p>An indexing table ID[b]. ID[i] stores the maximal key in i-th list. ID[b] is an ordered list</p>
<h5 id="idea-1">Idea</h5>
<ol>
<li>Search in ID[b] to determine the possible sublist <strong>(Sequential search or binary search can be used)</strong></li>
<li>Search in R[n] <strong>(Only sequential search can be used)</strong></li>
</ol>
<h5 id="analysis-2">Analysis</h5>
<p>$ASL=ASL_{Index\ table}+ASL_{Sublist}\newline$</p>
<p>For search list of length n, it is divided into b sublist and the length of a sublist is $s = \frac {n}{b}\newline$</p>
<blockquote>
<p>If using binary search in indexing table, the Average Search Length will be $log_2 (1 + \frac {n+1}{s})-1 + \frac {s + 1}{2}\newline$</p>
</blockquote>
<blockquote>
<p>If using sequential search in indexing table, the Average Search Length will be $\frac {b+1}{2} + \frac {s+1}{2} = \frac {s^2 + 2s + n}{2s}\newline$</p>
</blockquote>
<p>For list of length 10000,</p>
<p>Sequential search: $ASL=\frac {n+1}{2}=5000\newline$</p>
<p>Indexing search (s=100):</p>
<p>$ASL= log_2 (b+1)-1+ \frac {S+1}{2} &lt;57\newline$</p>
<p>$or ASL= \frac {b+1}{2} + \frac {S+1}{2} = 101\newline$</p>
<p>Binary search: $ASL=log_2 (n+1)-1 &lt; 14\newline$</p>
<h4 id="summary-and-comparison">Summary and Comparison</h4>
<table>
<thead>
<tr>
<th></th>
<th>Sequential Search</th>
<th>Binary Search</th>
<th>Indexing Search</th>
</tr>
</thead>
<tbody>
<tr>
<td>ASL</td>
<td>Largest</td>
<td>Smallest</td>
<td>Middle</td>
</tr>
<tr>
<td>List Structure</td>
<td>Ordered Unordered</td>
<td>Ordered</td>
<td>Ordered indexing table</td>
</tr>
<tr>
<td>Storage Structure</td>
<td>Array or Linked List</td>
<td>Array</td>
<td>Array or Linked List</td>
</tr>
</tbody>
</table>
<h3 id="binary-search-trees-dynamic-search-table-1">Binary Search Trees (Dynamic search table)</h3>
<h4 id="binary-search-tree">Binary Search Tree</h4>
<h5 id="definition-2">Definition</h5>
<p>Binary Search Tree (BST) is a binary tree in which</p>
<ol>
<li>
<p>Every element has a unique key.</p>
</li>
<li>
<p>The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.</p>
</li>
<li>
<p>The left and right subtrees are also Binary Search Trees.</p>
</li>
</ol>
<p>Note that this tree is <strong>ordered</strong>!</p>
<ol>
<li>
<p>Each element to the <strong>left</strong> of the root is <strong>less than the root</strong></p>
</li>
<li>
<p>Each element to the <strong>right</strong> of the root is <strong>greater than the root</strong></p>
</li>
</ol>
<h5 id="example-1">Example</h5>
<div class="mermaid" id="id-3"></div>
<h5 id="search-path">Search path</h5>
<p>$Search\ path\ is\ a\ path\ from\ root\ to\ a\ node.\ The\ number\ of\ comparisons\ is\ the\ level\ of\ the\ node.\newline$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">BiTree</span> <span class="nf">SearchBST</span> <span class="p">(</span><span class="n">BiTree</span> <span class="n">T</span> <span class="p">,</span> <span class="n">keytype</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// T is the root of the binary search tree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">T</span> <span class="o">||</span> <span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">key</span> <span class="o">==</span> <span class="n">k</span><span class="p">))</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">T</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="n">SearchBST</span> <span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span> <span class="c1">//Searching in left subtree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">SearchBST</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">		<span class="c1">//Searching in right subtree
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>The searching efficiency is affected by the shape of Binary Search Tree</p>
</blockquote>
<p>The worst case(one node per level, binary search degenerates to sequential search):$ASL=\frac {n+1}{2}\newline$</p>
<p>The best case (n nodes should have $\lfloor \log_2n\rfloor +1$ levels) :$ASL=\log_2 (n+1)-1\newline$</p>
<h5 id="insertion-into-bst">Insertion into BST</h5>
<p>When search is <strong>not successful</strong>, the new data is inserted into BST</p>
<p><strong>The new node must be a leaf of BST,</strong> and it is inserted into the position of searching fault</p>
<figure><a class="lightgallery" href="/img/CreateBST.png" title="/img/CreateBST.png" data-thumbnail="/img/CreateBST.png" data-sub-html="<h2>case1(image1)</h2>">
        
    </a><figcaption class="image-caption">case1(<code>image1</code>)</figcaption>
    </figure>
<h5 id="deletion-from-bst">Deletion from BST</h5>
<ol>
<li>
<p>The deleted node is a leaf node &ndash; delete node, reset link from parent to Null</p>
</li>
<li>
<p>The deleted node with 1 child &ndash; delete node, reset link from parent to point to child</p>
</li>
<li>
<p>The deleted node with 2 children</p>
<blockquote>
<p>Let left subtree of P as left subtree of F;</p>
<p>Or Replace node with inorder predecessor (successor) S</p>
<p>Delete S (which has 0 or 1 child)</p>
</blockquote>
</li>
</ol>
<figure><a class="lightgallery" href="/img/DeletionFromBST1.png" title="/img/DeletionFromBST1.png" data-thumbnail="/img/DeletionFromBST1.png" data-sub-html="<h2>case1 (image1)</h2>">
        
    </a><figcaption class="image-caption">case1 (<code>image1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/DelectionFromBST2.png" title="/img/DelectionFromBST2.png" data-thumbnail="/img/DelectionFromBST2.png" data-sub-html="<h2>case2 (image2)</h2>">
        
    </a><figcaption class="image-caption">case2 (<code>image2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/DelectFromBST3.png" title="/img/DelectFromBST3.png" data-thumbnail="/img/DelectFromBST3.png" data-sub-html="<h2>case3 (image3)</h2>">
        
    </a><figcaption class="image-caption">case3 (<code>image3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/DelectFromBST4.png" title="/img/DelectFromBST4.png" data-thumbnail="/img/DelectFromBST4.png" data-sub-html="<h2>case4 (image4)</h2>">
        
    </a><figcaption class="image-caption">case4 (<code>image4</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/DelectFromBST5.png" title="/img/DelectFromBST5.png" data-thumbnail="/img/DelectFromBST5.png" data-sub-html="<h2>case5 (image5)</h2>">
        
    </a><figcaption class="image-caption">case5 (<code>image5</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">DeleteBST</span> <span class="p">(</span><span class="n">BiTree</span> <span class="o">&amp;</span><span class="n">T</span> <span class="p">,</span> <span class="n">keytype</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// If there is an element whose key-word EQ key, delete the element, then return true
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//otherwise return false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">T</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">//The key does not exist
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span><span class="n">EQ</span><span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">.</span><span class="n">key</span><span class="p">))</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">Delete</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> 
</span></span><span class="line"><span class="cl">	<span class="c1">//Find out the element whose keywork is key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">LT</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">.</span><span class="n">key</span><span class="p">))</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">DeleteBST</span><span class="p">(</span><span class="n">T</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">,</span><span class="n">key</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">	<span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">DeleteBST</span><span class="p">(</span> <span class="n">T</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">,</span> <span class="n">key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">//DeleteBST
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Delete</span> <span class="p">(</span><span class="n">BiTree</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// Delete node p from BST, and reconnect its right/left child node 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">		<span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">q</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span><span class="p">{</span> 
</span></span><span class="line"><span class="cl">		<span class="n">q</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">s</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">		<span class="k">while</span> <span class="p">(</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">            <span class="n">q</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">rchild</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="c1">//s is the predecessor of the node p 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span><span class="n">q</span> <span class="o">!=</span> <span class="n">p</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">            <span class="n">q</span><span class="o">-&gt;</span><span class="n">rchild</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">;</span> <span class="c1">//connect the right subtree of q
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">else</span> 
</span></span><span class="line"><span class="cl">            <span class="n">q</span><span class="o">-&gt;</span><span class="n">lchild</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">lchild</span><span class="p">;</span> <span class="c1">//connect the left subtree of q
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="n">free</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">//Delete
</span></span></span></code></pre></td></tr></table>
</div>
</div><figure><a class="lightgallery" href="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_02.png" title="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_02.png" data-thumbnail="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_02.png" data-sub-html="<h2>case1(image1)</h2>">
        
    </a><figcaption class="image-caption">case1(<code>image1</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_03.png" title="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_03.png" data-thumbnail="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_03.png" data-sub-html="<h2>case2(image2)</h2>">
        
    </a><figcaption class="image-caption">case2(<code>image2</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_04.png" title="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_04.png" data-thumbnail="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_04.png" data-sub-html="<h2>case3(image3)</h2>">
        
    </a><figcaption class="image-caption">case3(<code>image3</code>)</figcaption>
    </figure>
<figure><a class="lightgallery" href="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_05.png" title="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_05.png" data-thumbnail="/img/06.BST.B3.algorithm.remove/06.BST.B3.algorithm.remove_05.png" data-sub-html="<h2>case4(image4)</h2>">
        
    </a><figcaption class="image-caption">case4(<code>image4</code>)</figcaption>
    </figure>
<h4 id="avl-tree">AVL Tree</h4>
<h5 id="tree-balancing">Tree Balancing</h5>
<p><strong>Binary Search Trees(BST) are designed for fast searching!</strong></p>
<blockquote>
<p>But the order of insertion into a BST determines the shape of the tree and hence the efficiency with which tree can be searched.</p>
</blockquote>
<blockquote>
<p>If it grows so that the tree is <strong>as “fat” as possible</strong> (fewest levels) then it can be <strong>searched most</strong> <strong>efficiently</strong>. If the tree grows “lopsided”, with many more items in one subtree than another, then the search efficiency will degrade.</p>
</blockquote>
<h6 id="for-avldifferent-in-bst">For AVL(different in BST)</h6>
<p>An AVL tree is a binary tree that is <strong>height balanced</strong></p>
<p>$\rightarrow The\ difference\ in\ height\ between\ the\ left\ and\ right\ subtrees\ at\ any\ point\ in\ the\ tree\ is\ restricted\newline$</p>
<h5 id="balance-factor">Balance Factor</h5>
<h6 id="definition-3">Definition</h6>
<p>The balance factor of node x to be the height of x’s left subtree minus the height of its right subtree.</p>
<p>$balFac(v)=height(lc(v))-height(rc(v))\newline$</p>
<p>An AVL tree is a BST in which <strong>the balance factor of each node is 0, -1, or 1</strong></p>
<p>Example</p>
<figure><a class="lightgallery" href="/img/Sample%20Trees.png" title="/img/Sample Trees.png" data-thumbnail="/img/Sample Trees.png" data-sub-html="<h2>case1(image1)</h2>">
        
    </a><figcaption class="image-caption">case1(<code>image1</code>)</figcaption>
    </figure>
<h5 id="insert">insert</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">AVL</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">insert</span><span class="p">(</span> <span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span> <span class="n">e</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span> <span class="n">e</span> <span class="p">);</span> <span class="k">if</span> <span class="p">(</span> <span class="n">x</span> <span class="p">)</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span> <span class="c1">//若目标尚不存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">xx</span> <span class="o">=</span> <span class="n">x</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BinNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span> <span class="n">e</span><span class="p">,</span> <span class="n">_hot</span> <span class="p">);</span> <span class="n">_size</span><span class="o">++</span><span class="p">;</span> <span class="c1">//则创建新节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 此时，若x的父亲_hot增高，则祖父有可能失衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">_hot</span><span class="p">;</span> <span class="n">g</span><span class="p">;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="p">)</span> <span class="c1">//从_hot起，逐层检查各代祖先g
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="n">AvlBalanced</span><span class="p">(</span> <span class="o">*</span><span class="n">g</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//一旦发现g失衡，则通过调整恢复平衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">FromParentTo</span><span class="p">(</span><span class="o">*</span><span class="n">g</span><span class="p">)</span> <span class="o">=</span> <span class="n">rotateAt</span><span class="p">(</span> <span class="n">tallerChild</span><span class="p">(</span> <span class="n">tallerChild</span><span class="p">(</span> <span class="n">g</span> <span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span><span class="p">;</span> <span class="c1">//局部子树复衡后，高度必然复原；其祖先亦必如此，故调整结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="c1">//否则（g仍平衡）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">updateHeight</span><span class="p">(</span> <span class="n">g</span> <span class="p">);</span> <span class="c1">//只需更新其高度（注意：即便g未失衡，高度亦可能增加）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">xx</span><span class="p">;</span> <span class="c1">//返回新节点位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="remove">remove</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">bool</span> <span class="n">AVL</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">remove</span><span class="p">(</span> <span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span> <span class="n">e</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">x</span> <span class="o">=</span> <span class="n">search</span><span class="p">(</span> <span class="n">e</span> <span class="p">);</span> <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">x</span> <span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">//若目标的确存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">removeAt</span><span class="p">(</span> <span class="n">x</span><span class="p">,</span> <span class="n">_hot</span> <span class="p">);</span> <span class="n">_size</span><span class="o">--</span><span class="p">;</span> <span class="c1">//则在按BST规则删除之后，_hot及祖先均有可能失衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 以下，从_hot出发逐层向上，依次检查各代祖先g
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span> <span class="p">(</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">_hot</span><span class="p">;</span> <span class="n">g</span><span class="p">;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span> <span class="o">!</span> <span class="n">AvlBalanced</span><span class="p">(</span> <span class="o">*</span><span class="n">g</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">//一旦发现g失衡，则通过调整恢复平衡
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">g</span> <span class="o">=</span> <span class="n">FromParentTo</span><span class="p">(</span> <span class="o">*</span><span class="n">g</span> <span class="p">)</span> <span class="o">=</span> <span class="n">rotateAt</span><span class="p">(</span> <span class="n">tallerChild</span><span class="p">(</span> <span class="n">tallerChild</span><span class="p">(</span> <span class="n">g</span> <span class="p">)</span> <span class="p">)</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">updateHeight</span><span class="p">(</span> <span class="n">g</span> <span class="p">);</span> <span class="c1">//更新高度（注意：即便g未曾失衡或已恢复平衡，高度均可能降低）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span> <span class="c1">//可能需做过(logn)次调整；无论是否做过调整，全树高度均可能下降
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nb">true</span><span class="p">;</span> <span class="c1">//删除成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="refactoring-34">refactoring-&gt;”3+4”</h5>
<figure><a class="lightgallery" href="/img/3&#43;4.png" title="/img/3&#43;4.png" data-thumbnail="/img/3&#43;4.png" data-sub-html="<h2>case1(image1)</h2>">
        
    </a><figcaption class="image-caption">case1(<code>image1</code>)</figcaption>
    </figure>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="n">BST</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">connect34</span><span class="p">(</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">b</span><span class="p">,</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">c</span><span class="p">,</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T0</span><span class="p">,</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T1</span><span class="p">,</span><span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T2</span><span class="p">,</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T3</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">-&gt;</span><span class="n">lc</span> <span class="o">=</span> <span class="n">T0</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="n">T0</span><span class="p">)</span> <span class="n">T0</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">-&gt;</span><span class="n">rc</span> <span class="o">=</span> <span class="n">T1</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="n">T1</span><span class="p">)</span> <span class="n">T1</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span><span class="o">-&gt;</span><span class="n">lc</span> <span class="o">=</span> <span class="n">T2</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="n">T2</span><span class="p">)</span> <span class="n">T2</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span><span class="o">-&gt;</span><span class="n">rc</span> <span class="o">=</span> <span class="n">T3</span><span class="p">;</span> <span class="k">if</span> <span class="p">(</span><span class="n">T3</span><span class="p">)</span> <span class="n">T3</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">-&gt;</span><span class="n">lc</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">rc</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">updateHeight</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="n">updateHeight</span><span class="p">(</span><span class="n">c</span><span class="p">);</span> <span class="n">updateHeight</span><span class="p">(</span><span class="n">b</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">removeAt</span> <span class="p">(</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">x</span><span class="p">,</span> <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span> <span class="n">hot</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">w</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="c1">//实际被摘除的节点，初值同x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">succ</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="c1">//实际被删除节点的接替者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">HasLChild</span> <span class="p">(</span> <span class="o">*</span><span class="n">x</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">//若*x的左子树为空，则可
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">succ</span> <span class="o">=</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">;</span> <span class="c1">//直接将*x替换为其右子树
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">HasRChild</span> <span class="p">(</span> <span class="o">*</span><span class="n">x</span> <span class="p">)</span> <span class="p">)</span> <span class="c1">//若右子树为空，则可
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">succ</span> <span class="o">=</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">lc</span><span class="p">;</span> <span class="c1">//对称地处理——注意：此时succ != NULL
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">else</span> <span class="p">{</span> <span class="c1">//若左右子树均存在，则选择x的直接后继作为实际被摘除节点，为此需要
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">w</span> <span class="o">=</span> <span class="n">w</span><span class="o">-&gt;</span><span class="n">succ</span><span class="p">();</span> <span class="c1">//（在右子树中）找到*x的直接后继*w
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">swap</span> <span class="p">(</span> <span class="n">x</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">,</span> <span class="n">w</span><span class="o">-&gt;</span><span class="n">data</span> <span class="p">);</span> <span class="c1">//交换*x和*w的数据元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="n">BinNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">u</span> <span class="o">=</span> <span class="n">w</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">(</span> <span class="p">(</span> <span class="n">u</span> <span class="o">==</span> <span class="n">x</span> <span class="p">)</span> <span class="o">?</span> <span class="n">u</span><span class="o">-&gt;</span><span class="nl">rc</span> <span class="p">:</span> <span class="n">u</span><span class="o">-&gt;</span><span class="n">lc</span> <span class="p">)</span> <span class="o">=</span> <span class="n">succ</span> <span class="o">=</span> <span class="n">w</span><span class="o">-&gt;</span><span class="n">rc</span><span class="p">;</span> <span class="c1">//隔离节点*w
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="n">hot</span> <span class="o">=</span> <span class="n">w</span><span class="o">-&gt;</span><span class="n">parent</span><span class="p">;</span> <span class="c1">//记录实际被删除节点的父亲
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">if</span> <span class="p">(</span> <span class="n">succ</span> <span class="p">)</span> <span class="n">succ</span><span class="o">-&gt;</span><span class="n">parent</span> <span class="o">=</span> <span class="n">hot</span><span class="p">;</span> <span class="c1">//并将被删除节点的接替者与hot相联
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="n">release</span> <span class="p">(</span> <span class="n">w</span><span class="o">-&gt;</span><span class="n">data</span> <span class="p">);</span> <span class="n">release</span> <span class="p">(</span> <span class="n">w</span> <span class="p">);</span> <span class="k">return</span> <span class="n">succ</span><span class="p">;</span> <span class="c1">//释放被摘除节点，返回接替者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="c1">//release()负责释放复杂结构，与算法无直接关系，具体实现详见代码包
</span></span></span></code></pre></td></tr></table>
</div>
</div><h5 id="summary">summary</h5>
<figure><a class="lightgallery" href="/img/AVL_summary.png" title="/img/AVL_summary.png" data-thumbnail="/img/AVL_summary.png" data-sub-html="<h2>case1(image1)</h2>">
        
    </a><figcaption class="image-caption">case1(<code>image1</code>)</figcaption>
    </figure>
<h4 id="b-tree">B-Tree</h4>
<p>Goals of Indexing</p>
<ol>
<li>
<p>Store large files</p>
</li>
<li>
<p>Support multiple search keys</p>
</li>
<li>
<p>Support efficient insert, delete, and range queries</p>
</li>
</ol>
<p>Difficulties when storing tree index on disk</p>
<ol>
<li>Tree must be balanced</li>
<li>Each path from root to leaf should cover few disk pages</li>
</ol>
<p>The B-Tree is now the standard file organization for applications requiring insertion, deletion, and key range searches</p>
<h5 id="definition-4">Definition</h5>
<p>B-Tree of order <strong>m</strong> has these properties</p>
<ol>
<li>
<p>The <strong>root</strong> is either a leaf or has at least two children</p>
</li>
<li>
<p>Each node, except for the root and the leaves, has between $\lceil \frac {m}{2} \rceil and\ m$ children</p>
</li>
<li>
<p><strong>The number of Keys in each node</strong>(except for the root) <strong>is</strong> between $\lceil \frac {m}{2} \rceil-1\ and\ m-1\newline$</p>
</li>
<li>
<p>All leaves are at the same level in the tree, so <strong>the tree is always height balanced</strong></p>
</li>
</ol>
<p>Example</p>
<p>$B-Tree\ m=5\newline$</p>
<figure><a class="lightgallery" href="/img/B-Tree%20For%20m%20equal%205.png" title="/img/B-Tree For m equal 5.png" data-thumbnail="/img/B-Tree For m equal 5.png" data-sub-html="<h2>case1(image1)</h2>">
        
    </a><figcaption class="image-caption">case1(<code>image1</code>)</figcaption>
    </figure>
<h5 id="application">Application</h5>
<p>B-Tree node is usually selected to <strong>match the size of a disk block</strong></p>
<h5 id="b-tree-search">B-Tree Search</h5>
<p>Search in a B-Tree is similar with search in BST</p>
<ol>
<li>
<p>Search keys in current node. If search key is found, then return record. If current node is a leaf node and key is not found, then report unsuccessful</p>
</li>
<li>
<p>Otherwise, follow the proper branch and repeat the process</p>
</li>
</ol>
<h5 id="b-tree-insertion">B-Tree Insertion</h5>
<p>To insert value X into a B-tree, there are 3 steps</p>
<ol>
<li>
<p>using the SEARCH procedure for M-way trees (described above) find the leaf node to which X should be added</p>
</li>
<li>
<p>add X to this node in the appropriate place among the values already there. Being a leaf node there are no subtrees to worry about</p>
</li>
<li>
<p>if there are M-1 or fewer values in the node after adding X,then we are finished. If there are M values after adding X, we say the node has <strong>overflowed</strong>.</p>
<p>To repair this, we <strong>split the node</strong> into three parts:</p>
<ol>
<li>
<p>Left: the first $\frac {M-1}{2}$ values</p>
</li>
<li>
<p>Middle: the middle value $(position\ 1+(\frac {M-1}{2}))\newline$</p>
</li>
<li>
<p>Right: the last $\frac {M-1}{2}$ values</p>
</li>
</ol>
</li>
</ol>
<h5 id="b-tree-deletion">B-Tree Deletion</h5>
<ol>
<li>
<p>How many values might there be in this combined node?</p>
</li>
<li>
<p>The parent node contributes 1 value</p>
</li>
<li>
<p>The node that underflowed contributes exactly $\frac {M-1}{2}-1$ values</p>
</li>
<li>
<p>The neighboring node contributes somewhere between $\frac {M-1}{2}\ and\ M-1$ values</p>
</li>
</ol>
<h6 id="case-1">case 1</h6>
<p>Suppose that the neighboring node contains more than (M-1)/2 values. In this case, the total number of values in the combined node is strictly greater than 1 + ((M-1)/2 - 1) + ((M-1)/2)</p>
<h6 id="case-2">case 2</h6>
<p>Suppose, on the other hand, that the neighboring node contains exactly (M-1)/2 values. Then the total number of values in the combined node is 1 + ((M-1)/2 - 1) + ((M-1)/2) = (M-1)。</p>
<h3 id="hash-table-1">Hash Table</h3>
<h4 id="what-is-hashing">What is hashing</h4>
<p>$Linear\ Search\ \rightarrow O(n)\newline$</p>
<p>$Binary\ Search\rightarrow O(\log_2n)\newline$</p>
<ol>
<li>
<p>Both depend on comparisons of item sought and elements in container</p>
</li>
<li>
<p>Hash tables place data so that the location of an item is determined directly as a function of the item itself</p>
</li>
<li>
<p>With a good hash function, searching a hash table takes O(1) time. that is, it is a constant and does not depend on the number of items stored.</p>
</li>
</ol>
<p>$Address(a_i)=Hash(a_i.key)\newline$</p>
<p>Here</p>
<p>$a_i\ is\ an\ element\newline$</p>
<p>$Address(a_i)\ stores\ the\ address\ of\ a_i\newline$</p>
<p>$a_i.key\ is\ the\ key\ of\ a_i\ element\newline$</p>
<div class="mermaid" id="id-4"></div>
<h4 id="general-idea-1">General Idea</h4>
<p>One problem with hash tables is collisions:</p>
<p>$\rightarrow $when more than one item map to the same location in the hash table</p>
<p>$\downarrow \newline$</p>
<p>$\rightarrow $Some strategy is needed to resolve such collisions</p>
<p>The <strong>hash function</strong> and <strong>data set</strong> determine the <strong>number of collisions</strong></p>
<p>The <strong>strategy</strong> used to handle collisions affect <strong>the performance of searching for an arbitrary item</strong></p>
<h4 id="hash-function">Hash Function</h4>
<p>Hashing: The process of mapping a key value to a position in a table</p>
<p>​	A hash function maps key values to positions in the hash table. It is denoted by <strong>h</strong>.</p>
<p>​	A hash table is an array that holds the records. It is denoted by <strong>HT</strong></p>
<p>​	<strong>HT</strong> has <em>m</em> slots, indexed from <em>0</em> to m-1</p>
<p>For any value <em>K</em> in the key range and hash function <strong>h</strong>, <strong>h</strong>(<em>K</em>)=<em>i</em>, 0&lt;=<em>i</em> &lt;<em>m</em>, such that <strong>HT</strong>[i].key = <em>K</em></p>
<h5 id="choosing-a-hash-function">Choosing a Hash Function</h5>
<ol>
<li>
<p>A hash function should be EASY and QUICK to compute</p>
</li>
<li>
<p>A hash function MUST return a value within the hash table range</p>
</li>
<li>
<p>To be practical, a hash function SHOULD evenly distribute the records stored among the hash table slots</p>
</li>
<li>
<p>Ideally, the hash function should distribute records with equal probability to all hash table slots. In practice, success depends on distribution of actual records stored</p>
</li>
<li>
<p>If we know nothing about the incoming key distribution, evenly distribute the key range over the hash table slots while avoiding obvious opportunities for clustering</p>
</li>
</ol>
<h5 id="example-2">Example</h5>
<ol>
<li>
<p>$Hash(key)=a * key+b\ [a, b\ are\ constants]\newline$</p>
</li>
<li>
<p><strong>Digital Analysis</strong> <strong>:</strong> All the keys are known in advance. Select <em>m</em> digits from <em>n</em></p>
</li>
</ol>
<blockquote>
<p>Criterion: Delete the digits having the most skewed distributions</p>
</blockquote>
<ol start="3">
<li>$Hash(key)=key$ % $p\ p \leq m\newline$</li>
</ol>
<blockquote>
<p><strong>Modular arithmetic:</strong> We may convert the key to an integer, divide by the size of the index range, and take the remainder as the result</p>
<p>Assuming the address range is 0 to m - 1, let p is a prime which is less than/equal m  We can map the keys into addresses with the Hash function</p>
</blockquote>
<ol start="4">
<li>
<p>Mid-square method: Square the key value, take the middle r bits from the result for a hash table of $2^r$ slots</p>
</li>
<li>
<p>$Hash(key)=\lfloor n * (A * key $ % $1)\rfloor \rightarrow A * key $%$ 1 = A * key - \lfloor A * key\rfloor\newline$</p>
</li>
<li>
<p>Folding</p>
</li>
</ol>
<blockquote>
<p>Partition the key into several parts</p>
<p>All parts except for the last one have the same length</p>
<p>Combine the parts in a convenient way to obtain the hash address</p>
<p>Two possibilities:</p>
<blockquote>
<p>Shift folding</p>
<p>Folding at the boundaries</p>
</blockquote>
</blockquote>
<h4 id="collisions">Collisions</h4>
<p>Given: hash function <strong>h</strong> with keys $k_1$ and $k_2$ .$\beta$ is a slot in the hash table</p>
<p>$If\ h(k_1 ) = \beta = h(k_2), then\ k_1\ and\ k_2\ have\ a\ collision\ at\ \beta\ under\ h\newline$</p>
<p>Collisions are <strong>inevitable</strong> in most applications</p>
<p>To use hashing we must</p>
<ol>
<li>
<p>find good hash functions</p>
</li>
<li>
<p>determine how to resolve collisions</p>
</li>
</ol>
<p>Store or search for the record with key K</p>
<ol>
<li>
<p>Compute the table location h(K)</p>
</li>
<li>
<p>Starting with slot <strong>h</strong>(<em>K</em>), locate the record containing key <em>K</em> using (if necessary) a collision resolution policy</p>
</li>
</ol>
<h5 id="collision-resolution">Collision Resolution</h5>
<p>Collisions are inevitable in most applications, so some strategies are needed to resolve such collisions</p>
<ol>
<li>
<p>Need to be able to place an element when its mapped location is full</p>
</li>
<li>
<p>Need to be able to retrieve the element when it&rsquo;s not placed directly according to the hash function</p>
</li>
</ol>
<p>The goal of collision resolution is to find a free slot in the HT. The new slot is found by a collision resolution policy</p>
<p>Search must follow the same policy to find records not in their home slots</p>
<h5 id="closed-hashing">Closed hashing</h5>
<p>If a collision occurs, alternative slots are tried until an empty slot is found</p>
<p>Probe sequence : The series of slots visited during insert/search by following a collision resolution policy</p>
<p>Open Addressing</p>
<ol>
<li>
<p>Linear Probing</p>
</li>
<li>
<p>Quadratic Probing</p>
</li>
<li>
<p>Random Probing</p>
</li>
</ol>
<p>Rehashing</p>
<h6 id="linear-probing">Linear Probing</h6>
<p>Linear probing starts with the hash address and searches <strong>sequentially</strong> for the target key or an empty position.</p>
<p><strong>The array should be considered circular</strong></p>
<p>So that when the last location is reached, the search proceeds to the first location of the array</p>
<p>$H_i=(Hash(key)+d_i)\ mod\ m\ (1 \leq i &lt;m)\newline$</p>
<p>where: Hash (key) is hash function</p>
<p>m is the length of hash table</p>
<p>Probe sequence $d_i$ is 1,2,……,m-1 and $d_i = i\newline$</p>
<p>Problem</p>
<p><strong>Keys tend to cluster together</strong></p>
<blockquote>
<p>Records tend to cluster in the table under linear probing since the probabilities for which slot to use next are not the same for all slots</p>
</blockquote>
<p><strong>Adjacent cluster tend to coalesce</strong></p>
<blockquote>
<p>If the first hash addresses of two keys are different, but following the same probe sequence, they tend to the same slot, this is called <strong>secondary clustering</strong></p>
</blockquote>
<blockquote>
<p>To avoid secondary clustering, need probe sequence to be a function of the original key value, not just the home position</p>
</blockquote>
<p><strong>Increase the search time</strong></p>
<h6 id="quadratic-probing">Quadratic probing</h6>
<p>Quadratic probing uses a quadratic function of $i$ as the increment</p>
<p>$H_i=(Hash(key)+d_i)\ mod\ m\newline$</p>
<p>$Hash(key)\ is\ hash\ function\newline$</p>
<p>$m\ is\ the\ length\ of\ hash\ table\newline$</p>
<p>$Proble\ sequenece\ d_i:1^2, -1^2, 2^2, -2^2, &hellip;q^2, -q^2, q \leq \frac {m-1}{2}\newline$</p>
<h6 id="random-problem">Random problem</h6>
<p>The ideal probe function would select the next slot on the probe sequence at random</p>
<p>$H_i=(Hash(key)+d_i)\ mod\ m\newline$</p>
<p>Probe sequence is a (random) permutation of the numbers from 1 to M-1: $r_1, r_2, &hellip; r_M\newline$</p>
<p>$M \leq\ the\ length\ of\ table\ and\ M\ is\ a\ prime\ number\newline$</p>
<h6 id="rehashing">Rehashing</h6>
<p>$H_i=ReHash_i(key)\newline$</p>
<p>$ReHash_i(key)$ is a <strong>different hash function</strong> from Hash(key)</p>
<p>Try $h_1 (K), h_2 (K), …, h_m(K)$ if collision occurs</p>
<p>Be sure that all different hash functions $h_i (K)$ are relatively prime to M</p>
<h5 id="open-hashing">Open Hashing</h5>
<h6 id="separate-chaining">Separate Chaining</h6>
<p>Chaining: use a hash table that is an array of linked lists to store the items</p>
<blockquote>
<p>The hash table itself can be smaller than the number of records; If the records are large, a chained hash table can save space</p>
</blockquote>
<blockquote>
<p>Collision resolution with chaining is simple. When a collision occurs, we simply insert the new item into the appropriate linked list. Clustering is no problem</p>
</blockquote>
<p>Searching such a hash table is straightforward</p>
<blockquote>
<p>apply the hash function to the item sought and then use one of the search algorithms for linked lists</p>
</blockquote>
<h5 id="analysis-of-hashing">Analysis of Hashing</h5>
<h6 id="searching-2">Searching</h6>
<p>To determine if a specified value is in this hash table,apply the hash function to compute the location for this value</p>
<ol>
<li>if location is empty, value not in the table</li>
<li>if location contains the specified value, the search is successful</li>
<li>if location contains a different value, <em>must rule out</em> <em>collision,</em> begin a “circular” search at this location and continue until either item is found or empty or starting location reached (item not in table)</li>
</ol>
<p>Comparison is needed in hash searching because of collision. We can use <strong>ASL</strong> to analyze hashing</p>
<p>For hashing, the following factors may <strong>affects the efficiency</strong></p>
<ol>
<li>
<p>Hash function: The behavior of the hash function affects the frequency of collisions</p>
</li>
<li>
<p>Collision resolution policy</p>
</li>
<li>
<p>Loading factor ($\alpha$): The load factor of the table is $\alpha = \frac {n}{m}$ , where n positions are occupied out of a total of m positions in the table</p>
</li>
</ol>
<figure><a class="lightgallery" href="/img/Hash_ASL.png" title="/img/Hash_ASL.png" data-thumbnail="/img/Hash_ASL.png" data-sub-html="<h2>case1(image1)</h2>">
        
    </a><figcaption class="image-caption">case1(<code>image1</code>)</figcaption>
    </figure>
<h5 id="summary-1">Summary</h5>
<p>Comparison between Binary Search Trees and Hash Tables</p>
<ol>
<li>
<p>difficult to find the minimum (or maximum) element in a hash table</p>
</li>
<li>
<p>Can not find a range of elements in a hash table</p>
</li>
<li>
<p>$O(\log_2n)$ is not necessarily much more than $O(1)$,since there are no multiplications or divisions by BSTs</p>
</li>
<li>
<p>Sorted input can make BSTs perform poorly</p>
</li>
</ol>
]]></description>
</item>
<item>
    <title>Graph</title>
    <link>https://Jungle430.github.io/posts/data-structures-and-algorithms/graph/</link>
    <pubDate>Fri, 11 Nov 2022 19:53:36 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/data-structures-and-algorithms/graph/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="graph">Graph</h2>
<p>Definition: A graph G consists of two sets</p>
<blockquote>
<p>a finite, nonempty set of vertices V(G)</p>
<p>a finite, possible empty set of edges E(G)</p>
<p>G(V,E) represents a graph</p>
<p>The number of vertices is written $|V|(n)$, and the number of edges is written $|E|(e)$</p>
</blockquote>
<p>General graphs differ from trees</p>
<ol>
<li>need not have a root node</li>
<li>no implicit parent-child relationship</li>
<li>may be several (or no) paths from one vertex to another</li>
</ol>
<h3 id="definition">Definition</h3>
<h4 id="for-a-directed-graph">For a Directed graph</h4>
<p>$if\ u, v\ are\ two\ vertices,then\ &lt;u, v&gt; is\ an\ arc(edge), u\ is\ called\ as\ tail, v\ is\ called\ head$</p>
<p>$Example:$</p>
<p>$[u]\rightarrow[v]\ is\ called &lt;u, v&gt;, and\ [v]\rightarrow[u] is\ called &lt;v, u&gt;$</p>
<p>$$
[u]\rightarrow[v]
$$</p>
<div class="mermaid" id="id-1"></div>
<p>$$
[v]\rightarrow[u]
$$</p>
<div class="mermaid" id="id-2"></div>
<p>A directed graph is one in which each edge is a directed pair of vertices, $&lt; u,v &gt; \neq &lt; v,u &gt;$</p>
<h4 id="for-an-undirected-graph">For an undirected graph</h4>
<p>An undirected graph is one in which the pair of vertices in an edge is unordered, $（u,v）= （v,u）$
$$
(u, v)=(v, u)
$$</p>
<div class="mermaid" id="id-3"></div>
<h4 id="complete-graph">Complete graph</h4>
<p>A complete graph is a graph that has the $maximum\ number\ of\ edges$; A complete graph is a graph in which $there\ is\ an\ edge\ between\ every\ pair\ of\ vertices$.</p>
<blockquote>
<p>for a $undirected\ graph$ with $n\ vertices$, the maximum number of edges is $\frac {n(n-1)}{2}(C_n^2)$</p>
</blockquote>
<blockquote>
<p>for a $directed\ graph$ with n vertices, the maximum number of edges is $n(n-1)$</p>
</blockquote>
<h4 id="sparse-graph-and-dense-graph">Sparse Graph and Dense Graph</h4>
<p>If the edges of a graph is $e&lt;n\log n$, the graph is called <strong>Sparse Graph</strong> ,otherwise, it is called as <strong>Dense Graph</strong></p>
<h4 id="examples-for-graph">Examples for Graph</h4>
<h5 id="undirected-graph">Undirected graph</h5>
<p>$$
V(G_1)={0,1,2,3}\
and\ E(G_1)={(0,1),(0,2),(0,3),(1,2),(1,3),(2,3)}
$$</p>
<p>$$
Graph \rightarrow G_1
$$</p>
<div class="mermaid" id="id-4"></div>
<h5 id="directed-graph">Directed graph</h5>
<p>$$
V(G_2)={0,1,2}\
and\ E(G_2)={&lt;0, 1&gt;,&lt;1, 0&gt;,&lt;1, 2&gt;}
$$</p>
<p>$$
Graph\rightarrow G_2
$$</p>
<div class="mermaid" id="id-5"></div>
<h4 id="adjacent-and-incident">Adjacent and Incident</h4>
<p>If $(v_0 ,v_1 )$ is an edge in an $undirected\ graph$</p>
<blockquote>
<p>$v_0$ and $v_1$ are $adjacent$</p>
<p>The edge $(v_0 , v_1)$ is $incident$ on vertices $v_0\ and\ v_1$</p>
</blockquote>
<p>If $&lt;v_0 , v_1&gt;$ is an edge in a $directed\ graph$</p>
<blockquote>
<p>$v_0$ is $adjacent\ to$ $v_1$ , and $v_1$ is $adjacent\ from$ $v_0$ .</p>
<p>The edge $&lt;v_0 , v_1&gt;$ is $incident$ on $v_0$ and $v_1$</p>
</blockquote>
<h4 id="weighted-graphnetwork">Weighted graph(network)</h4>
<p>There is some <strong>cost</strong> or <strong>weight</strong> associated with each edge</p>
<h4 id="subgraph">Subgraph</h4>
<p>A subgraph of $G$ is a graph $G&rsquo;$ such that $V(G’)$ is a subset of $V(G)$ and $E(G’)$ is a subset of $E(G)$
$$
V(G)\supseteq V(G&rsquo;)
$$</p>
<p>$$
E(G)\supseteq E(G&rsquo;)
$$</p>
<h4 id="degree">Degree</h4>
<p>The degree of a vertex (TD: Total Degree) is the number of edges incident to that vertex</p>
<h5 id="in-degree-and-out-degreefor-a-directed-graph">In-degree and Out-degree(for a directed graph)</h5>
<p>The <strong>in-degree</strong> of a vertex v (ID) is the number of edges that have <em>v</em> as the <strong>head</strong></p>
<p>The <strong>out-degree</strong> of a vertex v (OD) is the number of edges that have <em>v</em> as the <strong>tail</strong></p>
<h5 id="conclusion">Conclusion:</h5>
<p>if $d_i$ is the degree of a vertex $i$ in a graph $G$ with $n$ vertices and $e$ edges, the number of edges is
$$
e=\frac{\sum_{i=1}^n d_i}{2}
$$</p>
<h5 id="examples-for-degree">Examples for degree</h5>
<p>directed graph:</p>
<div class="mermaid" id="id-6"></div>
<p>$$
0\rightarrow in=1\ and\ out=1
$$</p>
<p>$$
1\rightarrow in=1\ and\ out=2
$$</p>
<p>$$
2\rightarrow in=1\ and\ out=0
$$</p>
<p>Undirected graph:</p>
<div class="mermaid" id="id-7"></div>
<p>$$
0\rightarrow 2
$$</p>
<p>$$
[1,2]\rightarrow 3
$$</p>
<p>$$
[3, 4, 5, 6] \rightarrow 1
$$</p>
<h4 id="path">Path</h4>
<h5 id="definition-1">Definition</h5>
<p>$A\ path\ from\ vertex\ v_p\ to\ v_q\ in\ a\ graph\ G\ is\ a\ sequence\ of\ vertices,$</p>
<p>$\rightarrow v_p , v_{i_1} , v_{i_2} , &hellip;, v_{i_n}, v_{q}\ such\ that (v_p , v_{i_1}), (v_{i_1} ,v_{i_2} ), &hellip;, (v_{i_n}, v_q) are\ edges\ in\ a\ graph$</p>
<h5 id="length-of-a-path">Length of a path</h5>
<p>The length of a path is <strong>the number of edges</strong> on it</p>
<h5 id="simple-path">Simple path</h5>
<p>A simple path is a path in which all vertices are <strong>distinct</strong></p>
<h5 id="simple-circle">Simple Circle</h5>
<p>A simple cycle is a path in which all vertices,<strong>except the first and the last</strong>, are distinct. <strong>The first and the last vertices are the same</strong></p>
<h4 id="example-of-graph">Example of Graph</h4>
<h5 id="traffic-flow-can-be-modeled-by-a-graph">Traffic flow can be modeled by a graph</h5>
<blockquote>
<p>Each street intersection represents a vertex, each street is an edge</p>
<p>Edge costs could represent, among other things, a <strong>speed limit or capacity</strong></p>
<p>We could ask for <strong>the shortest route</strong> or use this information to find the most likely location for <strong>bottleneck</strong></p>
</blockquote>
<h3 id="adt">ADT</h3>
<p>Graph</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">Objects: a nonempty set of vertices and a set of edges
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Functions: for all graph in Graph, v, v1 and v2 in Vertices
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Graph Create(): return an empty graph
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Graph DeleteEdge(graph, v1, v2): return a graph in which the edge (v1, v2) is removed
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">......
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="graph-implementation">Graph Implementation</h3>
<h4 id="adjacency-matrix-array">Adjacency Matrix (<strong>Array</strong>)</h4>
<h5 id="definition-2">Definition</h5>
<p>The adjacency matrix of G is a two-dimensional n by n array, say $A[n] [n]$
$$
A[i][j]=\begin{cases}
1\ if\ &lt;V_i,V_j&gt; \in E\ or\ (V_i,V_j)\in E\newline
0\ otherwise
\end{cases}
$$</p>
<p>For a <strong>weighted graph</strong></p>
<p>$$
A[i][j]=\begin{cases}
W(i, j)\ when\ i\neq j\ and\ &lt;V_i,V_j&gt; \in E\ or\ (V_i,V_j)\in E\newline
\infty\ otherwise
\end{cases}
$$</p>
<h5 id="example">Example</h5>
<p>For a graph</p>
<div class="mermaid" id="id-8"></div>
<p>$$
\begin{pmatrix}
0&amp; 1&amp; 0\newline
1&amp; 0&amp; 1\newline
0&amp; 0&amp; 0
\end{pmatrix}
$$</p>
<p>For a weight graph</p>
<p>The weight of the edge from vertex i to vertex j is used instead of 1 in the adjacency matrix
$$
\begin{pmatrix}
\infty&amp; 1&amp; \infty&amp; 4\newline
\infty&amp; \infty&amp; 9&amp; 2\newline
3&amp; 5&amp; \infty&amp; 8\newline
\infty&amp; \infty&amp; 6&amp; \infty
\end{pmatrix}
$$</p>
<h5 id="notice">Notice</h5>
<p>The adjacency matrix for an <strong>undirected graph</strong> is <strong>symmetric</strong></p>
<p>The adjacency matrix for a <strong>digraph need not be symmetric</strong></p>
<h5 id="merits-of-adjacency-matrix">Merits of Adjacency Matrix</h5>
<p>From the adjacency matrix, to determine the connection of vertices is easy</p>
<p><strong>For a undirected graph, the degree of a vertex i is</strong> $\sum_{j=1}^n A[i][j]$</p>
<p>For a <strong>directed graph</strong></p>
<p>The sum of 1 in row i of the adjacency matrix is yields the out-degree of the $i^{th}$ vertex
$$
\begin{bmatrix}
a_1&amp;a_2&amp;a_3&amp;\dots&amp;a_n
\end{bmatrix}
$$
The sum of the entries in the $i^{th}$ column is its in degree
$$
\begin{bmatrix}
a_1\newline
a_2\newline
a_3\newline
\vdots\newline
a_n
\end{bmatrix}
$$</p>
<h5 id="code">Code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxVNum</span> <span class="o">=</span> <span class="mi">500</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="n">XXX</span> <span class="n">VertexType</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">ArcCell</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*Type of vertex relationship. For unauthorized graph, use 1 or 0 to indicate adjacent no;
</span></span></span><span class="line"><span class="cl"><span class="cm">	*For weighted graphs, is the weight value
</span></span></span><span class="line"><span class="cl"><span class="cm">	*/</span>
</span></span><span class="line"><span class="cl">    <span class="n">VRType</span> <span class="n">adj</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">InfoType</span> <span class="o">*</span><span class="n">Info</span><span class="p">;</span><span class="c1">//Pointer to the arc related information (may not be available)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">ArcCell</span><span class="p">,</span> <span class="n">AdjMatrix</span><span class="p">[</span><span class="n">MaxVNum</span><span class="p">][</span><span class="n">MaxVNum</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">VertexType</span> <span class="n">vexs</span><span class="p">[</span><span class="n">MaxVNum</span><span class="p">];</span> <span class="cm">/* Vertex table */</span>
</span></span><span class="line"><span class="cl">	<span class="n">AdjMatrix</span> <span class="n">arcs</span><span class="p">;</span> <span class="cm">/* The adjacency matrix, i.e. the edge table */</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">vexnum</span><span class="p">,</span> <span class="n">arcnum</span><span class="p">;</span> <span class="cm">/* The number of vertices and edges in the graph */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Mgraph</span><span class="p">;</span> <span class="cm">/* Mgraph is a graph stored in an adjacency matrix */</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Create a graph</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">CreateGraph</span> <span class="p">(</span><span class="n">Mgraph</span> <span class="o">&amp;</span><span class="n">ga</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">float</span> <span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span> <span class="o">&gt;&gt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">arcnum</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">ga</span><span class="o">-&gt;</span><span class="n">vexs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="err">＝</span> <span class="n">getchar</span><span class="p">();</span> <span class="cm">/*Read into the vertex information and establish the vertex table*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">ga</span><span class="o">-&gt;</span><span class="n">arcs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="err">＝</span> <span class="err">∝</span><span class="p">;</span> <span class="cm">/*The Adjacency matrix is initialized*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">ga</span><span class="p">.</span><span class="n">arcnum</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">v1</span> <span class="o">&gt;&gt;</span> <span class="n">v2</span> <span class="o">&gt;&gt;</span> <span class="n">w</span><span class="p">;</span> <span class="cm">/*Read in the vertices and weights of an edge*/</span>
</span></span><span class="line"><span class="cl">		<span class="n">i</span> <span class="o">=</span> <span class="n">LocateVex</span><span class="p">(</span><span class="n">ga</span><span class="p">,</span><span class="n">v1</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="n">j</span> <span class="o">=</span> <span class="n">LocateVex</span><span class="p">(</span><span class="n">ga</span><span class="p">,</span><span class="n">v2</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">		<span class="n">ga</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">].</span><span class="n">adj</span> <span class="err">＝</span> <span class="n">w</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">ga</span><span class="p">.</span><span class="n">arcs</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">adj</span> <span class="err">＝</span> <span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="adjacency-list">Adjacency List</h4>
<p>If a graph does not have many edges, the adjacency matrix will be sparse</p>
<blockquote>
<p>such representation is a waste of space</p>
<p>use an array of pointers to linked row-lists</p>
<p>adjacency-list representation for graphs</p>
</blockquote>
<h5 id="description-of-adjacency-list">Description of Adjacency List</h5>
<p>Each row in adjacency matrix is represented as an adjacency list</p>
<blockquote>
<p>The graph is represented by an array or vector <em>v</em>[1],<em>v</em>[2],&hellip;,<em>v</em>[n], one element for each vertex in the graph</p>
</blockquote>
<blockquote>
<p>Each <em>v</em>[i] stores the data stored in vertex i together with a linked list of the numbers of all vertices adjacent from vertex i</p>
</blockquote>
<div class="mermaid" id="id-9"></div>
<div class="mermaid" id="id-10"></div>
<h5 id="example-1">Example:</h5>
<div class="mermaid" id="id-11"></div>
<div class="mermaid" id="id-12"></div>
<h5 id="merits-and-demerits-of-adjacency-list">Merits and Demerits of Adjacency List</h5>
<p>degree of a vertex in an undirected graph – # of nodes in adjacency list</p>
<p>out-degree of a vertex in a directed graph – # of nodes in its adjacency list</p>
<p>in-degree of a vertex in a directed graph – traverse the whole data structure</p>
<h5 id="inverse-adjacency-list">Inverse adjacency list</h5>
<p>Linked table is entry edge</p>
<div class="mermaid" id="id-13"></div>
<div class="mermaid" id="id-14"></div>
<div class="mermaid" id="id-15"></div>
<h5 id="code-1">code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">MaxVerNum</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> <span class="cm">/*Maximum verx 100*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*Adjacent table edge junction type*/</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">ArcNode</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">adjvex</span><span class="p">;</span> <span class="cm">/*Neighborhood domain*/</span>
</span></span><span class="line"><span class="cl">	<span class="n">InfoType</span> <span class="o">*</span><span class="n">Info</span><span class="p">;</span> <span class="cm">/*Domain info, for edge information*/</span>
</span></span><span class="line"><span class="cl">	<span class="k">struct</span> <span class="nc">ArcNode</span> <span class="o">*</span> <span class="n">next</span><span class="p">;</span> <span class="cm">/*Pointer domain to the next neighbor*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">ArcNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*Table header node type*/</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">Vnode</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">VertexType</span> <span class="n">vertex</span><span class="p">;</span> <span class="cm">/*Vertex Domains*/</span>
</span></span><span class="line"><span class="cl">	<span class="n">ArcNode</span> <span class="o">*</span><span class="n">firstedge</span><span class="p">;</span> <span class="cm">/*Side table head pointer*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">Vnode</span><span class="p">,</span> <span class="n">AdjList</span> <span class="p">[</span><span class="n">MaxVertexNum</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*The type of figure*/</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">AdjList</span> <span class="n">vertices</span><span class="p">;</span> <span class="cm">/*adjacency list*/</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">vexnum</span><span class="p">,</span> <span class="n">arcnum</span><span class="p">;</span> <span class="cm">/*Vertices and edges*/</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">ALGraph</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="traversing-graph">Traversing Graph</h3>
<p>Some applications require visiting every vertex in a graph exactly once.</p>
<p>The application may require that vertices should be visited <strong>in some special order</strong> based on graph topology</p>
<blockquote>
<p>DFS: Depth-First Search</p>
<p>BFS: Breadth-First Search</p>
</blockquote>
<h4 id="depth-first-searchdfs">Depth-First Search(DFS)</h4>
<h5 id="basic-idea">Basic idea</h5>
<ol>
<li>
<p>Start from a given vertex <em>v</em> and visit it.</p>
</li>
<li>
<p>Visit the first neighbor <em>w</em> of <em>v</em>. Then visit the first neighbor of <em>w</em> that has not already been visited, etc.</p>
</li>
<li>
<p>If a node with no unexamined neighbors, then backup to the last visited node and examine its remaining neighbors.</p>
</li>
<li>
<p>The search continues until all nodes of the graph have been examined.</p>
</li>
</ol>
<h5 id="example-2">Example</h5>
<div class="mermaid" id="id-16"></div>
<p>$$
\begin{bmatrix}
V1 &amp;V2 &amp;V4 &amp;V8 &amp;V3 &amp;V6 &amp;V7 &amp;V5
\end{bmatrix}
$$</p>
<h5 id="algorithm">Algorithm</h5>
<p>Difficulties：</p>
<ol>
<li>
<p>How to determine whether <em>v</em> has been visited?</p>
</li>
<li>
<p>How to search the neighbor of <em>v</em>？</p>
</li>
</ol>
<p>Solutions：</p>
<ol>
<li>
<p>Using an array visited[n]. When <em>i</em> <em>th</em> vertex has been visited, visited[i]=TRUE.</p>
</li>
<li>
<p>Varying by different data structure:</p>
</li>
</ol>
<blockquote>
<p>• <strong>Adjacency Matrix</strong></p>
<p>• <strong>Adjacency List</strong></p>
</blockquote>
<p>DFS uses backtracking. <strong>Recursion</strong> is a natural technique for such problems</p>
<blockquote>
<p>a <strong>stack</strong> is automatically maintained to make backtracking possible</p>
</blockquote>
<p>DFS</p>
<ol>
<li>
<p>Visit the start vertex <em>v</em>.</p>
</li>
<li>
<p>For each vertex <em>w</em> adjacent to <em>v</em> do:</p>
</li>
</ol>
<blockquote>
<p>• If <em>w</em> has not been visited, apply the Depth-First Search (DFS) algorithm with <em>w</em> as the start vertex.</p>
</blockquote>
<h5 id="code-2">Code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">auto</span> <span class="n">MAX</span><span class="p">{</span> <span class="mi">500</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span><span class="n">MAX</span><span class="o">&gt;</span> <span class="n">visited</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DFSTraverse</span><span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">visited</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="p">[</span> <span class="n">k</span> <span class="p">])</span> 
</span></span><span class="line"><span class="cl">            <span class="n">DFS</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">DFS</span><span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">	<span class="n">VISIT</span><span class="p">(</span><span class="n">v</span><span class="p">);</span> <span class="c1">// access to the v_th vertex in graph G
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">FirstAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span><span class="n">v</span><span class="p">);</span> <span class="n">w</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">=</span> <span class="n">NextAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">w</span><span class="p">])</span> 
</span></span><span class="line"><span class="cl">            <span class="n">DFS</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">FirstAdjVex</span><span class="p">(</span><span class="n">ALGraph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    *returns the serial number of the first neighbor of the v th vertex in G. 
</span></span></span><span class="line"><span class="cl"><span class="cm">    *If v has no neighbors, it returns 0
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">G</span><span class="p">.</span><span class="n">vertices</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">firstarc</span> <span class="o">?</span> <span class="n">G</span><span class="p">.</span><span class="n">vertices</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">firstarc</span><span class="o">-&gt;</span><span class="nl">adjvex</span> <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">NextAdjVex</span><span class="p">(</span><span class="n">ALGraph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">w</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    *returns the serial number of the next neighbor of the v th vertex in G relative to the vertex w.
</span></span></span><span class="line"><span class="cl"><span class="cm">    *Returns 0 if v has no next neighbor relative to the vertex w
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl">	<span class="n">ArcNode</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">p</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">vetrices</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">firstarc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">while</span><span class="p">(</span><span class="n">p</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">adjvex</span> <span class="o">!=</span> <span class="n">w</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nextarc</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">adjvex</span> <span class="o">==</span> <span class="n">w</span> <span class="o">&amp;&amp;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nextarc</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">nextarc</span><span class="o">-&gt;</span><span class="n">adjvex</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="algorithm-analysis">Algorithm Analysis</h5>
<p>Let G=(V,E) be a graph with <em>n</em> vertices and <em>e</em> edges</p>
<p>$Adjacency\ list:\ O(n+e)$</p>
<p>$Adjacency\ matrix:\ O(n^2)$</p>
<h4 id="bread-first-searchbfs">Bread-First Search(BFS)</h4>
<h5 id="basic-idea-1">Basic idea</h5>
<ol>
<li>
<p>Start from a given vertex <em>v</em> and visit it.</p>
</li>
<li>
<p>Visit all neighbors of <em>v</em>.</p>
</li>
<li>
<p>Then visit all neighbors of first neighbor <em>w</em> of <em>v</em>.</p>
</li>
<li>
<p>Then visit all neighbors of second neighbor <em>x</em> of <em>v</em>, etc</p>
</li>
</ol>
<h5 id="example-3">Example</h5>
<div class="mermaid" id="id-17"></div>
<p>$$
\begin{bmatrix}
V1 &amp;V2 &amp;V3 &amp;V4 &amp;V6 &amp;V7 &amp;V8 &amp;V5
\end{bmatrix}
$$</p>
<h5 id="algorithm-1">Algorithm</h5>
<blockquote>
<p>BFS visits nodes level by level</p>
</blockquote>
<p>While visiting each node on a given level</p>
<blockquote>
<p>store it</p>
<p>so that, we can return to it after completing this level</p>
<p>so that nodes adjacent from it can be visited</p>
</blockquote>
<p>Because the first node visited on a given level should be the first one to which we return, a <strong>queue</strong> is an appropriate data structure for storing the nodes</p>
<p>BFS</p>
<ol>
<li>
<p>Visit the start vertex <em>v</em>.</p>
</li>
<li>
<p>Initialize a queue to contain only the start vertex.</p>
</li>
<li>
<p>While the queue is not empty do:</p>
</li>
</ol>
<blockquote>
<p>• Remove a vertex <em>v</em> from the queue.</p>
</blockquote>
<blockquote>
<p>• For all vertices <em>w</em> adjacent to <em>v</em> do:</p>
</blockquote>
<blockquote>
<p>– If w has not been visited then</p>
<blockquote>
<p>i. Visit <em>w</em>.
ii. Add <em>w</em> to the queue.</p>
</blockquote>
</blockquote>
<h5 id="code-3">Code</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">BFSTraverse</span><span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">v</span><span class="o">++</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">InitQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;=</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">v</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">            <span class="n">visited</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">VISIT</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">EnQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">v</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">EmptyQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">))</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                <span class="n">DeQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span><span class="n">u</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">				<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">FirstAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">);</span> <span class="n">w</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">=</span> <span class="n">NextAdjVex</span><span class="p">(</span><span class="n">G</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">w</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">					<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">w</span><span class="p">])</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">visited</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">VISIT</span><span class="p">(</span><span class="n">w</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                        <span class="n">EnQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">w</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                    <span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span> <span class="c1">// end while
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}</span> <span class="c1">// end if
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="algorithm-analysis-1">Algorithm Analysis</h5>
<p>Let G=(V,E) be a graph with <em>n</em> vertices and <em>e</em> edges</p>
<p>$Adjacency\ list:\ O(n+e)$</p>
<p>$Adjacency\ matrix:\ O(n^2)$</p>
<h4 id="for-adjacency-matrix-unweighted-directed-graph-in-c">For adjacency matrix unweighted directed Graph in C++</h4>
<p>$$
A[i][j]=\begin{cases}
1\ if\ &lt;V_i,V_j&gt; \in E\ or\ (V_i,V_j)\in E\newline
0\ otherwise
\end{cases}
$$</p>
<h5 id="graph-1">Graph</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#pragma once
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;exception&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Graph</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">*</span><span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">**</span><span class="n">matrix</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Graph</span><span class="p">()</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Graph</span><span class="p">(</span><span class="n">T</span> <span class="n">data</span><span class="p">[],</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">setConnect</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">**</span><span class="n">args</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="na">[[nodiscard]]</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">&amp;</span><span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">*</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">~</span><span class="n">Graph</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Graph</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="o">:</span><span class="n">_data</span><span class="p">{</span><span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">size</span><span class="p">]{}},</span> <span class="n">_size</span><span class="p">{</span><span class="n">size</span><span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">*</span><span class="p">[</span><span class="n">_size</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">[</span><span class="n">_size</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">setConnect</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">**</span><span class="n">args</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">!=</span> <span class="n">_size</span><span class="p">)</span> <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">size</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">T</span> <span class="o">&amp;</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_data</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="o">*</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::~</span><span class="n">Graph</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">delete</span><span class="p">[]</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">matrix</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="dfs">DFS</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">VST</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">DFS</span><span class="p">(</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">graph</span><span class="p">,</span> <span class="n">VST</span> <span class="o">&amp;</span><span class="n">visit</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="o">*</span><span class="n">statue</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">statue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="bfs">BFS</h5>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">VST</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">BFS</span><span class="p">(</span><span class="n">Graph</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">graph</span><span class="p">,</span> <span class="n">VST</span> <span class="o">&amp;</span><span class="n">visit</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="o">*</span><span class="n">statue</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span> <span class="n">queue</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">queue</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">x</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">visit</span><span class="p">(</span><span class="n">graph</span><span class="p">[</span><span class="n">x</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">statue</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="k">if</span> <span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="n">getOutDegree</span><span class="p">(</span><span class="n">x</span><span class="p">)[</span><span class="n">j</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">statue</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                        <span class="n">queue</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">j</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span> <span class="n">statue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="connectivity">Connectivity</h3>
<h4 id="definition-3">Definition</h4>
<p>Connected</p>
<blockquote>
<p>An <strong>undirected graph</strong> is <strong>connected</strong> if there is a path <strong>from every vertex to every other vertex</strong></p>
</blockquote>
<p>Strongly connected</p>
<blockquote>
<p>A <strong>directed graph</strong> with this property is called <strong>strongly connected</strong></p>
</blockquote>
<p>Weakly connected</p>
<blockquote>
<p>If <strong>a directed graph is not strongly connected</strong>, but the <strong>underlying graph</strong>(without direction to the arcs)is <strong>connected</strong>, then the graph is said to be <strong>weakly connected</strong>.</p>
</blockquote>
<h4 id="minimal-cost-spanning-trees">Minimal Cost Spanning Trees</h4>
<h5 id="spanning-trees">Spanning Trees</h5>
<h6 id="definition-4">Definition</h6>
<p>A spanning tree is any tree that consists solely of edges in G and that includes all the vertices(Contains all the vertices in the graph, but only enough n-1 edges to form a tree)</p>
<p>$$
E(G):T(tree\ edges)+N(nontree\ edges)\newline
T:set\ of\ edges\ used\ during\ search\newline
N:set\ of\ remaining\ edges\newline
$$
A spanning tree is a <strong>minimal connected subgraph</strong>, G’, of G such that <strong>V(G’)=V(G)</strong> and <strong>G’ is connected</strong></p>
<h6 id="example-4">Example</h6>
<div class="mermaid" id="id-18"></div>
<p>Possible spanning trees</p>
<div class="mermaid" id="id-19"></div>
<div class="mermaid" id="id-20"></div>
<div class="mermaid" id="id-21"></div>
<h6 id="dfs-and-bfs">DFS and BFS</h6>
<blockquote>
<p>Either DFS or BFS can be used to create a spanning tree</p>
</blockquote>
<p>When <strong>DFS</strong> is used, the resulting spanning tree is known as a <strong>depth first spanning tree</strong></p>
<p>When <strong>BFS</strong> is used, the resulting spanning tree is known as a <strong>breadth first spanning tree</strong></p>
<h6 id="nontree-edge">Nontree edge</h6>
<p>While adding a nontree edge into any spanning tree, this will create a <strong>cycle</strong></p>
<h5 id="minimal-cost-spanning-trees-1">Minimal Cost Spanning Trees</h5>
<h6 id="definition-5">Definition</h6>
<p>The <strong>cost of a spanning tree</strong> of a <strong>weighted undirected graph</strong> is the sum of the costs of the edges in the spanning tree</p>
<p>A <strong>Minimal Cost Spanning Tree (MST)</strong> is a spanning tree of <strong>least</strong> cost</p>
<h4 id="algorithm-for-minimal-cost-spanning-tree">Algorithm for Minimal Cost Spanning Tree</h4>
<blockquote>
<p>$Prim$</p>
<p>$Kruskal$</p>
</blockquote>
<h5 id="prim-algorithm">Prim algorithm</h5>
<p>Let Graph $G = {V, E}$, the minimum cost spanning tree be $T={U, T_E }$ and $U=V, T_E\subseteq E\newline$.</p>
<p>$Initially\rightarrow U={u_0 }, T_E=\empty$</p>
<p>Adding edges and vertices to T one at a time</p>
<ol>
<li>
<p><strong>Select the least cost edge</strong> $(u,v)$ that $u\in U\ and\ v\notin U$. Adding $v\ to\ U\ and\ (u,v)\ to\ T_E$</p>
</li>
<li>
<p>It continues, until n-1 edges have been selected and U=V</p>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">The</span> <span class="n">minimum</span> <span class="n">cost</span> <span class="n">spanning</span> <span class="n">tree</span> <span class="n">T</span> <span class="o">=</span> <span class="p">{</span><span class="n">U</span><span class="p">,</span><span class="n">TE</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">U</span> <span class="o">=</span> <span class="p">{</span><span class="n">u0</span><span class="p">};</span> 
</span></span><span class="line"><span class="cl"><span class="n">TE</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">(</span><span class="n">T</span> <span class="n">contains</span> <span class="n">fewer</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">let</span> <span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="n">be</span> <span class="n">a</span> <span class="n">least</span> <span class="n">cost</span> <span class="n">edge</span> <span class="n">such</span> <span class="n">that</span> <span class="n">u</span> <span class="n">in</span> <span class="n">U</span> <span class="n">and</span> <span class="n">v</span> <span class="n">notin</span> <span class="n">U</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">(</span><span class="n">there</span> <span class="n">is</span> <span class="n">no</span> <span class="n">such</span> <span class="n">edge</span> <span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">add</span> <span class="n">v</span> <span class="n">to</span> <span class="n">U</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">add</span> <span class="p">(</span><span class="n">u</span><span class="p">,</span><span class="n">v</span><span class="p">)</span> <span class="n">to</span> <span class="n">TE</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">T</span> <span class="n">contains</span> <span class="n">fewer</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span><span class="c1">//fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">printf</span><span class="p">(</span><span class="err">“</span><span class="n">No</span> <span class="n">spanning</span> <span class="n">tree</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="kruskal-algorithm">Kruskal algorithm</h5>
<p>Build a Minimum cost Spanning Tree (MST) T by <strong>adding edges to T one at a time</strong></p>
<p>Select the edges for inclusion in T <strong>in non-decreasing order of the cost</strong></p>
<p>An edge is added to T if it <strong>does not form a cycle</strong></p>
<p>Since G is connected and has $n &gt; 0$ vertices, exactly n-1 edges will be selected</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">TE</span><span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="p">((</span><span class="n">T</span> <span class="n">contains</span> <span class="n">less</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">E</span> <span class="n">is</span> <span class="n">not</span> <span class="n">empty</span><span class="p">))</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">choose</span> <span class="n">a</span> <span class="n">least</span> <span class="n">cost</span> <span class="nf">edge</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">from</span> <span class="n">E</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">delete</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">from</span> <span class="n">E</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="p">((</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">does</span> <span class="n">not</span> <span class="n">create</span> <span class="n">a</span> <span class="n">cycle</span> <span class="n">in</span> <span class="n">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="n">add</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">)</span> <span class="n">to</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl">	<span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="n">discard</span> <span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="n">w</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">T</span> <span class="n">contains</span> <span class="n">fewer</span> <span class="n">than</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="n">edges</span><span class="p">)</span><span class="c1">//fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="n">printf</span> <span class="p">(</span><span class="err">“</span><span class="n">No</span> <span class="n">spanning</span> <span class="n">tree</span><span class="err">\</span><span class="n">n</span><span class="err">”</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="time-complexity-analysis">Time Complexity Analysis</h5>
<p>$Prim’s\ algorithm:O(n^2)\newline$</p>
<blockquote>
<p>Regardless of the <strong>number of edges</strong> in the graph, it is suitable to find the minimum spanning tree of <strong>dense nets</strong></p>
</blockquote>
<p>$Kruskal’s\ algorithm:O(e\log e)\ (Merge\ Sort\ for\ edges)\newline$</p>
<blockquote>
<p>Regardless of the <strong>number of vertices</strong> in the graph, it is suitable to find the minimum spanning tree of <strong>sparse nets</strong></p>
</blockquote>
<h3 id="application-of-graph">Application of Graph</h3>
<p>Application of <strong>Directed Acyclic (Acycline) Graph</strong></p>
<ol>
<li>
<p>Topological Sort</p>
</li>
<li>
<p>Critical Path</p>
</li>
</ol>
<p>Shortest-Path Algorithms</p>
<h4 id="topological-sort">Topological Sort</h4>
<h5 id="definition-6">Definition</h5>
<p>An ordering of vertices in a Directed Acyclic Graph, such that if there is a path from $v_i$ to $v_j$ , then $v_j$ appears <strong>after</strong> $v_i$ in the ordering</p>
<h5 id="example-5">Example</h5>
<p>An advanced placement course in a college training program</p>
<h5 id="activity-on-vertexaovnetwork">Activity on Vertex(AOV)—Network</h5>
<p>Vertices represent activity, and arcs represent directed graphs of priority relations between activities</p>
<h5 id="notice-1">Notice</h5>
<p>Topological ordering is <strong>not possible</strong> if <strong>there is a cycle in the graph</strong></p>
<h5 id="a-simple-algorithm">A simple algorithm</h5>
<h6 id="steps">steps</h6>
<ol>
<li>
<p>Compute the in-degree of all vertices from the adjacency information of the graph</p>
</li>
<li>
<p>Find any vertex <strong>with no incoming edges</strong></p>
</li>
<li>
<p>Print this vertex, and <strong>remove it and its edges</strong></p>
</li>
<li>
<p>Apply this strategy to the rest of the graph</p>
</li>
</ol>
<h6 id="time-complexity-analysis-1">Time Complexity Analysis</h6>
<p>$O(n^2)$</p>
<h6 id="code-4">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Topsort</span> <span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">Counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Vertex</span> <span class="n">V</span><span class="p">,</span> <span class="n">W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="k">for</span><span class="p">(</span><span class="n">Counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">Counter</span> <span class="o">&lt;</span> <span class="n">NumVertex</span><span class="p">;</span> <span class="n">counter</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">V</span> <span class="o">=</span> <span class="n">FindNewVertexOfInDegreeZero</span> <span class="p">();</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">V</span> <span class="o">==</span> <span class="n">NotAVertex</span><span class="p">)</span> <span class="p">{</span><span class="c1">//exit a circle
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Graph has a cycle&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">TopNum</span> <span class="p">[</span><span class="n">V</span><span class="p">]</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">;</span><span class="c1">//The order of print
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span> <span class="p">(</span><span class="n">each</span> <span class="n">W</span> <span class="n">adjacent</span> <span class="n">from</span> <span class="n">V</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">Indegree</span><span class="p">[</span><span class="n">W</span><span class="p">]</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="an-improved-algorithm">An improved algorithm</h5>
<h6 id="steps-1">steps</h6>
<ol>
<li>
<p>Keep all the unassigned vertices of indegree 0 in a <strong>queue</strong>.</p>
</li>
<li>
<p>While <strong>queue</strong> is not empty</p>
<blockquote>
<p>• Remove a vertex in the <strong>queue</strong>.</p>
<p>• Decrement the indegree of all adjacent vertices.</p>
<p>• If the indegree of an adjacent vertex becomes 0, <strong>enqueue</strong> the vertex</p>
</blockquote>
</li>
<li>
<p>The topological ordering is the order in which the vertices <strong>dequeue</strong></p>
</li>
</ol>
<h6 id="time-complexity-analysis-2">Time Complexity Analysis</h6>
<p>$O(n+e)\newline$</p>
<h6 id="code-5">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Topsort</span> <span class="p">(</span><span class="n">Graph</span> <span class="n">G</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Queue</span> <span class="n">Q</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span> <span class="n">Counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Vertex</span> <span class="n">V</span><span class="p">,</span> <span class="n">W</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="n">Q</span> <span class="o">=</span> <span class="n">CreateQueue</span> <span class="p">(</span><span class="n">NumVertex</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">MakeEmpty</span> <span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="n">each</span> <span class="n">vertex</span> <span class="n">V</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">Indegree</span> <span class="p">[</span><span class="n">V</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">Enqueue</span><span class="p">(</span><span class="n">V</span><span class="p">,</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">IsEmpty</span><span class="p">(</span><span class="n">Q</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">V</span> <span class="o">=</span> <span class="n">Dequeue</span><span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">TopNum</span><span class="p">[</span><span class="n">V</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="n">Counter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="c1">//The topological ordering is the order in which the vertices dequeue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">each</span> <span class="n">W</span> <span class="n">adjacent</span> <span class="n">from</span> <span class="n">V</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="o">--</span><span class="n">Indegree</span><span class="p">[</span><span class="n">W</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                    <span class="n">Enqueue</span><span class="p">(</span><span class="n">W</span><span class="p">,</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">Counter</span> <span class="o">!=</span> <span class="n">NumBertex</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Graph has a cycle</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span> <span class="c1">//fail
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DisposeQueue</span><span class="p">(</span><span class="n">Q</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="critical-path">Critical Path</h4>
<h6 id="aoe-activity-on-edge-network">AOE (Activity on Edge) Network</h6>
<blockquote>
<p>Vertex: Represents an event or a status</p>
<p>Edge: represents an activity. An edge (v, w) means that event v must be done before w may begin</p>
<p>Weight: Duration time of an activity</p>
</blockquote>
<p>~There is only one vertex whose in-degree is 0, and only one vertex whose out-degree is 0</p>
<p>~No cycle</p>
<p>~This type of a graph could be (and frequently) used to model projects</p>
<h6 id="questions">Questions</h6>
<blockquote>
<p>What is the earliest completion time for the project?</p>
<p>$\rightarrow The\ longest\ path\newline$</p>
</blockquote>
<blockquote>
<p>Which activities can be delayed, and by how long, without affecting the minimum completion time?</p>
<p>$\rightarrow Not\ critical\ activities\newline$</p>
</blockquote>
<h6 id="elements">Elements</h6>
<p>e(i): earliest start time of $a_i\newline$</p>
<p>l(i): latest start time of $a_i$ (without affecting the minimum completion time)</p>
<p>e(i)=l(i): $a_i$ <strong>is a critical activity</strong>, all the activities on the critical path are critical activities</p>
<p>ve(j): the earliest occurring time of $v_j\newline$</p>
<p>vl(j): the latest occurring time of $v_j$ (without affecting the minimum completion time)</p>
<p>$$
V_j\stackrel{a_i}{\longrightarrow}V_k\newline
$$</p>
<p>If $a_i$ is represented by $&lt;j,k&gt;$, its duration time is $dut(&lt;j,k&gt;)\newline$</p>
<p>then $e(i) = ve(j), l(i) = vl(k) - dut(&lt;j,k&gt;)\newline$</p>
<h6 id="calculate">Calculate</h6>
<ol>
<li>
<p>$From\ ve(0)=0: ve(j) = max(ve(i) + dut(&lt;i,j&gt;))\newline$</p>
</li>
<li>
<p>$vl(n-1)=ve(n-1), from\ the\ last\ one:vl(i) = min(vl(j) - dut(&lt;i,j&gt;))\newline$</p>
</li>
</ol>
<h6 id="time-complexity-analysis-3">Time Complexity Analysis</h6>
<p>Suppose there are n events and e activities in AOE</p>
<p>$The\ Time\ Complexity\ of\ whole\ algorithm\ is\ O(n+e)\newline$</p>
<h4 id="shortest-paths-problems">Shortest Paths Problems</h4>
<p>Input: A graph with weights or costs associated with each edge</p>
<p>Output: The list of edges forming the shortest path</p>
<p>Sample problems:</p>
<blockquote>
<p>Find shortest path between two named vertices</p>
<p>Find shortest path from S to all other vertices——Single-Source Shortest Paths</p>
<p>Find shortest path between all pairs of vertices——All-Pairs Shortest Paths</p>
</blockquote>
<h5 id="dijkstra-idea">Dijkstra idea</h5>
<h6 id="step">step</h6>
<p>All vertexes are divided into 2 groups</p>
<blockquote>
<p>S : the vertexes that have found the shortest path from $V_0$ to them</p>
<p>V-S=T: The vertexes that have not calculated the distances</p>
</blockquote>
<p>Adding vertex in T to S in non-decreasing order of distances</p>
<blockquote>
<p>The distances from $V_0$ to vertexes in S is not longer than the distances from $V_0$ to any vertexes in T</p>
</blockquote>
<h6 id="algorithm-2">algorithm</h6>
<p>For G(V,E) is expressed in Adjacency Matrix</p>
<ol>
<li>
<p>Initially, $S={v_0}$; An array D[n] to store the distance and D[i] is the shortest distance from $v_0\ to\ v_i$</p>
<blockquote>
<p>If exist an edge $(v_0,v_i),D[i] =  w(v_0 ,v_i)\newline$
If there is no such edge, then D[i]= +$\infty\newline$</p>
</blockquote>
</li>
<li>
<p>Select the minimal D[j] from V-S, then vertex $v_j$ is the destination of the currently shortest path, and D[j] is the shortest distance</p>
</li>
<li>
<p>Adding $v_j$ to S,and for all vertexes $v_k\in V-S\newline$</p>
</li>
</ol>
<blockquote>
<p>$if\ D[j]+arcs[j][k]&lt;D[k]\newline then\ D[k]=D[j]+arcs[j][k]\newline$</p>
</blockquote>
<ol start="4">
<li>Repeat processing (2),(3), until all vertexes are added into S</li>
</ol>
<h6 id="code-6">code</h6>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">int</span> <span class="n">PathMatrix</span><span class="p">[</span><span class="n">MAX</span><span class="p">][</span><span class="n">MAX</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">int</span> <span class="n">ShortPathTable</span><span class="p">[</span><span class="n">MAX</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">ShortestPath</span><span class="p">(</span><span class="n">MGraph</span> <span class="n">G</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v0</span><span class="p">,</span> <span class="n">PathMatrix</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="n">ShortPathTable</span> <span class="o">&amp;</span><span class="n">D</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">v</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">v</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">final</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">Edge</span><span class="p">[</span><span class="n">v0</span><span class="p">][</span><span class="n">v</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">&lt;</span> <span class="err">∞</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="n">D</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">final</span><span class="p">[</span><span class="n">v0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="n">min</span> <span class="o">=</span> <span class="err">∞</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">final</span><span class="p">[</span><span class="n">w</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">				<span class="k">if</span> <span class="p">(</span><span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">					<span class="n">v</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">					<span class="n">min</span> <span class="o">=</span> <span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">final</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">final</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">G</span><span class="p">.</span><span class="n">Edge</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">]))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="n">D</span><span class="p">[</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">min</span> <span class="o">+</span> <span class="n">G</span><span class="p">.</span><span class="n">Edge</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">w</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">				<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">.</span><span class="n">vexnum</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">					<span class="n">P</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">v</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">				<span class="n">P</span><span class="p">[</span><span class="n">w</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h6 id="time-complexity-analysis-4">Time Complexity Analysis</h6>
<p>For Dijkstra’s Algorithm, the Time complexity is $O(n^2)\newline$</p>
<p>For every vertex $u, v\in V, calculate\ d(u, v)\newline$</p>
<p>Time complexity is $O(n^3)\newline$</p>
]]></description>
</item>
<item>
    <title>Dynamic Programming</title>
    <link>https://Jungle430.github.io/posts/data-structures-and-algorithms/dynamic-programming/</link>
    <pubDate>Tue, 08 Nov 2022 11:39:47 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/data-structures-and-algorithms/dynamic-programming/</guid>
    <description><![CDATA[<h1 id="something-about-dynamic-programming">Something About Dynamic Programming</h1>
<h2 id="fibonacci-by-dynamic-programming">$Fibonacci\ By\ Dynamic\ Programming$</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * In this program, we will calculate the Fibonacci by dynamic programming
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The definition of the Fibonacci: Fibonacci(n) = Fibonacci(n - 1) + Fibonacci(n - 2) (n &gt;= 2)
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Fibonacci(1) = 1 and Fibonacci(0) = 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> * we can find the program is faster than the recursion&#39;s
</span></span></span><span class="line"><span class="cl"><span class="cm"> * T(n) = O(n) and S(n) = O(1)
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">FibonacciByDynamicProgramming</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">f</span><span class="p">{</span><span class="mi">0</span><span class="p">},</span> <span class="n">g</span><span class="p">{</span><span class="mi">1</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">g</span> <span class="o">=</span> <span class="n">g</span> <span class="o">+</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">f</span> <span class="o">=</span> <span class="n">g</span> <span class="o">-</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">64</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fibonacci(&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;) = &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">FibonacciByDynamicProgramming</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="longest-common-subsequence-by-dynamic-programming">$Longest\ Common\ Subsequence\ By\ Dynamic\ Programming$</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * In this program, we will use dynamic programming to find the length
</span></span></span><span class="line"><span class="cl"><span class="cm"> * of the longest common subsequence in two arrays
</span></span></span><span class="line"><span class="cl"><span class="cm"> * T(m + n) = O(m * n) and S(m + n) = O(m * n)
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Example: array1[] = {1, 2, 3, 4, 5, 6, 7}
</span></span></span><span class="line"><span class="cl"><span class="cm"> *          array2[] = {2, 5, 6, 7}
</span></span></span><span class="line"><span class="cl"><span class="cm"> * we should make a matrix(n * m) and make the element in array1 and array2 in the top and left of the matrix
</span></span></span><span class="line"><span class="cl"><span class="cm"> * like this case:        1 2 3 4 5 6 7
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      2 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      5 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      6 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      7 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> * Then we will fill the matrix top line and leftest column
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The measuring of the matrix[1, x] x -&gt; [1, m]:
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The length of the longest common subsequence in array2[0] and the array1[x - 1]
</span></span></span><span class="line"><span class="cl"><span class="cm"> * and in the same way, we can easy to understand the measuring of the matrix[x, 1] x -&gt; [1, n]:
</span></span></span><span class="line"><span class="cl"><span class="cm"> * The length of the longest common subsequence in array1[0] and the array2[x - 1]
</span></span></span><span class="line"><span class="cl"><span class="cm"> * so after fill, the matrix:
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                        1 2 3 4 5 6 7
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      2 0 1 1 1 1 1 1
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      5 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      6 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      7 0 0 0 0 0 0 0
</span></span></span><span class="line"><span class="cl"><span class="cm"> * the base elements are ok, so we will use dynamic programming
</span></span></span><span class="line"><span class="cl"><span class="cm"> * if array1[x] == array2[y],we can know that it is form the &#34;decreasing and conquer&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm"> * so we should make matrix[y - 1, x - 1] = matrix[y - 2, x - 2] + 1
</span></span></span><span class="line"><span class="cl"><span class="cm"> * else array1[x] != array2[y],we can know that it is form the &#34;divide and conquer&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm"> * so we should make matrix[y - 1, x - 1] = max(matrix[y - 2, x - 1], matrix[y - 1, x - 2]
</span></span></span><span class="line"><span class="cl"><span class="cm"> * After the dynamic programming, the matrix:
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                      1 2 3 4 5 6 7
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    2 0 1 1 1 1 1 1
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    5 0 1 1 1 2 2 2
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    6 0 1 1 1 2 3 3
</span></span></span><span class="line"><span class="cl"><span class="cm"> *                    7 0 1 1 1 2 3 4
</span></span></span><span class="line"><span class="cl"><span class="cm"> * until to matrix[n, m] we find the length of the longest common subsequence of array1 and array2
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;array&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//The algorithm
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">N1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">N2</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">LongestCommonSubsequenceByDynamicProgramming</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">N1</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">array1</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">N2</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">array2</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">,</span> <span class="n">N1</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">N2</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">flag</span><span class="p">{</span><span class="nb">false</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">||</span> <span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">array2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="n">matrix</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">flag</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span> <span class="o">||</span> <span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">array1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">flag</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">N1</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">array1</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span>
</span></span><span class="line"><span class="cl">                <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">max</span><span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">matrix</span><span class="p">[</span><span class="n">N2</span> <span class="o">-</span> <span class="mi">1</span><span class="p">][</span><span class="n">N1</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//text code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">7</span><span class="o">&gt;</span> <span class="n">v1</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="mi">4</span><span class="o">&gt;</span> <span class="n">v2</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="mi">7</span><span class="o">&gt;</span> <span class="n">c1</span><span class="p">{</span><span class="sc">&#39;p&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;g&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;m&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="mi">9</span><span class="o">&gt;</span> <span class="n">c2</span><span class="p">{</span><span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="sc">&#39;l&#39;</span><span class="p">,</span> <span class="sc">&#39;g&#39;</span><span class="p">,</span> <span class="sc">&#39;o&#39;</span><span class="p">,</span> <span class="sc">&#39;r&#39;</span><span class="p">,</span> <span class="sc">&#39;i&#39;</span><span class="p">,</span> <span class="sc">&#39;t&#39;</span><span class="p">,</span> <span class="sc">&#39;h&#39;</span><span class="p">,</span> <span class="sc">&#39;m&#39;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">LongestCommonSubsequenceByDynamicProgramming</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">LongestCommonSubsequenceByDynamicProgramming</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>String</title>
    <link>https://Jungle430.github.io/posts/data-structures-and-algorithms/string/</link>
    <pubDate>Sun, 06 Nov 2022 22:37:05 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/data-structures-and-algorithms/string/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="string">String</h2>
<h3 id="structurerightarrow-list">$Structure\rightarrow list$</h3>
<ol>
<li>linked String</li>
<li>Arrayed String</li>
</ol>
<h3 id="general-concepts-of-string">General Concepts of String</h3>
<ol>
<li>$Null\ String(\emptyset)：Nothing\ in\ the\ string, the\ length\ is\ zero.$</li>
<li>$Blank(Space)string：Only\ includes\ one\ or\ more\ blanks(spaces)in\ the\ string.$</li>
<li>$Substring: sub-sequence\ of\ one\ string.$</li>
</ol>
<h3 id="adt">ADT</h3>
<p>{</p>
<pre><code>ADT String {Data Object：D＝{ ai | ai∈CharacterSet,i=1,2,...n, n≥0 }
Data Relationship：R1＝{ &lt; ai-1, ai &gt; | ai-1, ai∈D,i=2,...,n }
Operation： ……
</code></pre>
<p>} ADT String</p>
<h3 id="operations">Operations</h3>
<p>{</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">    <span class="n">StrAssign</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="n">chars</span><span class="p">)</span> <span class="c1">//string assignment
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">chars</span> <span class="n">are</span> <span class="n">character</span> <span class="n">constant</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">assign</span> <span class="n">chars</span> <span class="n">to</span> <span class="n">T</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrCopy</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">,</span> <span class="n">S</span><span class="p">)</span> <span class="c1">//String Copy
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">string</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Copy</span> <span class="n">S</span> <span class="n">string</span> <span class="n">to</span> <span class="n">T</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">DestroyString</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Destroy</span> <span class="n">S</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ClearString</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Change</span> <span class="n">S</span> <span class="n">into</span> <span class="n">Null</span> <span class="n">string</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrEmpty</span> <span class="p">(</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">If</span> <span class="n">S</span> <span class="n">is</span> <span class="n">null</span> <span class="n">string</span><span class="err">，</span><span class="k">return</span> <span class="n">TRUE</span><span class="err">，</span><span class="n">otherwise</span><span class="p">,</span> <span class="k">return</span> <span class="n">FALSE</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrCompare</span> <span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span> <span class="c1">//String comparison
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">S</span> <span class="n">and</span> <span class="n">T</span> <span class="n">Strings</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">If</span> <span class="n">S</span><span class="o">&gt;</span><span class="n">T</span><span class="err">，</span><span class="n">the</span> <span class="k">return</span> <span class="n">value</span> <span class="n">is</span> <span class="n">greater</span> <span class="n">than</span> <span class="mi">0</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">S</span><span class="o">=</span><span class="n">T</span><span class="err">，</span><span class="n">the</span> <span class="k">return</span> <span class="n">value</span> <span class="n">is</span> <span class="mi">0</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">S</span><span class="o">&lt;</span><span class="n">T</span><span class="err">，</span><span class="n">the</span> <span class="k">return</span> <span class="n">value</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="mf">0.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrLength</span> <span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="c1">// get string length
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span> <span class="err">：</span><span class="n">S</span> <span class="n">String</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">The</span> <span class="n">number</span> <span class="n">of</span> <span class="n">characters</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Concat</span><span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="p">,</span><span class="n">S1</span><span class="p">,</span><span class="n">S2</span><span class="p">)</span> <span class="c1">//String Concatenation
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S1</span> <span class="n">and</span> <span class="n">S2</span><span class="err">。</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Concatenate</span> <span class="n">S1</span> <span class="n">and</span> <span class="n">S2</span> <span class="n">and</span> <span class="n">put</span> <span class="n">the</span> <span class="k">new</span> <span class="n">string</span> <span class="n">into</span> <span class="n">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">SubString</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">Sub</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span> <span class="c1">//Get substring
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span><span class="err">，</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="n">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">len</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">-</span> <span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Return</span> <span class="n">substring</span> <span class="n">of</span> <span class="n">string</span><span class="p">,</span> <span class="n">which</span> <span class="n">from</span> <span class="n">pos</span> <span class="n">to</span> <span class="n">pos</span> <span class="o">+</span> <span class="n">len</span> <span class="o">-</span> <span class="mi">1</span> <span class="n">position</span> <span class="n">of</span> <span class="n">S</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Index</span> <span class="p">(</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span> <span class="c1">//String index
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span> <span class="n">and</span> <span class="n">T</span><span class="err">，</span><span class="n">T</span> <span class="n">is</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span><span class="p">,</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nl">Output</span><span class="p">:</span> <span class="n">If</span> <span class="n">the</span> <span class="n">there</span> <span class="n">is</span> <span class="n">a</span> <span class="n">substring</span> <span class="n">T</span> <span class="n">in</span> <span class="n">S</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">the</span> <span class="n">position</span> <span class="n">of</span> <span class="n">sub</span><span class="o">-</span><span class="n">string</span> <span class="n">T</span> <span class="n">occurs</span> <span class="n">first</span> <span class="n">time</span> <span class="n">after</span> <span class="n">pos</span><span class="p">,</span> <span class="n">otherwise</span> <span class="k">return</span> <span class="mf">0.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Replace</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">V</span><span class="p">)</span> <span class="c1">//String replacement
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span><span class="p">,</span> <span class="n">T</span> <span class="n">and</span> <span class="n">V</span><span class="p">,</span> <span class="n">T</span> <span class="n">is</span> <span class="n">non</span><span class="o">-</span><span class="n">empty</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Replace</span> <span class="n">non</span><span class="o">-</span><span class="n">overlapped</span> <span class="n">substring</span> <span class="n">T</span> <span class="n">of</span> <span class="n">S</span> <span class="n">with</span> <span class="n">V</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrInsert</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span> <span class="n">and</span> <span class="n">T</span><span class="err">，</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="err">＋</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Insert</span> <span class="n">String</span> <span class="n">T</span> <span class="n">before</span> <span class="n">the</span> <span class="n">pos</span> <span class="n">character</span> <span class="n">of</span> <span class="n">string</span> <span class="n">S</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">StrDelete</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Initial</span><span class="err">：</span><span class="n">String</span> <span class="n">S</span> <span class="err">，</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="n">StrLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="o">-</span> <span class="n">len</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Output</span><span class="err">：</span><span class="n">Delete</span> <span class="n">a</span> <span class="n">sub</span><span class="o">-</span><span class="n">string</span> <span class="n">with</span> <span class="n">len</span> <span class="n">length</span> <span class="n">from</span> <span class="n">pos</span> <span class="n">character</span> <span class="n">in</span> <span class="n">string</span> <span class="n">S</span><span class="p">.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>}</p>
<blockquote>
<p>The StrAssign,Strcopy,StrCompare,StrLength,Concat and SubString are called as Minimum Operation Set of string type.</p>
<p>That is, these operations can not be implemented with other string operations, But the other string operations can be implemented with these 6 basic string operations.</p>
</blockquote>
<h3 id="string-pattern-matching">String Pattern Matching</h3>
<h4 id="forcematch">ForceMatch</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Rank</span> <span class="nf">ForceMatch</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">n</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span> <span class="o">-=</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$n = T.length(),and\ m = P.length(), T=O(mn)$</p>
<h4 id="kmp">KMP</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">*</span><span class="nf">BuildNext</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">N</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">m</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">N</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">t</span><span class="p">])</span> <span class="o">?</span> <span class="n">N</span><span class="p">[</span><span class="o">++</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">++</span><span class="nl">t</span> <span class="p">:</span> <span class="n">t</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="nf">KMPFirst</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="n">BuildNext</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">n</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$n = T.length(),and\ m = P.length(), T=O(m+n)$</p>
<h4 id="optimization-kmp">Optimization KMP</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">int</span> <span class="o">*</span><span class="nf">buildNext</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">N</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">m</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">N</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">t</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">N</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">?</span> <span class="n">N</span><span class="p">[</span><span class="n">t</span><span class="p">]</span> <span class="o">:</span> <span class="n">t</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span> <span class="o">=</span> <span class="n">N</span><span class="p">[</span><span class="n">t</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="nf">KMPEnd</span><span class="p">(</span><span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">P</span><span class="p">,</span> <span class="k">const</span> <span class="n">String</span> <span class="o">&amp;</span><span class="n">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="o">*</span><span class="n">next</span> <span class="o">=</span> <span class="n">buildNext</span><span class="p">(</span><span class="n">P</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">n</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">m</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">P</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">next</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="supplement">supplement</h4>
<p>for ppt use python</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">Str</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">length</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">Str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">Str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">Str</span><span class="p">[</span><span class="n">t</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="n">Next</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">t</span> <span class="o">=</span> <span class="n">Next</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">k</span><span class="p">:</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Next</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Next</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>in list</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">KMP</span><span class="p">(</span><span class="n">Str</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">Str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">Next</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">_size</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="n">j</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">Str</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">Str</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">Str</span><span class="p">[</span><span class="n">t</span><span class="p">]:</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span> <span class="o">=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">j</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="n">Next</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">t</span> <span class="o">=</span> <span class="n">Next</span><span class="p">[</span><span class="n">t</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Next</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
    <title>Stack and Queue</title>
    <link>https://Jungle430.github.io/posts/data-structures-and-algorithms/stack-and-queue/</link>
    <pubDate>Sun, 06 Nov 2022 22:36:10 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/data-structures-and-algorithms/stack-and-queue/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="stack-and-queue">Stack and Queue</h2>
<h3 id="stack">Stack</h3>
<p>Definition: Lists with the restriction that insertions
and deletions can be performed in only one position, namely,
the end of the list. Access the list from the top.</p>
<ol>
<li>First in, last out (FILO) lists</li>
<li>Or last in, first out (LIFO) lists.</li>
</ol>
<h4 id="basic-concepts">Basic Concepts</h4>
<blockquote>
<p>Top: the end of the list, namely, the operation end.</p>
<p>Bottom: the head of the list</p>
<p>Push: Insert an element into the end of the list.</p>
<p>Pop: Delete an element from the end of the list.</p>
</blockquote>
<p>$Bottom\rightarrow [a_1] [a_2]&hellip;&hellip;[a_{n-1}] [a_n]\leftarrow Top$</p>
<p>$Operation$</p>
<p>$[a_1] [a_2]&hellip;&hellip;[a_{n-1}] [a_n]^{\rightarrow Pop}_{\leftarrow Push}$</p>
<h4 id="adt">ADT</h4>
<p>ADT Stack {</p>
<pre><code>Data Object：D = {ai | ai∈ElementSet, (i=1,2,…,n, n≥1)}
Data Relationship：R = {＜ai-1,ai＞|ai-1,ai ∈ D, (i=2,3,…,n)}
assume an is top, a1 is bottom.
</code></pre>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl">    <span class="c1">//Basic Operations:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">InitStack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="c1">//Create an empty Stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">DestroyStack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="c1">//If S exists, Destroy it.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ClearStack</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="c1">//If S exists, make the Stack empty. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StackEmpty</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="c1">//if S is empty, return TRUE, otherwise return FALSE.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StackLength</span><span class="p">(</span><span class="n">S</span><span class="p">)</span> <span class="c1">//return the length of Stack.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">GetTop</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="c1">// If S exists and non-empty, return the top element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span><span class="n">e</span><span class="p">)</span> <span class="c1">// Insert e as the top element.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Pop</span><span class="p">(</span><span class="o">&amp;</span><span class="n">S</span><span class="p">,</span><span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="c1">// If Stack exists and non-empty, set the top element to e, then delete the top element. 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">StackTraverse</span><span class="p">(</span><span class="n">S</span><span class="p">,</span><span class="n">visit</span><span class="p">())</span> <span class="c1">//visit all of elements in the Stack.
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>}</p>
<p>$!if\ input\ is {&hellip;a_i, &hellip; a_j, &hellip;a_k, &hellip;}, then\ the\ output\ is\ impossible {&hellip;a_k, &hellip;a_i, &hellip;a_j, &hellip;}$</p>
<h4 id="stack-mixed-wash">Stack mixed wash</h4>
<blockquote>
<p>$if\ the\ stack.size()\ is\ n,then\ the\ size\ of\ Stack\ mixed\ wash\ sp(n)\ is\ Catalan(n)=\frac{(2n)!}{(n + 1)!n!}, and\ sp(n) = \sum_{k=1}^nsp(n - k)*sp(k - 1), base:\ sp(1) = 1$</p>
</blockquote>
<h4 id="array-implementation-of-stacks">Array implementation of stacks</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">STACK_INIT_SIZE</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">STACKINCREMENT</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SElemType</span> <span class="o">*</span><span class="n">base</span><span class="p">;</span> <span class="c1">//Bottom pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SElemType</span> <span class="o">*</span><span class="n">top</span><span class="p">;</span> <span class="c1">//Top pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">stacksize</span><span class="p">;</span> <span class="c1">//max capacity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span> <span class="n">SqStack</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>Bottom Pointer base,always points to the bottom;</p>
<p>Top pointer, is on the top of the Stack.</p>
</blockquote>
<blockquote>
<p>When top=M, Stack is full，If run push, then overflow.</p>
<p>When top=base, Stack is empty，If run Pop, then underflow;</p>
</blockquote>
<p>Initialize Stack</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">InitStack</span> <span class="p">(</span><span class="n">SqStack</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">)</span> <span class="p">{</span><span class="c1">// Create an empty Stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//Allocate memory
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="o">=</span><span class="p">(</span><span class="n">SElemType</span><span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="n">STACK_INIT_SIZE</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SElemType</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">)</span>    
</span></span><span class="line"><span class="cl">        <span class="n">exit</span> <span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span> <span class="c1">//if allocate failed, then assignment failed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//initialize top pointer(equal to base)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span> <span class="o">=</span> <span class="n">STACK_INIT_SIZE</span><span class="p">;</span><span class="c1">//initialize stack&#39;s max capacity
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Push an element into the stack:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Push</span> <span class="p">(</span><span class="n">SqStack</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">SElemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//Stack Full，Extend space of the stack
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">-</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span> <span class="o">&gt;=</span> <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span><span class="p">.</span><span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="n">SElemType</span> <span class="o">*</span><span class="p">)</span> <span class="n">realloc</span> <span class="p">(</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">,(</span><span class="n">S</span><span class="p">.</span><span class="n">stacksize</span> <span class="o">+</span> <span class="n">STACKINCREMENT</span><span class="p">)</span> <span class="o">*</span><span class="k">sizeof</span> <span class="p">(</span><span class="n">SElemType</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">exit</span> <span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span> <span class="c1">//Assignment failed.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">=</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span> <span class="o">+</span> <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">S</span><span class="p">.</span><span class="n">stacksize</span> <span class="o">+=</span> <span class="n">STACKINCREMENT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>   
</span></span><span class="line"><span class="cl">    <span class="c1">//push the element
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">*</span><span class="n">S</span><span class="p">.</span><span class="n">top</span><span class="o">++</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Pop the top of the stack</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Pop</span> <span class="p">(</span><span class="n">SqStack</span> <span class="o">&amp;</span><span class="n">S</span><span class="p">,</span> <span class="n">SElemType</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="c1">// If Stack is Non-empty，let top element to e，then delete
</span></span></span><span class="line"><span class="cl"><span class="c1">// the top element, return OK, otherwise return ERROR.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">(</span><span class="n">S</span><span class="p">.</span><span class="n">top</span> <span class="o">==</span> <span class="n">S</span><span class="p">.</span><span class="n">base</span><span class="p">)</span>   
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="o">*--</span><span class="n">S</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="linked-list-implementation-of-stacks">Linked List implementation of stacks</h4>
<p>structure of node:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">Snode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SElemType</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">Snode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Snode</span><span class="p">,</span> <span class="o">*</span><span class="n">LinkStack</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Initialize Stack</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">InitlinkStack</span><span class="p">(</span><span class="n">LinkStack</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// InitlinkStack
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>memory structure</p>
<p>$top\rightarrow [a_n]\rightarrow [a_{n-1}]\rightarrow&hellip;&hellip;\rightarrow[a_1]\rightarrow null$</p>
<p>push:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Push</span><span class="p">(</span><span class="n">LinkStack</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="n">SElemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">Snode</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Snode</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// Push;
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>pop:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">Pop</span><span class="p">(</span><span class="n">LinkStack</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="n">SElemType</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">s</span><span class="p">)</span> <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// Pop;
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="application-of-stack">Application of Stack</h3>
<h4 id="balancing-symbols">Balancing Symbols</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">algorithm</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">exp</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LinkedStack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">exp</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span> <span class="o">||</span> <span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">((</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;)&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">exp</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">stack</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Fail!&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">?</span> <span class="s">&#34;Success!&#34;</span> <span class="o">:</span> <span class="s">&#34;Fail!&#34;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="conversion">Conversion</h4>
<p>Example: 10-&gt;8</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">algorithm</span><span class="p">(</span><span class="kt">int</span> <span class="n">Number</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">LinkedStack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">do</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">stack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">Number</span> <span class="o">&amp;</span> <span class="mh">0x07</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Number</span> <span class="o">&gt;&gt;=</span> <span class="mi">3</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">Number</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">stack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="evaluate-postfix-expression">Evaluate postfix expression</h4>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">double</span> <span class="nf">evaluate</span> <span class="p">(</span> <span class="kt">char</span><span class="o">*</span> <span class="n">S</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">RPN</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//对（已剔除白空格的）表达式S求值，并转换为逆波兰式RPN
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">opnd</span><span class="p">;</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">optr</span><span class="p">;</span> <span class="c1">//运算数栈、运算符栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">optr</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="sc">&#39;\0&#39;</span> <span class="p">);</span> <span class="c1">//尾哨兵&#39;\0&#39;也作为头哨兵首先入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span> <span class="p">(</span> <span class="o">!</span><span class="n">optr</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//在运算符栈非空之前，逐个处理表达式中各字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="k">if</span> <span class="p">(</span> <span class="n">isdigit</span> <span class="p">(</span> <span class="o">*</span><span class="n">S</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//若当前字符为操作数，则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="n">readNumber</span> <span class="p">(</span> <span class="n">S</span><span class="p">,</span> <span class="n">opnd</span> <span class="p">);</span> <span class="n">append</span> <span class="p">(</span> <span class="n">RPN</span><span class="p">,</span> <span class="n">opnd</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="p">);</span> <span class="c1">//读入操作数，并将其接至RPN末尾
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>       <span class="p">}</span> <span class="k">else</span> <span class="c1">//若当前字符为运算符，则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="k">switch</span> <span class="p">(</span> <span class="n">priority</span> <span class="p">(</span> <span class="n">optr</span><span class="p">.</span><span class="n">top</span><span class="p">(),</span> <span class="o">*</span><span class="n">S</span> <span class="p">)</span> <span class="p">)</span> <span class="p">{</span> <span class="c1">//视其与栈顶运算符之间优先级高低分别处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>             <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span> <span class="c1">//栈顶运算符优先级更低时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="n">optr</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="o">*</span><span class="n">S</span> <span class="p">);</span> <span class="n">S</span><span class="o">++</span><span class="p">;</span> <span class="c1">//计算推迟，当前运算符进栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">case</span> <span class="sc">&#39;=&#39;</span><span class="o">:</span> <span class="c1">//优先级相等（当前运算符为右括号或者尾部哨兵&#39;\0&#39;）时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>               <span class="n">optr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="n">S</span><span class="o">++</span><span class="p">;</span> <span class="c1">//脱括号并接收下一个字符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">             <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="c1">//栈顶运算符优先级更高时，可实施相应的计算，并将结果重新入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="kt">char</span> <span class="n">op</span> <span class="o">=</span> <span class="n">optr</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="n">append</span> <span class="p">(</span> <span class="n">RPN</span><span class="p">,</span> <span class="n">op</span> <span class="p">);</span> <span class="c1">//栈顶运算符出栈并续接至RPN末尾
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span> <span class="p">(</span> <span class="sc">&#39;!&#39;</span> <span class="o">==</span> <span class="n">op</span> <span class="p">)</span> <span class="c1">//若属于一元运算符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="n">opnd</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="n">calcu</span> <span class="p">(</span> <span class="n">op</span><span class="p">,</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">()</span> <span class="p">)</span> <span class="p">);</span> <span class="c1">//则取一个操作数，计算结果入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">else</span> <span class="p">{</span> <span class="c1">//对于其它（二元）运算符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="kt">double</span> <span class="n">pOpnd2</span> <span class="o">=</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">(),</span> <span class="n">pOpnd1</span> <span class="o">=</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="c1">//取出后、前操作数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                   <span class="n">opnd</span><span class="p">.</span><span class="n">push</span> <span class="p">(</span> <span class="n">calcu</span> <span class="p">(</span> <span class="n">pOpnd1</span><span class="p">,</span> <span class="n">op</span><span class="p">,</span> <span class="n">pOpnd2</span> <span class="p">)</span> <span class="p">);</span> <span class="c1">//实施二元计算，结果入栈
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">             <span class="p">}</span>
</span></span><span class="line"><span class="cl">             <span class="k">default</span> <span class="o">:</span> <span class="n">exit</span> <span class="p">(</span> <span class="o">-</span><span class="mi">1</span> <span class="p">);</span> <span class="c1">//逢语法错误，不做处理直接退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>          <span class="p">}</span><span class="c1">//switch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span><span class="c1">//while
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">opnd</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="c1">//弹出并返回最后的计算结果
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="infix-to-postfix">infix to postfix</h4>
<p>Precedence:</p>
<ol>
<li>&lsquo;(&rsquo; and &lsquo;)&rsquo; have the highest precedence</li>
<li>&lsquo;*&rsquo; and &lsquo;/ &lsquo;have lower precedence than &lsquo;(&rsquo; and &lsquo;)&rsquo;</li>
<li>&lsquo;+&rsquo; and &lsquo;-&rsquo; have lower precedence than &lsquo;*&rsquo; and &lsquo;/&rsquo;</li>
</ol>
<blockquote>
<p>Converting infix expressions into postfix</p>
<p>$Infix: [A * B + C * D]$</p>
<p>$Postfix: [A B * C D * +]$</p>
</blockquote>
<p>Example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">algorithm</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="o">&amp;</span><span class="n">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">array</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="mi">100</span><span class="o">&gt;</span><span class="p">,</span> <span class="mi">100</span><span class="o">&gt;</span> <span class="n">matrix</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;*&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;/&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;*&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;/&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">matrix</span><span class="p">[</span><span class="sc">&#39;^&#39;</span><span class="p">][</span><span class="sc">&#39;^&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">length</span> <span class="o">=</span> <span class="n">string</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">LinkedStack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">linkedStack</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">iteration</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;F&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">iteration</span> <span class="o">+=</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">linkedStack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">matrix</span><span class="p">[</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="n">linkedStack</span><span class="p">.</span><span class="n">top</span><span class="p">()])</span>
</span></span><span class="line"><span class="cl">                    <span class="n">iteration</span> <span class="o">+=</span> <span class="n">linkedStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span>
</span></span><span class="line"><span class="cl">                    <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="n">linkedStack</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iteration</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">linkedStack</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">iteration</span> <span class="o">+=</span> <span class="n">linkedStack</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iteration</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="function-calls">Function Calls</h4>
<p>When a function is called</p>
<blockquote>
<p>• Local variables and status should be saved</p>
</blockquote>
<p>When the function returns</p>
<blockquote>
<p>• Saved values needs to be restored
In what order?</p>
</blockquote>
<p>Structure:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">main</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">f</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">g</span><span class="o">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">h</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">g</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">h</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>$bottom\rightarrow[main()]\rightarrow[f()]\rightarrow[g()]\rightarrow top$</p>
<p>$next:pop\ g(), push\ h()$</p>
<p>$bottom\rightarrow[main()]\rightarrow[f()]\rightarrow[h()]\rightarrow top$</p>
<h4 id="recursion">Recursion</h4>
<blockquote>
<p>Definition: Recursion simply means a function that calls itself directly or indirectly.</p>
</blockquote>
<p>Example: Find the last element of a list</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">Find</span> <span class="p">(</span><span class="n">LinkList</span> <span class="n">L</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">L</span><span class="err">→</span><span class="n">next</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="n">L</span><span class="err">→</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="n">Find</span><span class="p">(</span><span class="n">L</span><span class="err">→</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The general form of a recursive algorithm</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">p</span> <span class="o">(</span><span class="n">parameters</span><span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">(</span><span class="n">stopping</span> <span class="n">condition</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">base</span> <span class="k">case</span> <span class="n">that</span> <span class="n">is</span> <span class="n">processed</span> <span class="n">without</span> <span class="n">recursion</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="nf">p</span><span class="o">(</span><span class="n">smaller</span> <span class="n">parameters</span><span class="o">);</span> <span class="c1">//recursive case
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Step to make a recursive algorithm:</p>
<ol>
<li>Find the key step. Begin by asking yourself, “How can this problem be divided into parts?” or “How will the key step in the middle be done?”</li>
<li>Find a stopping rule. This stopping rule is usually the small,special case that is trivial or easy to handle without recursion.</li>
<li>Outline your algorithm. Combine the stopping rule and the key step, using an if statement to select between them.</li>
<li>Check termination. Verify that the recursion will always terminate. Be sure that your algorithm correctly handles extreme cases</li>
</ol>
<h3 id="queue">Queue</h3>
<h4 id="features">Features</h4>
<blockquote>
<p>insertions at one end</p>
<p>deletions at another end</p>
<p>FIFO (First In First Out)</p>
</blockquote>
<h4 id="operations">Operations</h4>
<p>{</p>
<pre><code>Enqueue(element):insert an element at the end of the list(rear)
Dequeue:delete the element at the start of the list (front)
IsEmpty:check whether the queue has an element or not
</code></pre>
<p>}</p>
<h4 id="implementation-of-queue">Implementation of Queue</h4>
<blockquote>
<p>Linked list implementation of queues</p>
<p>keep two pointers the front and the rear</p>
<blockquote>
<p>• Front is the head of the linked list</p>
<p>• Rear is the tail of the linked list</p>
</blockquote>
<p>Array implementation of queues</p>
<blockquote>
<p>keep positions of the front and the rear. When one reaches to the end of the Array, it starts over from the beginning</p>
<p>• Array is used as a circular array</p>
</blockquote>
<p>keep track of the size of queue</p>
</blockquote>
<p>Linked Queue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="nc">QNode</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">QElemType</span> <span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="nc">QNode</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="n">Qnode</span><span class="p">,</span> <span class="o">*</span><span class="n">QueuePtr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">QueuePtr</span> <span class="n">front</span><span class="p">;</span> <span class="c1">// front pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">QueuePtr</span> <span class="n">rear</span><span class="p">;</span> <span class="c1">// rear pointer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span><span class="n">LinkQueue</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>memory structure</p>
<p>$front\rightarrow [head]\rightarrow [X]\rightarrow [Y]^{\rightarrow null}_{\leftarrow rear}$</p>
<p>Initialization of a queue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">InitQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="p">(</span><span class="n">QueuePtr</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">QNode</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">-&gt;</span> <span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// InitQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Destroy a Queue</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">DestroyQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">-&gt;</span> <span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">free</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// DestroyQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>push an element</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">EnQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">,</span> <span class="n">QelemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span> <span class="n">QueuePtr</span> <span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">QNode</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">p</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">(</span><span class="n">OVERFLOW</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// EnQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>pop an element</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="n">Status</span> <span class="nf">DeQueue</span><span class="p">(</span><span class="n">LinkQueue</span> <span class="o">&amp;</span><span class="n">Q</span><span class="p">,</span> <span class="n">QelemType</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">){</span> 
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">front</span> <span class="o">==</span> <span class="n">Q</span><span class="p">.</span><span class="n">rear</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">e</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">==</span> <span class="n">p</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">Q</span><span class="p">.</span><span class="n">rear</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">front</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// DeQueue
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Array Queue</p>
<p>Avoid false overflow</p>
<ol>
<li>$move\ element$</li>
<li>$use\ array\ as\ a\ circle, empty\rightarrow(r - l) == 0, and\ full\rightarrow (rear + 1) % maxlength == front$</li>
</ol>
<blockquote>
<p>Enqueue</p>
<blockquote>
<p>Increment QueueSize</p>
<p>Queue [rear] = X</p>
<p>Increment rear</p>
</blockquote>
<p>Dequeue</p>
<blockquote>
<p>Decrement QueueSize</p>
<p>Increment front</p>
<p>return Queue[front-1]</p>
</blockquote>
</blockquote>
<p>Application:</p>
<blockquote>
<p>Print jobs</p>
<p>Computer networks</p>
<p>OS</p>
<p>Real-life waiting lines</p>
</blockquote>
]]></description>
</item>
<item>
    <title>List</title>
    <link>https://Jungle430.github.io/posts/data-structures-and-algorithms/list/</link>
    <pubDate>Sun, 06 Nov 2022 22:35:11 &#43;0800</pubDate><author>1239946358@qq.com (Jungle)</author><guid>https://Jungle430.github.io/posts/data-structures-and-algorithms/list/</guid>
    <description><![CDATA[<h1 id="data-structure">Data Structure</h1>
<h2 id="list">List</h2>
<h3 id="definition">Definition</h3>
<p>A list is a finite sequence of N elements</p>
<p>$write\ as\newline$
$L = (a_1, a_2, a_3，…a_n)\newline$</p>
<p>$The\ size\ of\ this\ list\ is\ n\newline$</p>
<p>$n=0 \rightarrow empty\ list\newline$</p>
<p>element</p>
<ol>
<li>The first element(No predecessor),called &ldquo;head&rdquo;</li>
<li>The ith element(has only one predecessor and only one successor)</li>
<li>The last element(No successor),called &ldquo;tail&rdquo;</li>
</ol>
<h3 id="adt">ADT</h3>
<p>ADT List {</p>
<pre><code>Data object：D = {ai | ai∈Elements, (i=1,2,…,n, n≥0)}

Data relationship ： R1 = { ＜ ai-1,ai ＞ |ai-1,ai ∈ D,
(i=2,3,…,n) }

Operations：
• InitList(&amp;L);
• DestroyList(&amp;L);
• ListInsert(&amp;L,i,e); 
• ListDelete(&amp;L,i,&amp;e);
……and so on
</code></pre>
<p>} ADT List</p>
<h3 id="operation">Operation</h3>
<p>{</p>
<pre><code>InitList(&amp;L):Create a empty list
DestroyList(&amp;L):Delete a list(L has been initialized)
ClearList(&amp;L):make L be an empty list(L has been initialized)

ListLength(L):return the size of elements in the list(L has been initialized)
ListEmpty(L):return if the list is an empty list(L has been initialized)

GetElem(L, i, &amp;e): 
make e equaled to the ith element in the list(L has been initialized and 1 &lt;= i &lt;= ListLength(L))
LocateElem(L, e, compare()): 
return the rank that the rank of the element is the first element which compare(element[rank], e) is true(L has been initialized),
if no element satisfy it, return 0

PriorElem(L, cur_e, &amp;pre_e): 
make the pre_e equal the predecessor of the element which is the first which equal to cur_e, or return FAIL(L has been initialized)
NextElem(L, cur_e, &amp;next_e):
make the next_e equal the successor of the element which is the first which equal to cur_e, or return FAIL(L has been initialized)

ListInsert(&amp;L, i, e): 
insert the element in the ith rank of the list(L has been initialized)
ListDelete(&amp;L, i, &amp;e):
delete the ith element in the list(L has been initialized and not be empty)

ListTraverse(&amp;L, visit()):
    for (begin, end)
        visit(list[rank]_data)
(L has been initialized)
</code></pre>
<p>}</p>
<p>Example: make $ListA \bigcup ListB$</p>
<h3 id="the-code">The code</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">union</span><span class="p">(</span><span class="n">List</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="n">List</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">La_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Lb_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">Lb_len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">GetElem</span><span class="p">(</span><span class="n">Lb_len</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">LocateElem</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">equal</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">            <span class="n">ListInsert</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">++</span><span class="n">La_len</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Merge List</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">MergeList</span><span class="p">(</span><span class="n">List</span> <span class="n">La</span><span class="p">,</span> <span class="n">List</span> <span class="n">Lb</span><span class="p">,</span> <span class="n">List</span> <span class="o">&amp;</span><span class="n">Lc</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">InitList</span><span class="p">(</span><span class="n">Lc</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">La_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">La</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">Lb_len</span> <span class="o">=</span> <span class="n">ListLength</span><span class="p">(</span><span class="n">Lb</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">While</span> <span class="p">((</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">La_len</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">Lb_len</span><span class="p">)){</span> <span class="c1">//La和Lb均非空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">GetElem</span><span class="p">(</span><span class="n">La</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">ai</span><span class="p">);</span> <span class="n">GetElem</span><span class="p">(</span><span class="n">Lb</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">bj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">ai</span> <span class="o">&lt;=</span> <span class="n">bj</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span> <span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">ai</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">                <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span> <span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">bj</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">                <span class="o">++</span><span class="n">j</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="n">La_len</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">GetElem</span><span class="p">(</span><span class="n">La</span><span class="p">,</span><span class="n">i</span><span class="o">++</span><span class="p">,</span><span class="n">ai</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">            <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span> <span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">ai</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span> <span class="p">(</span><span class="n">j</span> <span class="o">&lt;=</span> <span class="n">Lb_len</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">GetElem</span><span class="p">(</span><span class="n">Lb</span><span class="p">,</span><span class="n">j</span><span class="o">++</span><span class="p">,</span><span class="n">bj</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">            <span class="n">ListInsert</span><span class="p">(</span><span class="n">Lc</span><span class="p">,</span><span class="o">++</span><span class="n">k</span><span class="p">,</span> <span class="n">bj</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>   
</span></span><span class="line"><span class="cl"><span class="p">}</span><span class="c1">// MergeList
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="implementation-of-lists">Implementation of Lists</h3>
<h4 id="array-implementation-of-lists">Array implementation of lists</h4>
<p>Using consecutive storage units to store elements of a list,the elements are stored in the logic order</p>
<blockquote>
<p>k&mdash;- the memory space size for one element</p>
<blockquote>
<p>The address of the (i+1)th element-&gt;Loc(ai+1) = Loc(ai) + k</p>
<p>Loc(a1)&mdash;-base address of the list</p>
<p>The address of the ith element:-&gt;Loc(ai) = Loc(a1) + (i-1)*k</p>
</blockquote>
</blockquote>
<p>$logic\ Element: [a_0, a_1, &hellip;, a_n]\newline$
$Physical\ Element:{[locate(a_0)]\ [locate(a_1)]\ &hellip;\ [locate(a_n)]}\newline$</p>
<p>$!!!\ Storage\ structure: random\ storage$</p>
<p>about data</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Vector</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">*</span><span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_size</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_capacity</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>supplement expend and shrink</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">expand</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_capacity</span> <span class="o">&gt;=</span> <span class="n">AUTO_INITIALIZER</span> <span class="o">&amp;&amp;</span> <span class="n">_size</span> <span class="o">&lt;</span> <span class="n">_capacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_capacity</span> <span class="o">&lt;</span> <span class="n">AUTO_INITIALIZER</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_capacity</span> <span class="o">=</span> <span class="n">AUTO_INITIALIZER</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_size</span> <span class="o">&gt;=</span> <span class="n">_capacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_capacity</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="o">*</span><span class="n">OldData</span> <span class="o">=</span> <span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">_capacity</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">OldData</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span><span class="p">[]</span><span class="n">OldData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">shrink</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_capacity</span> <span class="o">&lt;</span> <span class="n">AUTO_INITIALIZER</span> <span class="o">||</span> <span class="n">_size</span> <span class="o">&gt;=</span> <span class="n">_capacity</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">_capacity</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span> <span class="o">*</span><span class="n">OldData</span> <span class="o">=</span> <span class="n">_data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">_data</span> <span class="o">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">_capacity</span><span class="p">]{};</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">OldData</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">delete</span><span class="p">[]</span><span class="n">OldData</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>T(n) = O(n)</p>
<p>insert</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">insert</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">Val</span><span class="p">,</span> <span class="n">Rank</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">_size</span><span class="p">)</span> <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">out_of_range</span><span class="p">{</span><span class="s">&#34;The array is out of range!&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">expand</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">_data</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span> <span class="c1">//Prevents data from being overwritten
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">_data</span><span class="p">[</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="n">Val</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">_size</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>!!!The number of elements moved depends on the length of the order table and the location of the inserted element.</p>
</blockquote>
<p>!!!Average:</p>
<p>$T(n) = \frac{\sum_{i=0}^n i}{n + 1} = \frac{\frac{n(n + 1)}{2}}{n + 1} = \frac {n}{2} = O(n)$</p>
<p>delete</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">remove</span><span class="p">(</span><span class="n">Rank</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="n">_size</span><span class="p">)</span> <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">out_of_range</span><span class="p">{</span><span class="s">&#34;out of range&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">_data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">_data</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">shrink</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>!!!The number of elements moved depends on the length of the order table and the location of the deleted element</p>
</blockquote>
<p>!!!Average:</p>
<p>$T(n) = \frac{\sum_{i = 0}^{n - 1} i}{n} = \frac{\frac{n(n - 1)}{2}}{n} = \frac{n - 1}{2} = O(n)$</p>
<h4 id="advantage">Advantage</h4>
<ol>
<li>Logic is Contiguous, and physical is Contiguous</li>
<li>Random access any element</li>
<li>The address can be calculated by base address</li>
</ol>
<h4 id="disadvantage">Disadvantage</h4>
<ol>
<li>Insertion and deletion must move lot of elements</li>
<li>Must assign memory with maximum-size</li>
<li>It is not easy to extend array size</li>
</ol>
<h4 id="linked-list-implement-of-lists">Linked list implement of lists</h4>
<ol>
<li>Connected by pointer links</li>
<li>Accessed via a pointer to the first node of the list</li>
<li>Subsequent nodes are accessed via the link-pointer
member of the current node</li>
<li>Link pointer in the last node is set to null to mark the
list’s end</li>
</ol>
<p>Use a linked list instead of an array when</p>
<ol>
<li>You have an unpredictable number of data elements</li>
<li>Your list needs to be sorted quickly</li>
</ol>
<h4 id="types-of-linked-list">Types of linked list</h4>
<ol>
<li>
<p>Singly linked list</p>
<blockquote>
<p>Only traversed in one direction</p>
</blockquote>
</li>
<li>
<p>Circular, singly linked list</p>
<blockquote>
<p>Pointer in the last node points back to the first node</p>
</blockquote>
</li>
<li>
<p>Doubly linked list</p>
<blockquote>
<p>Allows traversals both forwards and backwards</p>
</blockquote>
</li>
<li>
<p>Circular, doubly linked list</p>
<blockquote>
<p>Forward pointer of the last node points to the first node and backward pointer of the first node points to the last
node</p>
</blockquote>
</li>
</ol>
<h4 id="singly-linked-list">Singly Linked list</h4>
<blockquote>
<p>without head node</p>
</blockquote>
<p>$head(pointer) \rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow [a_n] [pointer]\rightarrow null$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow null$</p>
<blockquote>
<p>with head node</p>
</blockquote>
<p>$head(pointer)\rightarrow [head] [pointer]\rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow[a_n] [pointer]\rightarrow null$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow [head] [pointer]\rightarrow null$</p>
<p>code</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//ListNode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ListNode</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">ListNodePosition</span> <span class="o">=</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">*</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ListNode</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="n">data</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">successor</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//List without headNode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">using</span> <span class="n">Rank</span> <span class="o">=</span> <span class="kt">int</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">List</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>address data</p>
<p>code</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">T</span> <span class="o">&amp;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="k">operator</span><span class="p">[](</span><span class="n">Rank</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>insert node</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//data
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">insertAsSuccessor</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">Val</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">{</span><span class="n">Val</span><span class="p">,</span> <span class="n">successor</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">successor</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">insertAsSuccessor</span><span class="p">(</span><span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">listNodePosition</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">listNodePosition</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">successor</span> <span class="o">=</span> <span class="n">listNodePosition</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">listNodePosition</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>delete</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">//by the rank
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">Delete</span><span class="p">(</span><span class="n">Rank</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">record</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">record</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">record</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="circular-singly-linked-list">Circular, singly linked list</h4>
<blockquote>
<p>A Feature of the circulated linked lists&mdash;the next pointer of the last node points to the head, so the linked list becomes a circle</p>
<p>Any node can be found from any given node</p>
</blockquote>
<p>structure</p>
<blockquote>
<p>without head node</p>
</blockquote>
<p>$head(pointer) \rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow [a_n] [pointer]\rightarrow head, tail \rightarrow [a_n]$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow head, tail\rightarrow head$</p>
<blockquote>
<p>with head node</p>
</blockquote>
<p>$head(pointer)\rightarrow [head] [pointer]\rightarrow [a_1] [pointer]\rightarrow [a_2] [pointer]\rightarrow &hellip;&hellip;\rightarrow[a_n] [pointer]\rightarrow [a_0]$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$head\rightarrow [head] [pointer]\rightarrow [head]$</p>
<p>code</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">Rank</span> <span class="o">=</span> <span class="kt">int</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">ListCircle</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">protected</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListNodePosition</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">ListCircle</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">ListCircle</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">args</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="na">[[nodiscard]]</span> <span class="n">Rank</span> <span class="n">size</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Rank</span> <span class="nf">DeleteNode</span><span class="p">(</span><span class="n">Rank</span> <span class="n">index</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">traverse</span><span class="p">(</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">~</span><span class="n">ListCircle</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">ListCircle</span><span class="p">()</span> <span class="o">:</span><span class="n">head</span><span class="p">{</span><span class="k">new</span> <span class="n">ListNode</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">{</span><span class="n">T</span><span class="p">{},</span> <span class="k">nullptr</span><span class="p">}},</span> <span class="n">_size</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">ListCircle</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">args</span><span class="p">)</span> <span class="o">:</span><span class="n">ListCircle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">Rank</span><span class="o">&gt;</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">begin</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">iter</span><span class="o">-&gt;</span><span class="n">insertAsSuccessor</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">begin</span> <span class="o">+</span> <span class="n">i</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="n">iter</span> <span class="o">=</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">iter</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">size</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">_size</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">clear</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">auto</span> <span class="n">record</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">delete</span> <span class="n">record</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::~</span><span class="n">ListCircle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">clear</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">Rank</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">DeleteNode</span><span class="p">(</span><span class="n">Rank</span> <span class="n">index</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">index</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">record</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span> <span class="o">=</span> <span class="n">record</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">delete</span> <span class="n">record</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">index</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">ListCircle</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">traverse</span><span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">visit</span><span class="p">)(</span><span class="n">T</span> <span class="o">&amp;</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">_size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Empty List&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">auto</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="p">(</span><span class="n">Rank</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">_size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">,</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">successor</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">visit</span><span class="p">(</span><span class="n">temp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="doubly-linked-list">Doubly linked list</h4>
<blockquote>
<p>The feature of double linked lists &mdash;- There are two pointer fields in one node, one points to the predecessor, another to the successor</p>
<p>Any node in the list can be found by tracing back and forth from any given node.</p>
</blockquote>
<p>structure</p>
<p>$[a_{i-1}]^\rightarrow_\leftarrow[prior] [data] [next]^\rightarrow_\leftarrow[a_{i + 1}]$</p>
<blockquote>
<p>no empty list</p>
</blockquote>
<p>$L\rightarrow[head]\rightarrow[a_1]^\rightarrow_\leftarrow[a_2]^\rightarrow_\leftarrow&hellip;&hellip;^\rightarrow_\leftarrow[a_n]\rightarrow null\newline$
$head.prior\rightarrow[a_n]\newline$</p>
<blockquote>
<p>empty list</p>
</blockquote>
<p>$L\rightarrow prior = L\rightarrow next = null$</p>
<p>delete</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">remove</span> <span class="p">(</span> <span class="n">ListNodePosi</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">p</span> <span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="n">T</span> <span class="n">e</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="n">p</span><span class="o">-&gt;</span><span class="n">pred</span><span class="o">-&gt;</span><span class="n">succ</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">succ</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="n">p</span><span class="o">-&gt;</span><span class="n">succ</span><span class="o">-&gt;</span><span class="n">pred</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">pred</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">delete</span> <span class="n">p</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">   <span class="n">_size</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>insert</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">ListInsert_DuL</span><span class="p">(</span><span class="n">DuLinklist</span> <span class="o">&amp;</span><span class="n">L</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">ElemType</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">DuLinklist</span> <span class="n">s</span><span class="p">,</span><span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">p</span><span class="o">=</span><span class="n">GetElemP_DuL</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">i</span><span class="p">)))</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">DuLinklist</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">DuLNode</span><span class="p">))))</span> 
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ERROR</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">data</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">s</span><span class="o">-&gt;</span><span class="n">prior</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prior</span><span class="p">;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">-&gt;</span> <span class="n">prior</span> <span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">prior</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">OK</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="circular-doubly-linked-list">Circular, doubly linked list</h4>
<p>structure</p>
<blockquote>
<p>without head</p>
</blockquote>
<p>$head\rightarrow prior = [a_n]\ a_n\rightarrow next = head$</p>
<blockquote>
<p>empty</p>
</blockquote>
<p>$head\rightarrow prior = head\rightarrow next = head$</p>
<p>Summary</p>
<p>Advantage</p>
<ol>
<li>store items &ldquo;sequentially&rdquo; without restrictions on location</li>
<li>insert new item without shifting</li>
<li>delete existing item without shifting</li>
<li>size can expand/contract throughout use</li>
</ol>
<p>Disadvantage</p>
<ol>
<li>overhead of links: used only internally, pure overhead</li>
<li>no longer have direct access to each element of the list. O(1)
access becomes O(n) access since we must go through first element, and then second, and then third, etc.</li>
</ol>
<h2 id="select-arrayedlist-or-linkedlist">Select ArrayedList or LinkedList?</h2>
<p>Array-Based List:</p>
<ol>
<li>Insertion and deletion are O(n).</li>
<li>Direct access are O(1).</li>
<li>Array must be allocated in advance.</li>
<li>No overhead if all array positions are full.</li>
</ol>
<p>Linked List:</p>
<ol>
<li>Insertion and deletion are O(1).</li>
<li>Direct access are O(n).</li>
<li>Space grows with number of elements.</li>
<li>Every element requires overhead.</li>
</ol>
<p>Contiguous storage is generally preferable:</p>
<ol>
<li>when the entries are individually very small;</li>
<li>when the size of the list is known when the program is written;</li>
<li>when few insertions or deletions need to be made except at the end of the list;</li>
<li>when random access is important.</li>
</ol>
<p>Linked storage proves superior</p>
<ol>
<li>when the entries are large;</li>
<li>when the size of the list is not known in advance</li>
<li>when flexibility is needed in inserting, deleting, and
rearranging the entries.</li>
</ol>
<h3 id="othercursor-implementation-of-linked-list">Other:Cursor Implementation of Linked List</h3>
<blockquote>
<p>implementation in a consecutive storage, and the next is not a pointer but a Rank to search next node</p>
</blockquote>
<ol>
<li>You still need to allocate a large space beforehand;</li>
<li>But in the linear table insert and delete operations do not need to move elements, only need to modify the cursor (pointer), so it still has the main advantages of chain storage structure;</li>
<li>A linked list described by an array is called a static linked list.</li>
</ol>
<p>Application of Linked list:</p>
<p>Example: Polynomials</p>
<p>$P(x) = a_0 + a_1x + a_2x^2 + &hellip; + a_nx^n$</p>
<blockquote>
<p>Array-based implementation:Disadvantage: for sparse polynomials
-&gt;waste memory!</p>
<p>Linked list implementation can solve the problem</p>
</blockquote>
<h3 id="about-homework">About Homework</h3>
<p>you can use Singly linked list like a stack (push and pop)</p>
]]></description>
</item>
</channel>
</rss>
